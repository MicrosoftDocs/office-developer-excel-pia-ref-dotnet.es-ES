<Type Name="FormatConditions" FullName="Microsoft.Office.Interop.Excel.FormatConditions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ea44a9883870de6c0c9f822551e19d40e34f00d" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/03/2018" />
    <Meta Name="ms.locfileid" Value="20587517" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface FormatConditions : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract FormatConditions implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.FormatConditions" />
  <TypeSignature Language="VB.NET" Value="Public Interface FormatConditions&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class FormatConditions : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024424-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="57336-101">Representa la colección de formatos condicionales de un rango.</span>
      <span class="sxs-lookup">
        <span data-stu-id="57336-101">Represents the collection of conditional formats for a single range.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="57336-102">
        <para>La colección <b>FormatConditions</b> puede contener hasta tres formatos condicionales. Cada formato está representado por un <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> objeto.</para> Uso de 
      <para>el <see cref="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" /> (propiedad) para devolver un objeto <b>FormatConditions</b> . Usar el <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> (método) para crear un nuevo formato condicional y use el <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> método para cambiar un formato condicional existente.</para><para>Si se intenta crear más de tres formatos condicionales para un mismo rango, el método <b>Add</b> se produce un error. Si un rango ya tiene tres formatos, puede utilizar el método <b>Modify</b> para cambiar uno de los formatos, o puede usar el <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> (método) para eliminar un formato y, a continuación, use el método <b>Add</b> para crear un nuevo formato.</para><para>Para obtener más información acerca de los formatos condicionales, vea el <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> objeto.</para><para></para></span>
      <span class="sxs-lookup">
        <span data-stu-id="57336-102">
          <para>The <b>FormatConditions</b> collection can contain up to three conditional formats. Each format is represented by a <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object.</para>
          <para>Use the <see cref="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" /> property to return a <b>FormatConditions</b> object. Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to create a new conditional format, and use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to change an existing conditional format.</para>
          <para>If you try to create more than three conditional formats for a single range, the <b>Add</b> method fails. If a range has three formats, you can use the <b>Modify</b> method to change one of the formats, or you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete a format and then use the <b>Add</b> method to create a new format.</para>
          <para>For more information about conditional formats, see the <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object.</para>
          <para></para>
        </span>
      </span>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary>
          <span data-ttu-id="57336-103">Reservado para uso interno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-103">Reserved for internal use.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2, object String, object TextOperator, object DateOperator, object ScopeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Add([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2, [in]object String, [in]object TextOperator, [in]object DateOperator, [in]object ScopeType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object, Optional String As Object, Optional TextOperator As Object, Optional DateOperator As Object, Optional ScopeType As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
        <Parameter Name="String" Type="System.Object" />
        <Parameter Name="TextOperator" Type="System.Object" />
        <Parameter Name="DateOperator" Type="System.Object" />
        <Parameter Name="ScopeType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">
          <span data-ttu-id="57336-104">.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-104"></span>
          </span>
          <span data-ttu-id="57336-105">(<see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-105"></span>
          </span>
          <span data-ttu-id="57336-106">Especifica si el formato condicional está basado en el valor de una celda o en una expresión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-106">Specifies whether the conditional format is based on a cell value or an expression.</span>
          </span>
        </param>
        <param name="Operator">
          <span data-ttu-id="57336-107">El operador de formato condicional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-107">The conditional format operator.</span>
          </span>
          <span data-ttu-id="57336-108">Puede ser uno de los siguientes <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> constantes: <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreater" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreaterEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLess" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLessEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" />, o <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotEqual" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-108">Can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> constants: <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreater" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreaterEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLess" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLessEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" />, or <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotEqual" />.</span>
          </span>
          <span data-ttu-id="57336-109">Si <paramref name="Type" /> es <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlExpression" />, el <paramref name="Operator" /> se omite el argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-109">If <paramref name="Type" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlExpression" />, the <paramref name="Operator" /> argument is ignored.</span>
          </span>
        </param>
        <param name="Formula1">
          <span data-ttu-id="57336-110">El valor o una expresión asociada con el formato condicional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-110">The value or expression associated with the conditional format.</span>
          </span>
          <span data-ttu-id="57336-111">Puede ser un valor constante, un valor de <b>tipo String</b> , una referencia de celda o una fórmula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-111">Can be a constant value, a <b>String</b> value, a cell reference, or a formula.</span>
          </span>
        </param>
        <param name="Formula2">
          <span data-ttu-id="57336-112">El valor o una expresión asociada con la segunda parte de la instrucción condicional formato cuando <paramref name="Operator" /> es <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> o <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> (de lo contrario, se omite este argumento).</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-112">The value or expression associated with the second part of the conditional format when <paramref name="Operator" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> or <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> (otherwise, this argument is ignored).</span>
          </span>
          <span data-ttu-id="57336-113">Puede ser un valor constante, un valor de tipo string, una referencia de celda o una fórmula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-113">Can be a constant value, a string value, a cell reference, or a formula.</span>
          </span>
        </param>
        <param name="String">To be added.</param>
        <param name="TextOperator">To be added.</param>
        <param name="DateOperator">To be added.</param>
        <param name="ScopeType">To be added.</param>
        <summary>
          <span data-ttu-id="57336-114">Agrega un nuevo formato condicional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-114">Adds a new conditional format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-115">A <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object que representa el nuevo formato condicional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-115">A <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object that represents the new conditional format.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-116">
            <para>No se puede definir más de tres formatos condicionales para un rango. Usar el <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> (método) para modificar un formato condicional ya existente, o bien usar la <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> método para eliminar un formato existente antes de agregar una nueva.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-116">
              <para>You cannot define more than three conditional formats for a range. Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to modify an existing conditional format, or use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete an existing format before adding a new one.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAboveAverage">
      <MemberSignature Language="C#" Value="public object AddAboveAverage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddAboveAverage() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddAboveAverage" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAboveAverage () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddAboveAverage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2621)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57336-117">Devuelve un nuevo <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> objeto que representa una regla de formato condicional para el rango especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-117">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object representing a conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-118">
            <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" />objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-118">
              <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-119">
            <para>La <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> objeto se usa para buscar valores por encima o por debajo de una media o desviación estándar en un rango de celdas. Por ejemplo, puede buscar los ejecutores medios anteriores en una evaluación de rendimiento anual o puede buscar materiales fabricados que se encuentran por debajo de dos desviaciones estándar de una clasificación de calidad.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-119">
              <para>The <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object is used to find values above or below an average or standard deviation in a range of cells. For example, you can find the above average performers in an annual performance review or you can locate manufactured materials that fall below two standard deviations in a quality rating.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddColorScale">
      <MemberSignature Language="C#" Value="public object AddColorScale (int ColorScaleType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddColorScale([in]int32 ColorScaleType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddColorScale(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddColorScale (ColorScaleType As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddColorScale(int ColorScaleType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ColorScaleType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ColorScaleType">
          <span data-ttu-id="57336-120">Tipo de la escala de color.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-120">The type of color scale.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57336-121">Devuelve un nuevo <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> objeto que representa una regla de formato condicional que utiliza gradaciones en los colores de celda para indicar las diferencias relativas entre los valores de las celdas incluidas en un rango seleccionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-121">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object representing a conditional formatting rule that uses gradations in cell colors to indicate relative differences in the values of cells included in a selected range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-122">
            <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" />objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-122">
              <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-123">Escalas de color <para>son visual las guías que le ayudarán a comprender la variación y la distribución de datos. Una escala de color le ayudará a identificar las diferencias relativas entre los valores de celdas en un intervalo determinado mediante el uso de variación de color. Distintos colores y gradaciones entre los colores representan diferencias en los valores de celda. Por ejemplo, en una escala de tres colores, puede especificar que las celdas con los valores más altos de datos relativa son de color verdes, las celdas con valores intermedios están en amarillas y las celdas con los valores más bajos son red</para><para></para></span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-123">
              <para>Color scales are visual guides that help you understand data distribution and variation. A color scale helps you identify relative differences in the values of cells in a given range by using color variation. Different colors and gradations between colors represent differences in cell values. For example, in a three-color scale, you can specify that cells with the highest relative data values are green, cells with intermediate values are yellow, and cells with the lowest values are red.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDatabar">
      <MemberSignature Language="C#" Value="public object AddDatabar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddDatabar() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddDatabar" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDatabar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddDatabar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57336-124">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> objeto que representa una regla de formato condicional para el rango especificado de la barra de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-124">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object representing a data bar conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-125">
            <see cref="T:Microsoft.Office.Interop.Excel.Databar" />objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-125">
              <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-126">Barras de datos de <para>le ayudarán a ver el valor de una celda en relación con otras celdas. La longitud de la barra de datos representa el valor de la celda. Una barra más larga representa un valor más alto y una barra más corta representa un valor menor. Barras de datos son útiles para descubrir los números superiores e inferiores especialmente con grandes cantidades de datos, como superior e inferior de venta toys en un día festivo informe venta.</para><para></para></span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-126">
              <para>Data bars help you see the value of a cell relative to other cells. The length of the data bar represents the value in the cell. A longer bar represents a higher value and a shorter bar represents a lower value. Data bars are useful in spotting higher and lower numbers especially with large amounts of data, such as top and bottom selling toys in a holiday sales report.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIconSetCondition">
      <MemberSignature Language="C#" Value="public object AddIconSetCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddIconSetCondition() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddIconSetCondition" />
      <MemberSignature Language="VB.NET" Value="Public Function AddIconSetCondition () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddIconSetCondition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57336-127">Devuelve un nuevo <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> objeto que representa un icono de conjunto de regla de formato condicional para el rango especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-127">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object which represents an icon set conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-128">
            <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" />objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-128">
              <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-129">
            <para>Uso una conjunto de iconos para anotar y clasificar datos en tres a cinco categorías separadas por un valor de umbral. Cada icono representa un rango de valores. Por ejemplo, en el conjunto de iconos de 3 flechas, la flecha arriba roja representa los valores más altos, la flecha hacia el lado amarilla representa valores medios y la flecha abajo verde representa los valores más bajos.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-129">
              <para>Use an icon set to annotate and classify data into three to five categories separated by a threshold value. Each icon represents a range of values. For example, in the 3 Arrows icon set, the red up arrow represents higher values, the yellow sideways arrow represents middle values, and the green down arrow represents lower values.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTop10">
      <MemberSignature Language="C#" Value="public object AddTop10 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddTop10() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddTop10" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTop10 () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddTop10();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2620)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57336-130">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> objeto que representa una regla de formato condicional para el rango especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-130">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object representing a conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-131">
            <see cref="T:Microsoft.Office.Interop.Excel.Top10" />objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-131">
              <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-132">
            <para>Mediante la <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> objeto, puede encontrar los valores más y mínimo en un rango de celdas en función de un valor de corte que especifique. Por ejemplo, puede encontrar los cinco productos más vendidos en un informe regional, el 15 de inferior por ciento de los productos en un cliente de encuesta o los salarios 25 principales de un análisis de personal de departamento.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-132">
              <para>Using the <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object, you can find the highest and lowest values in a range of cells based on a cutoff value that you specify. For example, you can find the top five selling products in a regional report, the bottom 15 percent of products in a customer survey, or the top 25 salaries in a department personnel analysis.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUniqueValues">
      <MemberSignature Language="C#" Value="public object AddUniqueValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddUniqueValues() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddUniqueValues" />
      <MemberSignature Language="VB.NET" Value="Public Function AddUniqueValues () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddUniqueValues();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2622)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57336-133">Devuelve un nuevo <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> objeto que representa una regla de formato condicional para el rango especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-133">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object representing a conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-134">
            <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" />objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-134">
              <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="57336-135">
            <para>Se puede usar el <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> objeto para ver rápidamente las celdas que contienen valores únicos o duplicados.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-135">
              <para>You can use the <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object to quickly visualize cells that contain either unique or duplicate values.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="57336-136">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object que representa la aplicación Microsoft Excel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-136">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="57336-137">Devuelve el número de objetos de la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-137">Returns the number of objects in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="57336-138">Devuelve un entero de 32 bits que indica la aplicación en la que se creó el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-138">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="57336-139">
            <para>Si el objeto se creó en Microsoft Excel, esta propiedad devuelve la cadena XCEL, que es equivalente a la C. 5843454 número hexadecimal</para> Propiedad de 
          <para>el <b>creador</b> está diseñada para usarse en Microsoft Excel para Macintosh, donde cada aplicación tiene un código de creador de cuatro caracteres. Por ejemplo, Microsoft Excel tiene el código de creador XCEL.</para><para></para></span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-139">
              <para>If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</para>
              <para>The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57336-140">Elimina el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-140">Deletes the object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item (object Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Item([in]object Index) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Item (Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Item(System::Object ^ Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="57336-141">
            <b>Objeto</b>requerido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-141">Required <b>Object</b>.</span>
          </span>
          <span data-ttu-id="57336-142">Número de índice del objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-142">The index number for the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57336-143">Devuelve un solo objeto de una colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-143">Returns a single object from a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57336-144">
            <b>Object</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-144">
              <b>Object</b>
            </span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="57336-145">Devuelve el objeto primario del objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="57336-145">Returns the parent object for the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>