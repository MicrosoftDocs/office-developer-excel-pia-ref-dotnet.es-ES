<Type Name="TextConnection" FullName="Microsoft.Office.Interop.Excel.TextConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="501c6ebc8a77ba133658ccd6644b87ad9afb0275" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50009691" /></Metadata><TypeSignature Language="C#" Value="public interface TextConnection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract TextConnection" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.TextConnection" />
  <TypeSignature Language="VB.NET" Value="Public Interface TextConnection" />
  <TypeSignature Language="C++ CLI" Value="public interface class TextConnection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000244D3-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1e4f3-101">Contiene la configuración del contrato de servicio que permite a Excel conectarse a un origen de datos de fuente de datos.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-101">Contains Service Contract settings that enable Excel to connect to a Data Feed data source.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-102">Devuelve un objeto Application <see cref="T:Microsoft.Office.Interop.Excel.Application" /> que representa la aplicación excel.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-102">Returns an Application <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Excel application.</span></span> <span data-ttu-id="1e4f3-103">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-103">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public object Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Connection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Connection { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-104">Devuelve o establece una cadena que contiene nombres de archivo de texto que permiten a Excel conectarse a orígenes de datos de texto.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-104">Returns or sets a string that contains text file names that enable Excel to connect to text data sources.</span></span> <span data-ttu-id="1e4f3-105"><b>Objeto</b> (<b>objeto</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-105"><b>Object</b> (<b>object</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-106">Devuelve un entero de 32 bits que indica la aplicación en la que se creó el objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-106">Returns a 32-bit integer that indicates the application in which the specified object was created.</span></span> <span data-ttu-id="1e4f3-107">Integer de solo <b>lectura</b> (<b>int</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-107">Read-only <b>Integer</b> (<b>int</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="1e4f3-108">Dado que el objeto se creó en Excel, esta propiedad devuelve el valor hexadecimal, 5843454C, que representa la cadena "XCEL".</span><span class="sxs-lookup"><span data-stu-id="1e4f3-108">Because the object was created in Excel, this property returns the hexadecimal value, 5843454C, which represents the string "XCEL".</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-109">Devuelve un <b>objeto Object</b> (<b>objeto</b> en C#) que representa el objeto primario del objeto <b>TextConnection</b> especificado.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-109">Returns an <b>Object</b> (<b>object</b> in C#) that represents the parent object of the specified <b>TextConnection</b> object.</span></span> <span data-ttu-id="1e4f3-110">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-110">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileColumnDataTypes">
      <MemberSignature Language="C#" Value="public object TextFileColumnDataTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TextFileColumnDataTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileColumnDataTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileColumnDataTypes As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TextFileColumnDataTypes { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-111">Devuelve o establece una matriz ordenada de constantes que especifica los tipos de datos aplicados a las columnas correspondientes en el archivo de texto que se está importando en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-111">Returns or sets an ordered array of constants that specify the data types applied to the corresponding columns in the text file that you’re importing into a query table.</span></span> <span data-ttu-id="1e4f3-112">La constante predeterminada de cada columna es <b>xlGeneral</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-112">The default constant for each column is <b>xlGeneral</b>.</span></span> <span data-ttu-id="1e4f3-113"><b>Object</b> (<b>objeto</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-113"><b>Object</b> (<b>object</b> in C#).</span></span> <span data-ttu-id="1e4f3-114">Lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-114">Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileCommaDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileCommaDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileCommaDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileCommaDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileCommaDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileCommaDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-115"><b>True</b> si la coma es el delimitador al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-115"><b>True</b> if the comma is the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-116"><b>False</b> si desea usar algún otro carácter como delimitador.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-116"><b>False</b> if you want to use some other character as the delimiter.</span></span> <span data-ttu-id="1e4f3-117">El valor predeterminado es <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-117">The default value is <b>False</b>.</span></span> <span data-ttu-id="1e4f3-118">Boolean de <b>lectura</b> y escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-118">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileConsecutiveDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileConsecutiveDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileConsecutiveDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileConsecutiveDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileConsecutiveDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileConsecutiveDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-119"><b>True</b> si se tratan los delimitadores consecutivos como un único delimitador al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-119"><b>True</b> if consecutive delimiters are treated as a single delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-120">El valor predeterminado es <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-120">The default value is <b>False</b>.</span></span> <span data-ttu-id="1e4f3-121"><b>Booleano</b> (<b>bool</b> en C#) Lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-121"><b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileDecimalSeparator">
      <MemberSignature Language="C#" Value="public string TextFileDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-122">Devuelve o establece el carácter separador decimal que Excel usa al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-122">Returns or sets the decimal separator character that Excel uses when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-123">El valor predeterminado es el carácter separador decimal del sistema.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-123">The default is the system decimal separator character.</span></span> <span data-ttu-id="1e4f3-124">String de <b>lectura y escritura</b> (<b>cadena</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-124">Read/Write <b>String</b> (<b>string</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileFixedColumnWidths">
      <MemberSignature Language="C#" Value="public object TextFileFixedColumnWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TextFileFixedColumnWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileFixedColumnWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileFixedColumnWidths As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TextFileFixedColumnWidths { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-125">Devuelve o configura una matriz de enteros que corresponde a los anchos de las columnas (en caracteres) del archivo de texto que va a importarse en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-125">Returns or sets an array of integers that correspond to the widths of the columns (in characters) in the text file that you’re importing into a query table.</span></span> <span data-ttu-id="1e4f3-126">Los anchos válidos están comprendidos entre 1 y 32767 caracteres.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-126">Valid widths are from 1 through 32767 characters.</span></span> <span data-ttu-id="1e4f3-127">Objeto de <b>lectura y escritura</b> (<b>objeto</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-127">Read/Write <b>Object</b> (<b>object</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileHeaderRow">
      <MemberSignature Language="C#" Value="public bool TextFileHeaderRow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileHeaderRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileHeaderRow" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileHeaderRow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileHeaderRow { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-128">Devuelve o establece un valor que especifica si la primera fila (de la fila inicial) debe tratarse como una fila de encabezado.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-128">Returns or sets value that specifies whether or not the first row (from the starting row) should be treated as a header row.</span></span> <span data-ttu-id="1e4f3-129"><b>Booleano</b> (<b>bool</b> en C#) Lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-129"><b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileOtherDelimiter">
      <MemberSignature Language="C#" Value="public string TextFileOtherDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileOtherDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileOtherDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileOtherDelimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileOtherDelimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-130">Devuelve o establece el carácter utilizado como delimitador al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-130">Returns or sets the character used as the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-131">El valor predeterminado es <b>Nothing</b> (una referencia nula (Nothing en Visual Basic) en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-131">The default value is <b>Nothing</b> (a null reference (Nothing in Visual Basic) in C#).</span></span> <span data-ttu-id="1e4f3-132">String de <b>lectura y escritura</b> (<b>cadena</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-132">Read/Write <b>String</b> (<b>string</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileParseType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextParsingType TextFileParseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextParsingType TextFileParseType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileParseType As XlTextParsingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextParsingType TextFileParseType { Microsoft::Office::Interop::Excel::XlTextParsingType get(); void set(Microsoft::Office::Interop::Excel::XlTextParsingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextParsingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-133">Devuelve o establece el formato de columna para los datos del archivo de texto que se va a importar en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-133">Returns or sets the column format for the data in the text file that you’re importing into a query table.</span></span> <span data-ttu-id="1e4f3-134">Lectura y <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" /> escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-134">Read/Write <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFilePlatform">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlPlatform TextFilePlatform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlPlatform TextFilePlatform" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFilePlatform" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFilePlatform As XlPlatform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlPlatform TextFilePlatform { Microsoft::Office::Interop::Excel::XlPlatform get(); void set(Microsoft::Office::Interop::Excel::XlPlatform value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlPlatform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-135">Devuelve o establece el origen del archivo de texto que se va a importar en la tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-135">Returns or sets the origin of the text file you’re importing into the query table.</span></span> <span data-ttu-id="1e4f3-136">Esta propiedad determina la página de códigos que se usa durante la importación de datos.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-136">This property determines which code page is used during the data import.</span></span> <span data-ttu-id="1e4f3-137">Lectura y <see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" /> escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-137">Read/write <see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFilePromptOnRefresh">
      <MemberSignature Language="C#" Value="public bool TextFilePromptOnRefresh { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFilePromptOnRefresh" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFilePromptOnRefresh" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFilePromptOnRefresh As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFilePromptOnRefresh { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-138"><b>True</b> si desea especificar el nombre del archivo de texto importado cada vez que se actualice la tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-138"><b>True</b> if you want to specify the name of the imported text file each time the query table is refreshed.</span></span> <span data-ttu-id="1e4f3-139">El cuadro de diálogo Importar archivo de texto permite especificar la ruta de acceso y el nombre del archivo.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-139">The Import Text File dialog box allows you to specify the path and file name.</span></span> <span data-ttu-id="1e4f3-140">El valor predeterminado es <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-140">The default value is <b>False</b>.</span></span> <span data-ttu-id="1e4f3-141">Boolean de <b>lectura</b> y escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-141">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileSemicolonDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileSemicolonDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileSemicolonDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileSemicolonDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileSemicolonDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileSemicolonDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-142"><b>True</b> si el punto y coma es el delimitador al importar un archivo de texto en una tabla de consulta y si el valor de la propiedad <see cref="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" /> <b>es xlDelimited</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-142"><b>True</b> if the semicolon is the delimiter when you import a text file into a query table, and if the value of the <see cref="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" /> property is <b>xlDelimited</b>.</span></span> <span data-ttu-id="1e4f3-143">El valor predeterminado es <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-143">The default value is <b>False</b>.</span></span> <span data-ttu-id="1e4f3-144">Boolean de <b>lectura</b> y escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-144">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileSpaceDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileSpaceDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileSpaceDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileSpaceDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileSpaceDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileSpaceDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-145"><b>True</b> si el carácter de espacio es el delimitador al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-145"><b>True</b> if the space character is the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-146">El valor predeterminado es <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-146">The default value is <b>False</b>.</span></span> <span data-ttu-id="1e4f3-147">Boolean de <b>lectura y</b> escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-147">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileStartRow">
      <MemberSignature Language="C#" Value="public int TextFileStartRow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextFileStartRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileStartRow" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileStartRow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextFileStartRow { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-148">Devuelve o establece el número de fila en el que comenzará el análisis del texto al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-148">Returns or sets the row number at which text parsing will begin when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-149">Se pueden usar enteros comprendidos entre 1 y 32767.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-149">Valid values are integers from 1 through 32767.</span></span> <span data-ttu-id="1e4f3-150">El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-150">The default value is 1.</span></span> <span data-ttu-id="1e4f3-151">Integer de <b>lectura y escritura</b> (<b>int</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-151">Read/Write <b>Integer</b> (<b>int</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTabDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileTabDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileTabDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTabDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTabDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileTabDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-152"><b>True</b> si se usa el carácter de tabulación como delimitador al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-152"><b>True</b> if the tab character is the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-153">El valor predeterminado es <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-153">The default value is <b>False</b>.</span></span> <span data-ttu-id="1e4f3-154">Boolean de <b>lectura y</b> escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-154">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTextQualifier">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextQualifier TextFileTextQualifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextFileTextQualifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTextQualifier" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTextQualifier As XlTextQualifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextQualifier TextFileTextQualifier { Microsoft::Office::Interop::Excel::XlTextQualifier get(); void set(Microsoft::Office::Interop::Excel::XlTextQualifier value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextQualifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-155">Devuelve o establece el calificador de texto usado al importar un archivo de texto en una tabla de consulta.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-155">Returns or sets the text qualifier when you import a text file into a query table.</span></span> <span data-ttu-id="1e4f3-156">El calificador de texto especifica que los datos incluidos están en formato de texto.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-156">The text qualifier specifies that the enclosed data is in text format.</span></span> <span data-ttu-id="1e4f3-157">Lectura y <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" /> escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-157">Read/Write <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileThousandsSeparator">
      <MemberSignature Language="C#" Value="public string TextFileThousandsSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileThousandsSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileThousandsSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileThousandsSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileThousandsSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-158"><b>True</b> para que Excel trate los números importados como texto que comienzan con un símbolo "-" como un símbolo negativo.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-158"><b>True</b> for Excel to treat numbers imported as text that begin with a "-" symbol as a negative symbol.</span></span> <span data-ttu-id="1e4f3-159"><b>False</b> para que Microsoft Excel trate los números importados como texto que comiencen por un símbolo "-" como texto.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-159"><b>False</b> for Excel to treat numbers imported as text that begin with a "-" symbol as text.</span></span> <span data-ttu-id="1e4f3-160">Boolean de <b>lectura</b> y escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-160">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTrailingMinusNumbers">
      <MemberSignature Language="C#" Value="public bool TextFileTrailingMinusNumbers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileTrailingMinusNumbers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTrailingMinusNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTrailingMinusNumbers As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileTrailingMinusNumbers { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-161"><b>True</b> para que Excel trate los números importados como texto que comienzan con un símbolo "-" como un símbolo negativo.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-161"><b>True</b> for Excel to treat numbers imported as text that begin with a "-" symbol as a negative symbol.</span></span> <span data-ttu-id="1e4f3-162"><b>False</b> para que Microsoft Excel trate los números importados como texto que comiencen por un símbolo "-" como texto.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-162"><b>False</b> for Excel to treat numbers imported as text that begin with a "-" symbol as text.</span></span> <span data-ttu-id="1e4f3-163">Boolean de <b>lectura y</b> escritura (<b>bool</b> en C#).</span><span class="sxs-lookup"><span data-stu-id="1e4f3-163">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileVisualLayout">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextVisualLayoutType TextFileVisualLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextVisualLayoutType TextFileVisualLayout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileVisualLayout" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileVisualLayout As XlTextVisualLayoutType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextVisualLayoutType TextFileVisualLayout { Microsoft::Office::Interop::Excel::XlTextVisualLayoutType get(); void set(Microsoft::Office::Interop::Excel::XlTextVisualLayoutType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextVisualLayoutType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e4f3-164">Devuelve o establece una enumeración que indica si el diseño visual del texto que se va a importar es de izquierda a derecha o <see cref="T:Microsoft.Office.Interop.Excel.XlTextVisualLayoutType" /> de derecha a izquierda.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-164">Returns or sets an <see cref="T:Microsoft.Office.Interop.Excel.XlTextVisualLayoutType" /> enumeration that indicates whether the visual layout of the text being imported is left-to-right or right-to-left.</span></span> <span data-ttu-id="1e4f3-165">Lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1e4f3-165">Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>