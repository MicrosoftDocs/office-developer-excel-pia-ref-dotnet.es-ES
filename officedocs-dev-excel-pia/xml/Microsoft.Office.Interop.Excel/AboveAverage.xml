<Type Name="AboveAverage" FullName="Microsoft.Office.Interop.Excel.AboveAverage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1a21e926b51408a1d10155a1a8f623c34f2f9726" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/24/2018" />
    <Meta Name="ms.locfileid" Value="20584101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface AboveAverage" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract AboveAverage" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.AboveAverage" />
  <TypeSignature Language="VB.NET" Value="Public Interface AboveAverage" />
  <TypeSignature Language="C++ CLI" Value="public interface class AboveAverage" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0002449E-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9ccda-p101">Representa una indicación visual de superior a la media de una regla de formato condicional. Aplicar un color o un relleno a un rango o una selección ayuda a ver el valor de unas celdas en relación con otras celdas.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ccda-p101">Represents an above average visual of a conditional formatting rule. Applying a color or fill to a range or selection to help you see the value of a cells relative to other cells.</span>
      </span>
    </summary>
    <remarks>
      <para>
        <span data-ttu-id="9ccda-103">Todos los objetos de formato condicionales están contenidos en una <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> objeto de colección, que es un elemento secundario de un <see cref="T:Microsoft.Office.Interop.Excel.Range" /> colección.</span>
        <span class="sxs-lookup">
          <span data-stu-id="9ccda-103">All conditional formatting objects are contained within a <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> collection object, which is a child of a <see cref="T:Microsoft.Office.Interop.Excel.Range" /> collection.</span>
        </span>
        <span data-ttu-id="9ccda-104">Puede crear una regla de formato mediante cualquiera el <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> o <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.AddAboveAverage" /> (método) de la <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" />colección.</span>
        <span class="sxs-lookup">
          <span data-stu-id="9ccda-104">You can create an above average formatting rule by using either the <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> or <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.AddAboveAverage" /> method of the <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" />collection.</span>
        </span>
      </para>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AboveBelow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlAboveBelow AboveBelow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlAboveBelow AboveBelow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.AboveBelow" />
      <MemberSignature Language="VB.NET" Value="Public Property AboveBelow As XlAboveBelow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlAboveBelow AboveBelow { Microsoft::Office::Interop::Excel::XlAboveBelow get(); void set(Microsoft::Office::Interop::Excel::XlAboveBelow value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2731)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2731)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlAboveBelow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-105">Devuelve o establece una de las constantes de la <see cref="T:Microsoft.Office.Interop.Excel.XlAboveBelow" /> (enumeración), que especifica si la regla de formato condicional busca valores de celda superiores o por debajo de la media del rango o la desviación estándar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-105">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlAboveBelow" /> enumeration, specifying if the conditional formatting rule looks for cell values above or below the range average or standard deviation.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlAboveBelow" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-106">Cuando se usa sin un calificador de objeto, esta propiedad devuelve una <see cref="T:Microsoft.Office.Interop.Excel._Application" /> objeto que representa la aplicación de Microsoft Office Excel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-106">When used without an object qualifier, this property returns an  <see cref="T:Microsoft.Office.Interop.Excel._Application" /> object that represents the Microsoft Office Excel  application.</span>
          </span>
          <span data-ttu-id="9ccda-107">Cuando se utiliza con un calificador de objeto, esta propiedad devuelve un objeto <b>Application</b> que representa al creador del objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-107">When used with an object qualifier, this property returns an <b>Application</b> object that represents the creator of the specified object.</span>
          </span>
          <span data-ttu-id="9ccda-108">Es de sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-108">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-109">
            <b>Aplicación</b> (vea lo anterior)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-109">
              <b>Application</b> (see above)</span>
          </span>
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-110">Puede utilizar esta propiedad con un objeto de automatización OLE para devolver la aplicación de dicho objeto.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-110">You can use this property with an OLE Automation object to return the application of that object.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppliesTo">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range AppliesTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range AppliesTo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.AppliesTo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppliesTo As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ AppliesTo { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2626)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2626)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-111">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objeto que especifica el rango de celdas al que se aplica la regla de formato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-111">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Range" /> object specifying the cell range to which the formatting rule is applied.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Range" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Borders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Borders As Borders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Borders ^ Borders { Microsoft::Office::Interop::Excel::Borders ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-112">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> colección que especifica el formato de bordes de celda si la regla de formato condicional se evalúa como <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-112">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> collection that specifies the formatting of cell borders if the conditional formatting rule evaluates to <b>True</b>.</span>
          </span>
          <span data-ttu-id="9ccda-113">Solo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-113">Read-only.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Borders" />
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-114">Para los objetos de formato condicional, sólo se pueden definir las propiedades de los bordes superior, inferior y lateral de la celda.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-114">For a conditional formatting object, you can only set the properties for the top, bottom, and side borders of the cell.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalcFor">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCalcFor CalcFor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCalcFor CalcFor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.CalcFor" />
      <MemberSignature Language="VB.NET" Value="Public Property CalcFor As XlCalcFor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCalcFor CalcFor { Microsoft::Office::Interop::Excel::XlCalcFor get(); void set(Microsoft::Office::Interop::Excel::XlCalcFor value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2730)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2730)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCalcFor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-115">Devuelve o establece una de las constantes de la <see cref="T:Microsoft.Office.Interop.Excel.XlCalcFor" /> (enumeración), que especifica el ámbito de los datos que se deben evaluar para el formato condicional en un informe de tabla dinámica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-115">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlCalcFor" /> enumeration, which specifies the scope of data to be evaluated for the conditional format in a PivotTable report.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlCalcFor" />
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-116">Esta propiedad sólo se utiliza cuando se aplica el formato condicional a los datos de un informe de tabla dinámica.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-116">This property is applicable only when the conditional format is being applied to data in a PivotTable report.</span>
            </span>
          </para>
          <para>
            <span data-ttu-id="9ccda-117">Esta propiedad se puede establecer en <see cref="F:Microsoft.Office.Interop.Excel.XlCalcFor.xlAllValues" />, <see cref="F:Microsoft.Office.Interop.Excel.XlCalcFor.xlColGroups" />, o <see cref="F:Microsoft.Office.Interop.Excel.XlCalcFor.xlRowGroups" />sólo si el <see cref="P:Microsoft.Office.Interop.Excel.AboveAverage.ScopeType" /> propiedad está establecida en <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlFieldsScope" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-117">This property can be set to <see cref="F:Microsoft.Office.Interop.Excel.XlCalcFor.xlAllValues" />, <see cref="F:Microsoft.Office.Interop.Excel.XlCalcFor.xlColGroups" />, or <see cref="F:Microsoft.Office.Interop.Excel.XlCalcFor.xlRowGroups" />only if the <see cref="P:Microsoft.Office.Interop.Excel.AboveAverage.ScopeType" /> property is set to <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlFieldsScope" />.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-118">Devuelve una constante en el <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> (enumeración) que indica la aplicación en la que se creó este objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-118">Returns a constant in the <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> enumeration that indicates the application in which this object was created.</span>
          </span>
          <span data-ttu-id="9ccda-119">Solo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-119">Read-only.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" />
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-p107">Si el objeto se creó en Microsoft Excel, la propiedad devuelve la cadena XCEL, que es el equivalente del número hexadecimal 5843454C. La propiedad <b>Creator</b> está diseñada para su uso en Microsoft Excel para Macintosh, donde cada aplicación tiene un código de creador de cuatro caracteres. Por ejemplo, Microsoft Excel tiene el código de creador XCEL.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-p107">If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.  The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</span>
            </span>
          </para>
          <para></para>
        </remarks>
        <example>
          <para>
            <span data-ttu-id="9ccda-123">En este ejemplo se muestra un mensaje sobre el creador de un libro de Excel.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-123">This example displays a message about the creator of an Excel workbook.</span>
            </span>
          </para>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.AboveAverage.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-124">Elimina el objeto de reglas de formato condicional especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-124">Deletes the specified conditional formatting rule object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Font" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Font ^ Font { Microsoft::Office::Interop::Excel::Font ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-125">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Font" /> objeto que especifica el formato de fuente si la regla de formato condicional se evalúa como <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-125">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Font" /> object that specifies the font formatting if the conditional formatting rule evaluates to <b>True</b>.</span>
          </span>
          <span data-ttu-id="9ccda-126">Solo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-126">Read-only.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Font" />
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-p109">No se admiten todas las propiedades del objeto <b>Font</b> para los objetos de formato condicional. Puede definir los atributos de estilo de fuente, subrayado, color y tachado.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-p109">Not all properties of the <b>Font</b> object are supported for a conditional formatting object. You can set the font style, underline, color, and strikethrough attributes.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Interior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interior As Interior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Interior ^ Interior { Microsoft::Office::Interop::Excel::Interior ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-129">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> objeto que especifica los atributos del interior de una celda para un formato condicional de la regla que se evalúa como <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-129">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> object that specifies a cell's interior attributes for a conditional formatting rule that evaluates to <b>True</b>.</span>
          </span>
          <span data-ttu-id="9ccda-130">Solo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-130">Read-only.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Interior" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyAppliesToRange">
      <MemberSignature Language="C#" Value="public void ModifyAppliesToRange (Microsoft.Office.Interop.Excel.Range Range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ModifyAppliesToRange([in]class Microsoft.Office.Interop.Excel.Range Range) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.AboveAverage.ModifyAppliesToRange(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ModifyAppliesToRange(Microsoft::Office::Interop::Excel::Range ^ Range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2627)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Range" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Range">
          <span data-ttu-id="9ccda-131">Rango al que se aplicará esta regla de formato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-131">The range to which this formatting rule will be applied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ccda-132">Establece el rango de celdas al que se aplica esta regla de formato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-132">Sets the cell range to which this formatting rule applies.</span>
          </span>
        </summary>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-133">El rango debe estar en el estilo de referencia A1 y totalmente contenido dentro de la hoja que es el elemento principal de la <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> colección.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-133">The range must be in the A1 reference style and be entirely contained within the sheet that is the parent of the <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> collection.</span>
            </span>
            <span data-ttu-id="9ccda-134">Puede incluir el operador de rango (dos puntos), el operador de intersección (un espacio) o el operador de unión (una coma).</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-134">It can include the range operator (a colon), the intersection operator (a space), or the union operator (a comma).</span>
            </span>
            <span data-ttu-id="9ccda-135">También se puede usar signos de dólar, pero se pasan por alto.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-135">Dollar signs can also be used but they are ignored.</span>
            </span>
          </para>
          <para>
            <span data-ttu-id="9ccda-136">Asimismo, se puede utilizar un nombre definido local en cualquier parte del rango, pero debe estar en el lenguaje de la macro.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-136">You can also use a local defined name in any part of the range, but the name must be in the language of the macro.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormat { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-137">Devuelve o establece el formato de número aplicado a una celda si la regla de formato condicional se evalúa como <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-137">Returns or sets the number format applied to a cell if the conditional formatting rule evaluates to <b>True</b>.</span>
          </span>
          <span data-ttu-id="9ccda-138">Lectura/Escritura <b>Objeto</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-138">Read/write <b>Object</b>.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-139">
            <b>Object</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-139">
              <b>Object</b>
            </span>
          </span>
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-140">El formato de número se especifica con los mismos códigos de formato que se muestra en la ficha número del cuadro de diálogo Formato de celdas.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-140">The number format is specified using the same format codes displayed on the Number tab of the Format Cells dialog box.</span>
            </span>
            <span data-ttu-id="9ccda-141">Puede utilizar un formato de número integrado, por ejemplo "General", o <see cref="createacustomnumberformat#CrossCollection" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-141">You can use a built-in number format, for example "General", or <see cref="createacustomnumberformat#CrossCollection" />.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumStdDev">
      <MemberSignature Language="C#" Value="public int NumStdDev { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumStdDev" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.NumStdDev" />
      <MemberSignature Language="VB.NET" Value="Public Property NumStdDev As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumStdDev { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2732)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2732)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2732)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-142">Devuelve o establece la desviación estándar numérica para un objeto <b>AboveAverage</b> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-142">Returns or sets the numeric standard deviation for an <b>AboveAverage</b> object.</span>
          </span>
          <span data-ttu-id="9ccda-143">
            <b>Integer</b> de lectura y escritura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-143">Read/write <b>Integer</b>.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-144">
            <b>Integer</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-144">
              <b>Integer</b>
            </span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-p115">Devuelve el objeto primario correspondiente al objeto especificado. Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-p115">Returns the parent object for the specified object. Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-147">
            <b>Object</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-147">
              <b>Object</b>
            </span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-p116">Devuelve o establece el valor de prioridad de la regla de formato condicional. La prioridad determina el orden de evaluación cuando existen varias reglas de formato condicional en una hoja de cálculo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-p116">Returns or sets the priority value of the conditional formatting rule. The priority determines the order of evaluation when multiple conditional formatting rules exist in a worksheet.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-150">
            <b>Integer</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-150">
              <b>Integer</b>
            </span>
          </span>
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-p117">Cuando se establece la prioridad, el valor debe ser un número entero positivo entre 1 y el número total de reglas de formato condicional en la hoja de cálculo. La prioridad debe ser un valor único para todas las reglas de la hoja, por lo que si se cambia la prioridad para la regla de formato condicional especificada, es posible que varíe el valor de prioridad de las demás reglas en la hoja de cálculo.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-p117">When setting the priority, the value must be a positive integer between 1 and the total number of conditional formatting rules on the worksheet. The priority must be a unique value for all rules on the worksheet, so changing the priority for the specified conditional formatting rule may cause the priority value of the other rules on the worksheet to be shifted.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PTCondition">
      <MemberSignature Language="C#" Value="public bool PTCondition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PTCondition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.PTCondition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PTCondition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PTCondition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2631)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-p118">Devuelve un valor <b>Boolean</b> que indica si el formato condicional se aplica a un gráfico de tabla dinámica. Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-p118">Returns a <b>Boolean</b> value indicating if the conditional format is being applied to a PivotTable chart. Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-155">
            <b>Boolean</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-155">
              <b>Boolean</b>
            </span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopeType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlPivotConditionScope ScopeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlPivotConditionScope ScopeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.ScopeType" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeType As XlPivotConditionScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlPivotConditionScope ScopeType { Microsoft::Office::Interop::Excel::XlPivotConditionScope get(); void set(Microsoft::Office::Interop::Excel::XlPivotConditionScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlPivotConditionScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-156">Devuelve o establece una de las constantes de la <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /> (enumeración), que determina el ámbito del formato condicional cuando se aplica a un gráfico de tabla dinámica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-156">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /> enumeration, which determines the scope of the conditional format when it is applied to a PivotTable chart.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" />
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-157">El valor predeterminado es <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlSelectionScope" />, que establece el ámbito utilizando el <see cref="P:Microsoft.Office.Interop.Excel.AboveAverage.AppliesTo" />(propiedad).</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-157">The default value is <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlSelectionScope" />, which sets the scope using the <see cref="P:Microsoft.Office.Interop.Excel.AboveAverage.AppliesTo" />property.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFirstPriority">
      <MemberSignature Language="C#" Value="public void SetFirstPriority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFirstPriority() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.AboveAverage.SetFirstPriority" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFirstPriority ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFirstPriority();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2629)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-158">Establece el valor de prioridad para esta regla de formato condicional en "1" para que se evalúe antes que todas las demás reglas en la hoja de cálculo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-158">Sets the priority value for this conditional formatting rule to "1" so that it will be evaluated before all other rules on the worksheet.</span>
          </span>
        </summary>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-159">Cuando se tienen varias reglas de formato condicional en una hoja de cálculo, si la regla no se estableció previamente como "prioridad 1", este método hará que la prioridad de todas las demás reglas existentes en la hoja de cálculo aumente en uno.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-159">When you have multiple conditional formatting rules  in a worksheet, if the rule was not previously set to priority "1", this method will cause the priority of all other existing rules on the worksheet to be increased by one.</span>
            </span>
          </para>
          <para>
            <span data-ttu-id="9ccda-160">
              <b>Nota</b>: los niveles de prioridad para reglas de formato condicional se aplican según el nivel de hoja de cálculo.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-160">
                <b>Note</b>: Priority levels for conditional formatting rules are applied on a worksheet-level basis.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastPriority">
      <MemberSignature Language="C#" Value="public void SetLastPriority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLastPriority() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.AboveAverage.SetLastPriority" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLastPriority ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLastPriority();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2630)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-161">Establece el orden de evaluación para esta regla de formato condicional de modo que se evalúe después que todas las demás reglas en la hoja de cálculo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-161">Sets the evaluation order for this conditional formatting rule so it is evaluated after all other rules on the worksheet.</span>
          </span>
        </summary>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-p119">El valor real de la prioridad será igual al número total de reglas de formato condicional en la hoja de cálculo. Cuando se tengan varias reglas de formato condicional en una hoja de cálculo, este método hará que la prioridad de las reglas que tenían un valor de prioridad mayor que el de esta regla aumente en uno.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-p119">The actual vaule of the priority will be equal to the total number of conditional formatting rules on the worksheet. When you have multiple conditional formatting rules  in a worksheet, this method will cause the priority of rules that had a priority value greater than this rule to be increased by one.</span>
            </span>
          </para>
          <para>
            <span data-ttu-id="9ccda-164">
              <b>Nota</b>: los niveles de prioridad para reglas de formato condicional se aplican según el nivel de hoja de cálculo.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-164">
                <b>Note</b>: Priority levels for conditional formatting rules are applied on a worksheet-level basis.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopIfTrue">
      <MemberSignature Language="C#" Value="public bool StopIfTrue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StopIfTrue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.StopIfTrue" />
      <MemberSignature Language="VB.NET" Value="Public Property StopIfTrue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StopIfTrue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-165">Devuelve o establece un valor <b>Boolean</b> que determina si se deben evaluar reglas adicionales de formato en la celda si la regla actual da como resultado <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-165">Returns or sets a <b>Boolean</b> value that determines if additional formatting rules on the cell should be evaluated if the current rule evaluates to <b>True</b>.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ccda-166">
            <b>Boolean</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-166">
              <b>Boolean</b>
            </span>
          </span>
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-167">Para mantener la compatibilidad con versiones anteriores, el valor predeterminado para esta propiedad es <b>True</b>, que corresponde al comportamiento opuesto de una regla de formato creada en la interfaz del usuario.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-167">To support backward compatibility, the default value for this property is <b>True</b>, which is the opposite behavior of a formatting rule created in the user interface.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public int Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.AboveAverage.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Type { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ccda-168">Devuelve una de las constantes de la <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> (enumeración), que especifica el tipo de formato condicional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-168">Returns one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> enumeration, which specifies the type of conditional format.</span>
          </span>
          <span data-ttu-id="9ccda-169">Solo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ccda-169">Read-only.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        </value>
        <remarks>
          <para>
            <span data-ttu-id="9ccda-170">Esta propiedad siempre devolverá un valor <b>entero</b> de "12", que es equivalente a <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlAboveAverageCondition" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9ccda-170">This property will always return a <b>Integer</b> value of "12", which is equivalent to <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlAboveAverageCondition" />.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>