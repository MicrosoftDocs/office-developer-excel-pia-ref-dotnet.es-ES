<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e8779a13b1ae831ceba99e1523c885328838f42" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/17/2018" />
    <Meta Name="ms.locfileid" Value="20574616" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Se usa como un contenedor para las funciones de hoja de c√°lculo de Excel que pueden llamarse desde Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg2">Primer inter√©s: fecha del primer inter√©s del valor burs√°til.</param>
        <param name="Arg3">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til.</param>
        <param name="Arg4">Tasa: tasa de inter√©s nominal anual del valor burs√°til.</param>
        <param name="Arg5">Valor nominal que se supone.</param>
        <param name="Arg6">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o.</param>
        <param name="Arg7">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el inter√©s devengado de un valor burs√°til que paga intereses peri√≥dicos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla se describe los valores que se pueden usar para <paramref name="Arg5" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til.</param>
        <param name="Arg3">Tasa de inter√©s nominal anual de un valor burs√°til.</param>
        <param name="Arg4">Valor nominal que se supone. Si se omite este valor, el m√©todo ACCRINTM utiliza 1.000 $.</param>
        <param name="Arg5">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el inter√©s devengado de un valor burs√°til que paga intereses a su vencimiento.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla se describe los valores que se pueden usar para <paramref name="Arg5" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>En la lista siguiente contiene informaci√≥n que se debe tener en cuenta al trabajar con ACCRINTM:</para>
          <list type="bullet">
            <item>
              <description>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan utilizarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900.</description>
            </item>
            <item>
              <description>Los argumentos de emisi√≥n, vencimiento y base se truncan a enteros.</description>
            </item>
            <item>
              <description>Si la fecha de emisi√≥n o de vencimiento no es una fecha v√°lida, ACCRINTM genera un error.</description>
            </item>
            <item>
              <description>Si la tasa ‚â§ 0 o si el valor que se supone es ‚â§ 0, ACCRINTM genera un error.</description>
            </item>
            <item>
              <description>Si base &lt; 0 o si base &gt; 4, ACCRINTM genera un error. </description>
            </item>
            <item>
              <description>Si la fecha de emisi√≥n es mayor o igual que la de vencimiento, ACCRINTM genera un error.</description>
            </item>
            <item>
              <description>ACCRINTM se calcula de la siguiente forma: 

 </description>
            </item>
          </list>
          <para>donde:</para>
          <para>A = n√∫mero de d√≠as acumulados contados seg√∫n una base mensual. Para el inter√©s en los elementos de la fecha de vencimiento, se usa el n√∫mero de d√≠as desde la fecha de emisi√≥n hasta la fecha de vencimiento.</para>
          <para>D. = base anual.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coseno del √°ngulo que desea obtener y debe estar comprendido entre -1 y 1.</param>
        <summary>Devuelve el arcocoseno, o coseno inverso, de un n√∫mero. El arcocoseno es el √°ngulo cuyo coseno es <paramref name="Arg1" />. El √°ngulo devuelto se expresa en radianes en el intervalo entre 0 (cero) a pi.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si desea convertir el resultado de radianes a grados, multipl√≠quelo por 180/PI() o utilice el m√©todo Degrees.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real igual o mayor que 1.</param>
        <summary>Devuelve el coseno hiperb√≥lico inverso de un n√∫mero. N√∫mero debe ser mayor o igual a 1. El coseno hiperb√≥lico inverso es el valor cuyo coseno hiperb√≥lico es <paramref name="Arg1" />, por lo que es igual Acosh(Cosh(number)) <paramref name="Arg1" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cotangente del √°ngulo que desee.</param>
        <summary>Devuelve la cotangente de un n√∫mero, en radianes en el intervalo de 0 a Pi.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La cotangente hiperb√≥lica del √°ngulo que desee.</param>
        <summary>Devuelve la cotangente hiperb√≥lica inversa de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_funci√≥n: un n√∫mero de 1 a 19 que especifica la funci√≥n que se usar√°.</param>
        <param name="Arg2">Opciones: valor num√©rico que determina qu√© valores del rango de evaluaci√≥n de la funci√≥n se omitir√°n.</param>
        <param name="Arg3">Ref1: el primer argumento num√©rico para las funciones que tienen varios argumentos num√©ricos de los que desea obtener el valor agregado.</param>
        <param name="Arg4">Ref2 a Ref30: argumentos num√©ricos 2 a 30 cuyo valor agregado desea obtener.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve un agregado en una lista o base de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Las siguientes restricciones se aplican a los argumentos Ref (Arg3 - Arg 30) en funci√≥n del valor de <b>N√∫m_funci√≥n</b> .</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Tipos v√°lidos: hacer referencia a cualquier celda definidas las intersecciones de uniones nombres estructurada referencesInvalid tipos: las matrices de datos reales</description>
              <description>Tipos v√°lidos: hacer referencia a cualquier celda definidas las intersecciones de uniones nombres estructurada referencesInvalid tipos: las matrices de datos reales</description>
              <description>Tipos v√°lidos: hacer referencia a cualquier celda definidas las intersecciones de uniones nombres estructurada referencesInvalid tipos: las matrices de datos reales</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Tipos v√°lidos: cualquier referencia de celda definida por el de las intersecciones de uniones nombres estructurada referencias de matrices de datos real</description>
              <description>Tipos v√°lidos: cualquier referencia de celda definida por el de las intersecciones de uniones nombres estructurada referencias de matrices de datos real</description>
              <description>No se permiten referencias</description>
            </item>
          </list>
          <para>Si un segundo argumento de referencia es obligatorio pero no se incluye, AGREGAR devolver√° el valor de error #¬°VALOR!</para>
          <para>Si algunas de las referencias son referencias 3D, AGREGAR devolver√° el valor de error #¬°VALOR!</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo del activo.</param>
        <param name="Arg2">Fecha de compra del activo.</param>
        <param name="Arg3">Fecha del final del primer per√≠odo.</param>
        <param name="Arg4">Valor remanente al final de la vida del activo.</param>
        <param name="Arg5">Per√≠odo de depreciaci√≥n.</param>
        <param name="Arg6">Tasa de depreciaci√≥n.</param>
        <param name="Arg7">Base anual que se debe utilizar.</param>
        <summary>Devuelve la depreciaci√≥n correspondiente a cada per√≠odo contable. Esta funci√≥n se proporciona para el sistema contable franc√©s.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si un activo se adquiere en medio del per√≠odo contable, se toma en cuenta la depreciaci√≥n prorrateada. El m√©todo es similar a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, excepto en que se aplica un coeficiente de depreciaci√≥n en el c√°lculo dependiendo de la vida de los activos. En la siguiente tabla se describe los valores utilizados en <paramref name="Arg7" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>360 d√≠as (m√©todo NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Real</description>
            </item>
            <item>
              <term>3</term>
              <description>A√±o de 365 d√≠as</description>
            </item>
            <item>
              <term>4</term>
              <description>A√±o de 360 d√≠as (m√©todo europeo)</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Esta funci√≥n devuelve la depreciaci√≥n de los activos hasta el √∫ltimo per√≠odo de la vida de los activos o hasta que el valor acumulado de la depreciaci√≥n es mayor que el costo de los activos menos el valor remanente.</para>
          <para>Los coeficientes de depreciaci√≥n son: 

</para>
          <list type="table">
            <item>
              <term>Entre 3 y 4 a√±os</term>
              <description>1,5</description>
            </item>
            <item>
              <term>Entre 5 y 6 a√±os</term>
              <description>2</description>
            </item>
            <item>
              <term>M√°s de 6 a√±os</term>
              <description>2,5</description>
            </item>
          </list>
          <para>La tasa de depreciaci√≥n aumentar√° hasta el 50 por ciento para el per√≠odo anterior al √∫ltimo per√≠odo y ascender√° hasta el 100 por ciento durante el √∫ltimo per√≠odo.</para>
          <para>Si la vida de los activos se encuentra entre 0 (cero) y 1, 1 y 2, 2 y 3, o 4 y 5, se devolver√° el valor de error #¬°NUM!</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo del activo.</param>
        <param name="Arg2">Fecha de compra del activo.</param>
        <param name="Arg3">Fecha del final del primer per√≠odo.</param>
        <param name="Arg4">Valor remanente al final de la vida del activo.</param>
        <param name="Arg5">Per√≠odo de depreciaci√≥n.</param>
        <param name="Arg6">Tasa de depreciaci√≥n.</param>
        <param name="Arg7">Base anual que se debe utilizar.</param>
        <summary>Devuelve la depreciaci√≥n correspondiente a cada per√≠odo contable. Esta funci√≥n se proporciona para el sistema contable franc√©s.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si un activo se adquiere en medio del per√≠odo contable, la depreciaci√≥n prorrateada se tiene en cuenta. En la siguiente tabla se describe los valores que se usan para <paramref name="Arg7" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>360 d√≠as (m√©todo NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Real</description>
            </item>
            <item>
              <term>3</term>
              <description>A√±o de 365 d√≠as</description>
            </item>
            <item>
              <term>4</term>
              <description>A√±o de 360 d√≠as (m√©todo europeo)</description>
            </item>
          </list>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 a 30 condiciones que desea comprobar y que pueden ser <b>true</b> o <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve <b>true</b> si todos los argumentos son <b>true</b>; Devuelve <b>false</b> si uno o m√°s argumentos sean <b>false</b>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben evaluarse como valores l√≥gicos, como <b>true</b> o <b>false</b>, o los argumentos deben ser matrices o referencias que contengan valores l√≥gicos. </para>
          <para>Si un argumento de matriz o referencia contiene texto o celdas vac√≠as, esos valores se omiten.</para>
          <para>Si el rango especificado no contiene ning√∫n valor l√≥gico, este m√©todo devuelve un valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se usa sin un calificador de objeto, esta propiedad devuelve una <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object que representa la aplicaci√≥n Microsoft Excel. Cuando se utiliza con un calificador de objeto, esta propiedad devuelve una <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object que representa el creador del objeto especificado. Puede utilizar esta propiedad con un objeto de automatizaci√≥n OLE para devolver la aplicaci√≥n de dicho objeto. Solo lectura.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero romano que desea convertir.</param>
        <summary>Convierte un n√∫mero romano en un n√∫mero ar√°bigo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto o referencia a una celda que contiene el texto que desea cambiar. Si el texto no contiene ninguna letra de dos bytes, el texto no se cambia.</param>
        <summary>Doble byte juego de idiomas (DBCS), los cambios de ancho completo (de doble byte) caracteres a caracteres de ancho medio (de un byte).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Seno del √°ngulo que desea obtener y debe estar comprendido entre -1 y 1.</param>
        <summary>Devuelve el arcoseno, o seno inverso, de un n√∫mero. El arcoseno es el √°ngulo cuyo seno es <paramref name="Arg1" />. El √°ngulo devuelto se expresa en radianes en el intervalo-pi/2 a pi/2.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Para expresar el arcoseno en grados, multiplique el resultado por 180/PI () o utilice el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> (m√©todo).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real.</param>
        <summary>Devuelve el seno hiperb√≥lico inverso de un n√∫mero. El seno hiperb√≥lico inverso es el valor cuyo seno hiperb√≥lico es <paramref name="Arg1" />, por lo que es igual Asinh(Sinh(number)) <paramref name="Arg1" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coordenada X del punto.</param>
        <param name="Arg2">Coordenada Y del punto.</param>
        <summary>Devuelve el arco tangente, o la tangente inversa, de las coordenadas x e y especificadas. El arco tangente es el √°ngulo existente entre el eje x respecto a una l√≠nea que contiene el origen de coordenadas (0,0) y un punto que tiene las coordenadas (x_n√∫m, y_n√∫m). El √°ngulo se expresa en radianes y est√° comprendido entre -pi y pi, excluyendo -pi.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Un resultado positivo representa un √°ngulo ascendente a partir del eje x, mientras que un resultado negativo corresponde a un √°ngulo descendente.</para>
          <para>
            <b>ATAN2</b> es igual a <b>Atan(b/a)</b>, excepto en que un puede ser igual a 0 en <b>Atan2</b>. </para>
          <para>Si ambos <paramref name="Arg1" /> y <paramref name="Arg2" /> son 0, Atan2 devuelve un valor de error. </para>
          <para>Para expresar el arco tangente en grados, multiplique el resultado por 180/PI () o utilice el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> (m√©todo).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real comprendido entre 1 y -1.</param>
        <summary>Devuelve la tangente hiperb√≥lica inversa de un n√∫mero. El n√∫mero debe estar comprendido entre -1 y 1 (excluidos -1 y 1).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La tangente hiperb√≥lica inversa es el valor cuya tangente hiperb√≥lica es <b>Arg1</b>, por lo que <b>ATANH</b> es igual a <paramref name="Arg1" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos cuyo promedio de desviaciones absolutas desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el promedio de las desviaciones absolutas de la media para los puntos de datos. AveDev es una medida de la variabilidad de un conjunto de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>AveDev</b> est√° influenciado por la unidad de medida en los datos de entrada. </para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>La ecuaci√≥n de la desviaci√≥n media es la siguiente: 

</para>
          <para>En la figura 1: Ecuaci√≥n para la desviaci√≥n media</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos num√©ricos cuyo promedio desea obtener.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el promedio (media aritm√©tica) de los argumentos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. Si desea incluir valores l√≥gicos y representaciones textuales de n√∫meros en una referencia como parte del c√°lculo, utilice la funci√≥n AVERAGEA. </para>
          <para>El <b>promedio</b> (m√©todo) mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres medidas m√°s comunes de tendencia central son:</para>
          <list type="bullet">
            <item>
              <description>Promedio, que es la media aritm√©tica y se calcula mediante la adici√≥n de un grupo de n√∫meros y dividiendo a continuaci√≥n por el recuento de dichos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es 5. </description>
            </item>
            <item>
              <description>Mediana, que es el n√∫mero central de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores que son mayores que la mediana y mitad de los n√∫meros tiene valores que son menores que la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo de que es el n√∫mero que se repiten con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, el modo de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para>Al calcular el promedio de celdas, tenga en cuenta la diferencia entre las celdas vac√≠as y las que contienen el valor cero, especialmente si ha desactivado la casilla valores cero en la ficha Ver (comando Opciones, men√∫ Herramientas). No se cuentan las celdas vac√≠as, pero los valores cero.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Una o m√°s celdas cuyo promedio se debe calcular.</param>
        <param name="Arg2">Los criterios en el formulario de un n√∫mero, expresi√≥n, referencia de celda o texto que define qu√© celdas se calcula el promedio. Por ejemplo, los criterios pueden expresarse como 32, "32", "&gt;32", "manzanas" o B4.</param>
        <param name="Arg3">El conjunto real de celdas cuyo promedio se debe. Si se omite, se usa el intervalo.</param>
        <summary>Devuelve el promedio (media aritm√©tica) de todas las celdas de un rango que cumplen unos criterios dados.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Se omiten las celdas del rango que contienen <b>true</b> o <b>false</b> . </para>
          <para>Si una celda en el rango o de rango_promedio es una celda vac√≠a, <b>AverageIf</b> la omite. </para>
          <para>Si una celda de criterios est√° vac√≠a, <b>AverageIf</b> la trata como un valor 0. </para>
          <para>Si no hay celdas en el rango cumplen los criterios, <b>AverageIf</b> genera un valor de error. </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para>Rango_promedio no tiene por qu√© tener el mismo tama√±o y forma que el rango. Las celdas cuyo promedio se calcula en realidad se determinan utilizando la celda superior izquierda de rango_promedio como celda inicial y luego se incluyen las celdas que corresponden con el tama√±o y la forma del rango. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>El m√©todo <b>AverageIf</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres medidas m√°s comunes de tendencia central son:</para>
          <list type="bullet">
            <item>
              <description>Promedio, que es la media aritm√©tica y se calcula mediante la adici√≥n de un grupo de n√∫meros y dividiendo a continuaci√≥n por el recuento de dichos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es 5. </description>
            </item>
            <item>
              <description>Mediana, que es el n√∫mero central de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores que son mayores que la mediana y mitad de los n√∫meros tiene valores que son menores que la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo de que es el n√∫mero que se repiten con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, el modo de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uno o m√°s rangos en los que evaluar los criterios asociados.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Devuelve el promedio (media aritm√©tica) de todas las celdas que cumplen varios criterios.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si una celda de rango_promedio est√° vac√≠a, <b>AverageIfs</b> la omite. </para>
          <para>Si una celda de un rango de criterios est√° vac√≠a, <b>AverageIfs</b> la trata como un valor 0. </para>
          <para>Las celdas del rango que contienen <b>true</b> se eval√∫an como 1; las celdas del rango que contienen <b>false</b> se eval√∫an como 0 (cero). </para>
          <para>Las celdas de rango_promedio s√≥lo se utilizan en el c√°lculo del promedio si todos los criterios especificados correspondientes devuelven el valor verdadero en cada una de esas celdas.</para>
          <para>Si las celdas de rango_promedio est√°n vac√≠as o contienen valores de texto que no se pueden traducir a n√∫meros, <b>AverageIfs</b> genera un error. </para>
          <para>Si no hay ninguna celda que cumple todos los criterios, <b>AverageIfs</b> genera un valor de error. </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para>Los rangos de tipo rango_criterios no tienen por qu√© tener el mismo tama√±o y forma que rango_promedio. Las celdas cuyo promedio se calcula en realidad se determinan utilizando la celda superior izquierda de rango_criterios como celda inicial y luego se incluyen las celdas que corresponden con el tama√±o y la forma del rango. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>La funci√≥n <b>AverageIfs</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres medidas m√°s comunes de tendencia central son:</para>
          <list type="bullet">
            <item>
              <description>Promedio, que es la media aritm√©tica y se calcula mediante la adici√≥n de un grupo de n√∫meros y dividiendo a continuaci√≥n por el recuento de dichos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es 5. </description>
            </item>
            <item>
              <description>Mediana, que es el n√∫mero central de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores que son mayores que la mediana y mitad de los n√∫meros tiene valores que son menores que la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo de que es el n√∫mero que se repiten con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, el modo de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que desea convertir en texto, o referencia a una celda que contiene un n√∫mero, o una f√≥rmula que produce un n√∫mero.</param>
        <summary>Convierte un n√∫mero en texto tailand√©s y agrega un sufijo de "Baht".</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero que se desea convertir.</param>
        <param name="Arg2">La base de la base que se va a convertir al n√∫mero en.</param>
        <param name="Arg3">La longitud m√≠nima de la cadena devuelta. Si no se agregan los ceros a la izquierda se omite.</param>
        <summary>Convierte a un n√∫mero en una representaci√≥n de texto con la base determinada (base).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n Bessel. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel modificada, que equivale a la funci√≥n Bessel evaluada para argumentos puramente imaginarios.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el valor de x no es num√©rico, BesselI devuelve el valor de error #¬°VALOR! </para>
          <para>Si el valor de n no es num√©rico, BesselI genera un valor de error. </para>
          <para>Si n &lt; 0, BesselI genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel modificada de la variable x es: 

</para>
          <para>La figura 1: Funci√≥n Bessel de la variable x</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n Bessel. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x no es num√©rico, <b>BesselJ</b> genera un valor de error. </para>
          <para>Si n es un valor no num√©rico, <b>BesselJ</b> devuelve el genera un valor de error. </para>
          <para>Si n &lt; 0, <b>BesselJ</b> genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel de la variable x es: 

 </para>
          <para>La figura 1: Funci√≥n Bessel de la variable x</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>La figura 2: Funci√≥n Gamma</para>
          <para></para>
          <para></para>
          <para>es la funci√≥n Gamma.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel modificada, que equivale a las funciones Bessel evaluadas para argumentos puramente imaginarios.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x no es num√©rico, <b>BesselK</b> genera un valor de error. </para>
          <para>Si n es un valor no num√©rico, <b>BesselK</b> genera un valor de error. </para>
          <para>Si n &lt; 0, <b>BesselK</b> genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel modificada de la variable x es: 

 </para>
          <para>La figura 1: Funci√≥n Bessel de la variable x</para>
          <para></para>
          <para></para>
          <para>, donde Jn e Yn son las funciones Bessel J e Y, respectivamente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel, que tambi√©n se denomina funci√≥n de Weber o funci√≥n Neumann.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x no es num√©rico, <b>BesselY</b> genera un valor de error. </para>
          <para>Si n es un valor no num√©rico, <b>BesselY</b> genera un valor de error. </para>
          <para>Si n &lt; 0, <b>BesselY</b> genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel de la variable x es: 

 </para>
          <para>La figura 1: Funci√≥n Bessel de la variable x</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor, comprendido entre A y B, con el que se debe evaluar la funci√≥n.</param>
        <param name="Arg2">Par√°metro alfa de la distribuci√≥n.</param>
        <param name="Arg3">Par√°metro beta de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el argumento acumulado es <b>true</b>, BETA. NORM devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <param name="Arg5">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg6">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n beta acumulativa.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La distribuci√≥n beta se usa generalmente para estudiar las variaciones, a trav√©s de varias muestras, de un porcentaje que representa alg√∫n fen√≥meno, por ejemplo, el tiempo diario que la gente dedica a mirar televisi√≥n.</para>
          <list type="bullet">
            <item>
              <description>Si uno de los argumentos no es num√©rico, <b>Beta_Dist</b> devuelve #VALUE! valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>Beta_Dist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si x &lt; A, x &gt; B o A = B, <b>Beta_Dist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si omite valores para A y B (l√≠mite superior e inferior), <b>Beta_Dist</b> usa la distribuci√≥n beta acumulativa est√°ndar, de manera que A = 0 y B = 1.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n beta.</param>
        <param name="Arg2">Par√°metro alfa de la distribuci√≥n.</param>
        <param name="Arg3">El par√°metro Beta de la distribuci√≥n.</param>
        <param name="Arg4">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg5">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la inversa de la funci√≥n de distribuci√≥n acumulativa para una distribuci√≥n beta determinada. Es decir, si probabilidad = Beta_Dist(x,...), entonces Beta_Inv(probabilidad,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La distribuci√≥n beta puede emplearse en la planeaci√≥n de proyectos para crear modelos con fechas de finalizaci√≥n probables, de acuerdo con un plazo de finalizaci√≥n y variabilidad esperados.</para>
          <list type="bullet">
            <item>
              <description>Si uno de los argumentos no es num√©rico, <b>Beta_Inv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>Beta_Inv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si probabilidad ‚â§ 0 o probabilidad &gt; 1, <b>Beta_Inv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si omite valores para A y B (l√≠mite superior e inferior), <b>Beta_Inv</b> usa la distribuci√≥n beta acumulativa est√°ndar, de manera que A = 0 y B = 1.</description>
            </item>
          </list>
          <para>Dado un valor de probabilidad, <b>Beta_Inv</b> busca ese valor x tal que Beta_Dist (x, alfa, beta, TRUE, A, B) = probabilidad. Por lo tanto, la precisi√≥n de <b>Beta_Inv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />. <b>Beta_Inv</b> usa una t√©cnica de b√∫squeda iterativa.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor, comprendido entre A y B, con el que se debe evaluar la funci√≥n.</param>
        <param name="Arg2">Par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Par√°metro de la distribuci√≥n.</param>
        <param name="Arg4">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg5">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n beta acumulativa.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> (m√©todo).</para>
          <para>La distribuci√≥n beta se suele utilizar frecuentemente para estudiar la variaci√≥n en el porcentaje entre varias muestras, como el tiempo del d√≠a que la poblaci√≥n dedica a ver la televisi√≥n.</para>
          <list type="bullet">
            <item>
              <description>Si uno de los argumentos no es num√©rico, <b>BetaDist</b> devuelve #VALUE! valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>BetaDist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si x &lt; A, x &gt; B o A = B, <b>BetaDist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si omite valores para A y B, <b>BetaDist</b> utiliza la distribuci√≥n beta acumulativa est√°ndar, de manera que A = 0 y B = 1.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n beta.</param>
        <param name="Arg2">Par√°metro alfa de la distribuci√≥n.</param>
        <param name="Arg3">El par√°metro Beta de la distribuci√≥n.</param>
        <param name="Arg4">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg5">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la inversa de la funci√≥n de distribuci√≥n acumulativa para una distribuci√≥n beta determinada. Es decir, si probabilidad = BetaDist(x,...), entonces BetaInv(probabilidad,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> (m√©todo).</para>
          <para>La distribuci√≥n beta puede utilizarse en el dise√±o de proyectos para obtener un modelo de los tiempos de finalizaci√≥n probables dados unos par√°metros esperados de tiempo de finalizaci√≥n y de variabilidad.</para>
          <list type="bullet">
            <item>
              <description>Si uno de los argumentos no es num√©rico, <b>BetaInv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>BetaInv</b> genera un valor de error. </description>
            </item>
            <item>
              <description>Si probabilidad ‚â§ 0 o probabilidad &gt; 1, <b>BetaInv</b> genera un valor de error. </description>
            </item>
            <item>
              <description>Si omite valores para A y B, <b>BetaInv</b> utiliza la distribuci√≥n beta acumulativa est√°ndar, de manera que A = 0 y B = 1.</description>
            </item>
          </list>
          <para>Dado un valor de probabilidad, <b>BetaInv</b> busca ese valor x tal que BetaDist (x, alfa, beta, A, B) = probabilidad. Por lo tanto, la precisi√≥n de <b>BetaInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />. <b>BetaInv</b> utiliza una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 100 iteraciones, la funci√≥n genera un valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero binario que desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (10 bits). El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <summary>Convierte un n√∫mero binario en decimal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero no es un n√∫mero binario v√°lido o si contiene m√°s de 10 caracteres (10 bits), Bin2Dec genera un valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero binario que desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (10 bits). El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">El n√∫mero de caracteres que se va a usar. Si se omite, <b>Bin2Hex</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero binario en hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero no es un n√∫mero binario v√°lido o si contiene m√°s de 10 caracteres (10 bits), <b>Bin2Hex</b> genera un error. </para>
          <para>Si el n√∫mero es negativo, <b>Bin2Hex</b> omite lugares y devuelve un n√∫mero hexadecimal de 10 caracteres. </para>
          <para>Si <b>Bin2Hex</b> requiere m√°s caracteres que los especificados, genera un error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Bin2Hex</b> genera un error. </para>
          <para>Si el argumento caracteres es negativo, <b>Bin2Hex</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero binario que desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (10 bits). El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">El n√∫mero de caracteres que se va a usar. Si se omite, <b>Bin2Oct</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero binario en octal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero no es un n√∫mero binario v√°lido o si contiene m√°s de 10 caracteres (10 bits), <b>Bin2Oct</b> genera un error. </para>
          <para>Si el n√∫mero es negativo, <b>Bin2Oct</b> omite lugares y devuelve un n√∫mero octal de 10 caracteres. </para>
          <para>Si <b>Bin2Oct</b> requiere m√°s caracteres que los especificados, genera un error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Bin2Oct</b> genera un error. </para>
          <para>Si el argumento caracteres es negativo, <b>Bin2Oct</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_√©xitos: el n√∫mero de √©xitos en los ensayos.</param>
        <param name="Arg2">Ensayos: n√∫mero de ensayos independientes.</param>
        <param name="Arg3">Probabilidad_s: la probabilidad de √©xito en cada ensayo.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el argumento acumulado es <b>True</b>, entonces el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo devuelve la funci√≥n de distribuci√≥n acumulativa, que es la probabilidad de que hay en la mayor√≠a de n√∫mero de √©xitos; Si es <b>False</b>, devuelve la funci√≥n de probabilidad bruta, que es la probabilidad de que haya n√∫m_√©xitos √©xitos.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria discreta siguiendo una distribuci√≥n binomial.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Utilice el m√©todo <b>Binom_Dist</b> en problemas con un n√∫mero fijo de pruebas o ensayos, cuando los resultados de cualquier versi√≥n de evaluaci√≥n son s√≥lo √©xito o fracaso, cuando los ensayos son independientes y cuando la probabilidad de √©xito es constante durante todo el experimento. Por ejemplo, el m√©todo <b>Binom_Dist</b> puede calcular la probabilidad de que dos de los pr√≥ximos tres beb√©s nacidos masculino. </para>
          <list type="bullet">
            <item>
              <description>Los argumentos de n√∫mero de √©xitos y de ensayos se truncan a valores enteros.</description>
            </item>
            <item>
              <description>Si n√∫m_√©xitos, ensayos o prob_√©xito no es num√©rico, el m√©todo <b>Binom_Dist</b> genera un error. </description>
            </item>
            <item>
              <description>Si n√∫m_√©xitos &lt; 0 o n√∫m_√©xitos &gt; ensayos, el m√©todo <b>Binom_Dist</b> genera un error. </description>
            </item>
            <item>
              <description>Si prob_√©xito &lt; 0 o prob_√©xito &gt; 1, el m√©todo <b>Binom_Dist</b> genera un error. La funci√≥n de masa de probabilidad es: 

 </description>
            </item>
          </list>
          <para>Donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>es COMBIN(n,x).</para>
          <para>La distribuci√≥n binomial acumulativa es:</para>
          <para>La figura 3: Distribuci√≥n binomial acumulada</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero de ensayos independientes.</param>
        <param name="Arg2">La probabilidad de √©xito en cada ensayo.</param>
        <param name="Arg3">El n√∫mero de √©xitos en los ensayos.</param>
        <param name="Arg4">Si se proporciona, esta funci√≥n devuelve la probabilidad de que el n√∫mero de ensayos correctos debe encontrarse entre Arg3 y Arg4.</param>
        <summary>Devuelve la probabilidad de un resultado de prueba con una distribuci√≥n binomial.</summary>
        <returns>Doble</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ensayos: n√∫mero de ensayos de Bernoulli.</param>
        <param name="Arg2">Probabilidad_s: la probabilidad de √©xito en cada ensayo.</param>
        <param name="Arg3">Alfa: el valor de criterio.</param>
        <summary>Devuelve la funci√≥n inversa de la probabilidad de una variable aleatoria discreta siguiendo una distribuci√≥n binomial.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si ensayos, prob_√©xito o alfa es un valor no num√©rico, el m√©todo <b>Binom_Inv</b> genera un error. </para>
          <para>Si Ensayos no es un n√∫mero entero, se trunca.</para>
          <para>Si ensayos &lt; 0, el m√©todo <b>Binom_Inv</b> genera un error. </para>
          <para>Si prob_√©xito &lt; 0 o prob_√©xito &gt; 1, el m√©todo <b>Binom_Inv</b> genera un error. </para>
          <para>Si alfa &lt; 0 o alfa &gt; 1, el m√©todo <b>Binom_Inv</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero de √©xitos en los ensayos.</param>
        <param name="Arg2">El n√∫mero de ensayos independientes.</param>
        <param name="Arg3">La probabilidad de √©xito en cada ensayo.</param>
        <param name="Arg4">Un valor l√≥gico que determina la forma de la funci√≥n. Si el argumento acumulado es <b>true</b>, <b>BinomDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa, que es la probabilidad de que hay como m√°ximo n√∫mero de √©xitos; Si es <b>false</b>, devuelve la funci√≥n de probabilidad bruta, que es la probabilidad de que haya n√∫m_√©xitos √©xitos.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria discreta siguiendo una distribuci√≥n binomial.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Use <b>BinomDist</b> en problemas con un n√∫mero fijo de pruebas o ensayos, cuando los resultados de cualquier versi√≥n de evaluaci√≥n son s√≥lo √©xito o fracaso, cuando los ensayos son independientes y cuando la probabilidad de √©xito es constante durante todo el experimento. Por ejemplo, <b>BinomDist</b> puede calcular la probabilidad de que dos de los pr√≥ximos tres beb√©s nacidos masculino. </para>
          <para>Los argumentos de n√∫mero de √©xitos y de ensayos se truncan a valores enteros.</para>
          <para>Si n√∫m_√©xitos, ensayos o prob_√©xito no es num√©rico, <b>BinomDist</b> genera un error. </para>
          <para>Si n√∫m_√©xitos &lt; 0 o n√∫m_√©xitos &gt; ensayos, <b>BinomDist</b> genera un error. </para>
          <para>Si prob_√©xito &lt; 0 o prob_√©xito &gt; 1, <b>BinomDist</b> genera un error. </para>
          <para>La funci√≥n de masa de probabilidad es: 

 </para>
          <para>En la figura 1: Funci√≥n de masa de probabilidad</para>
          <para></para>
          <para></para>
          <para>Donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>es COMBIN(n,x).</para>
          <para>La distribuci√≥n binomial acumulativa es:</para>
          <para>La figura 3: Distribuci√≥n binomial acumulada</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <summary>Devuelve un 'bit a bit y' de dos n√∫meros.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">El n√∫mero de bits que se va a Arg1 MAY√öS izquierda.</param>
        <summary>Devuelve un n√∫mero de valor que se desplazan por shift_amount bits a la izquierda.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <summary>Devuelve un OR bit a bit de 2 n√∫meros.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">El n√∫mero de bits que se va a desplazar hacia la derecha de Arg1 por.</param>
        <summary>Devuelve un n√∫mero de valor que se desplazan a la derecha por shift_amount bits.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">La representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <summary>Devuelve un bit a bit 'exclusivo o' de dos n√∫meros.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Redondea un n√∫mero hasta el pr√≥ximo m√∫ltiplo significativo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> (m√©todo).</para>
          <para>Por ejemplo, si desea evitar usar c√©ntimos en los precios y el precio del producto es de 4,42 $, use la f√≥rmula MULTIPLO.SUPERIOR(4,42;0,05) para redondear los precios hacia arriba hasta el m√∫ltiplo de cinco c√©ntimos m√°s cercano.</para>
          <para>Si alguno de los argumentos no es num√©rico, <b>Ceiling</b> genera un error.</para>
          <para>Independientemente del signo del n√∫mero, los valores se redondean hacia arriba cuando se ajustan a partir de cero. Si el n√∫mero es un m√∫ltiplo significativo exacto, no se realiza ning√∫n redondeo.</para>
          <para>Si el n√∫mero y la cifra significativa tienen distinto signo, <b>Ceiling</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El valor que desea redondear.</param>
        <param name="Arg2">El m√∫ltiplo al que desea redondear.</param>
        <param name="Arg3">Cuando determinado y distinto de cero, esta funci√≥n redondear√° alej√°ndose del cero.</param>
        <summary>Redondea un n√∫mero hacia arriba, al entero m√°s pr√≥ximo o al m√∫ltiplo significativo m√°s cercano.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Devuelve el n√∫mero especificado redondeado al m√∫ltiplo significativo m√°s pr√≥ximo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Por ejemplo, si desea evitar usar c√©ntimos en los precios y el precio del producto es de 4,42 $, use la f√≥rmula MULTIPLO.SUPERIOR(4,42;0,05) para redondear los precios hacia arriba hasta el m√∫ltiplo de cinco c√©ntimos m√°s cercano.</para>
          <para>Seg√∫n el signo del n√∫mero y los argumentos de cifra significativa, el m√©todo <b>Ceiling_Precise</b> redondea acerc√°ndose al cero o alej√°ndose de √©ste.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
          </list>
          <para>Si alguno de los argumentos no es num√©rico, <b>Ceiling_Precise</b> genera un error.</para>
          <para>Si n√∫mero es un m√∫ltiplo exacto del argumento cifra_significativa, no se redondea.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor al que desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria continua siguiendo una distribuci√≥n chi cuadrado de una sola cola.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> m√©todos.</para>
          <para>La distribuci√≥n de œá2 est√° asociada con una prueba de œá2. Use la prueba de œá2 para comparar observados y los valores esperados.</para>
          <para>Por ejemplo, un experimento gen√©tico podr√≠a estar basado en la hip√≥tesis de que la pr√≥xima generaci√≥n de plantas presentar√° un conjunto determinado de colores. Al comparar los resultados observados con los resultados esperados, puede decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>ChiDist</b> genera un error. </para>
          <para>Si x es negativa, <b>ChiDist</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si grados_de_libertad &lt; 1 o grados_de_libertad &gt; 10 ^ 10, <b>ChiDist</b> genera un error. </para>
          <para>
            <b>ChiDist</b> se calcula como ChiDist = P (X&gt;x), donde X es una variable aleatoria de œá2.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n chi cuadrado.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve para una probabilidad dada, de una sola cola, el valor de la variable aleatoria siguiendo una distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> m√©todos.</para>
          <para>Si probabilidad = ChiDist(x,...), entonces ChiInv(probabilidad,...) = x. Utilice esta funci√≥n para comparar los resultados observados con los resultados esperados, a fin de decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>ChiInv</b> genera un error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>ChiInv</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si grados_de_libertad &lt; 1 o grados_de_libertad ‚â• 10 ^ 10, <b>ChiInv</b> genera un error.</para>
          <para>Dado un valor de probabilidad, <b>ChiInv</b> busca ese valor x tal que ChiDist (x, grados_de_libertad) = probabilidad. Por lo tanto, la precisi√≥n de <b>ChiInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />. <b>ChiInv</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 64 iteraciones, la funci√≥n genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero de grados de libertad.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, CHISQ_DIST devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si cualquiera de los argumentos no es num√©rico, CHISQ_DIST devuelve el valor de error #¬°VALOR! </para>
          <para>Si x es negativo, CHISQ_DIST devuelve el valor de error #¬°NUM! </para>
          <para>Si el argumento grados_de_libertad no es un entero, se trunca. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor al que desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve la probabilidad de cola derecha de la distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La distribuci√≥n de œá2 est√° asociada con una prueba de œá2. Use la prueba de œá2 para comparar observados y los valores esperados.</para>
          <para>Por ejemplo, un experimento gen√©tico podr√≠a estar basado en la hip√≥tesis de que la pr√≥xima generaci√≥n de plantas presentar√° un conjunto determinado de colores. Al comparar los resultados observados con los resultados esperados, puede decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>ChiSq_Dist_RT</b> genera un error. </para>
          <para>Si x es negativa, <b>ChiSq_Dist_RT</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si grados_de_libertad &lt; 1 o grados_de_libertad &gt; 10 ^ 10, <b>ChiSq_Dist_RT</b> genera un error. <b>ChiSq_Dist_RT</b> se calcula como ChiSq_Dist_RT = P (X&gt;x), donde X es una variable aleatoria de œá2.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n chi cuadrada.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero de grados de libertad.</param>
        <summary>Devuelve el inverso de la probabilidad de cola izquierda de la distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>ChiSq_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>ChiSq_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento grados_de_libertad no es un entero, se trunca.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n chi cuadrado.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve el inverso de una probabilidad dada, de una cola derecha, en una distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si probabilidad = ChiSq_Dist_RT(x,...) then ChiSq_Inv_RT(probability,...) = x. Use esta funci√≥n para comparar los resultados observados con los esperados con el fin de decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>ChiSq_Inv_RT</b> genera un error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>ChiSq_Inv_RT</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si grados_de_libertad &lt; 1 o grados_de_libertad ‚â• 10 ^ 10, <b>ChiSq_Inv_RT</b> genera un error.</para>
          <para>Dado un valor de probabilidad, <b>ChiSq_Inv_RT</b> busca ese valor x tal que ChiSq_Dist_RT (x, grados_de_libertad) = probabilidad. Por lo tanto, la precisi√≥n de <b>ChiSq_Inv_RT</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />. <b>ChiSq_Inv_RT</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 64 iteraciones, la funci√≥n genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de datos que contiene las observaciones que se contrastar√°n con los valores esperados.</param>
        <param name="Arg2">Rango de datos que contiene la relaci√≥n entre el producto de los totales de filas y columnas y el total general.</param>
        <summary>Devuelve la prueba de independencia.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>ChiSq_Test</b> devuelve el valor de la distribuci√≥n chi cuadrado (œá2) para la estad√≠stica y los grados de libertad apropiados. Puede usar las pruebas de œá2 para determinar si experimento se verifican los resultados de un experimento.</para>
          <para>Si rango_real y Rango_esperado tienen un n√∫mero diferente de puntos de datos, <b>ChiSq_Test</b> devuelve el valor de error # n/a. </para>
          <para>La prueba œá2 primero calcula una estad√≠stica de œá2 con la f√≥rmula: </para>
          <para>La figura 1: F√≥rmula para x al cuadrado prueba</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <list type="bullet">
            <item>
              <description>Aij = frecuencia real en la i-√©sima fila, j-√©sima columna</description>
            </item>
            <item>
              <description>Eij = frecuencia esperada en la i-√©sima fila, j-√©sima columna</description>
            </item>
            <item>
              <description>r = n√∫mero de filas</description>
            </item>
            <item>
              <description>c = n√∫mero de columnas</description>
            </item>
          </list>
          <para>Un valor bajo de œá2 es un indicador de independencia. Como puede verse en la f√≥rmula de œá2 siempre es positivo o 0 y es 0 s√≥lo si Aij = Eij para todo i, j.</para>
          <para>
            <b>ChiSq_Test</b> devuelve la probabilidad de que un valor de la estad√≠stica de œá2 al menos tan alto como el valor calculado mediante la f√≥rmula anterior podr√≠a haber producido al azar en el supuesto de independencia. Calcular esta probabilidad, <b>ChiSq_Test</b> utiliza la distribuci√≥n de œá2 con un n√∫mero adecuado de grados de libertad, df. Si r &gt; 1 y c &gt; 1, entonces df = (r - 1)(c-1). Si r = 1 y c &gt; 1, entonces df = c - 1 o si r &gt; 1 y c = 1, entonces df = r - 1. r = c = 1 no est√° permitido y genera un error.</para>
          <para>Es m√°s apropiado utilizar <b>chisq_test</b> cuando los valores de Eij no son demasiado peque√±os. Algunos estad√≠sticos sugieren que cada Eij deber√≠a ser mayor o igual que 5.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de datos que contiene las observaciones que se contrastar√°n con los valores esperados.</param>
        <param name="Arg2">Funci√≥n de ImportantThis se ha reemplazado por una o m√°s funciones nuevas que puede proporcionar precisi√≥n mejorada y cuyos nombres que refleje mejor su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> (m√©todo). Rango de datos que contiene la relaci√≥n entre el producto de los totales de filas y columnas y el total general.</param>
        <summary>Devuelve la prueba de independencia.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>ChiTest</b> devuelve el valor de la distribuci√≥n chi cuadrado (œá2) para la estad√≠stica y los grados de libertad apropiados. Puede usar las pruebas de œá2 para determinar si experimento se verifican los resultados de un experimento.</para>
          <para>Si rango_real y Rango_esperado tienen un n√∫mero diferente de puntos de datos, <b>ChiTest</b> devuelve el valor de error # n/a. </para>
          <para>La prueba œá2 primero calcula una estad√≠stica de œá2 con la f√≥rmula: </para>
          <para>La figura 1: F√≥rmula para x al cuadrado prueba</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <list type="bullet">
            <item>
              <description>Aij = frecuencia real en la i-√©sima fila, j-√©sima columna</description>
            </item>
            <item>
              <description>Eij = frecuencia esperada en la i-√©sima fila, j-√©sima columna</description>
            </item>
            <item>
              <description>r = n√∫mero de filas</description>
            </item>
            <item>
              <description>c = n√∫mero de columnas</description>
            </item>
          </list>
          <para></para>
          <para>Un valor bajo de œá2 es un indicador de independencia. Como puede verse en la f√≥rmula de œá2 siempre es positivo o 0 y es 0 s√≥lo si Aij = Eij para todo i, j.</para>
          <para>
            <b>ChiTest</b> devuelve la probabilidad de que un valor de la estad√≠stica de œá2 al menos tan alto como el valor calculado mediante la f√≥rmula anterior podr√≠a haber producido al azar en el supuesto de independencia. Calcular esta probabilidad, <b>ChiTest</b> utiliza la distribuci√≥n de œá2 con un n√∫mero adecuado de grados de libertad, df. Si r &gt; 1 y c &gt; 1, entonces df = (r - 1)(c-1). Si r = 1 y c &gt; 1, entonces df = c - 1 o si r &gt; 1 y c = 1, entonces df = r - 1. r = c = 1 no est√° permitido y genera un error.</para>
          <para>Es m√°s apropiado utilizar <b>ChiTest</b> cuando los valores de Eij no son demasiado peque√±os. Algunos estad√≠sticos sugieren que cada Eij deber√≠a ser mayor o igual que 5.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Especifica el argumento de valor que se selecciona. Arg1 debe ser un n√∫mero comprendido entre 1 y 29, o una f√≥rmula o referencia a una celda que contiene un n√∫mero comprendido entre 1 y 29.</param>
        <param name="Arg2">Entre 1 y 29 argumentos de valor entre los que Choose selecciona un valor o una acci√≥n que realizar bas√°ndose en el valor de Arg1. Los argumentos pueden ser n√∫meros, referencias de celda, nombres definidos, f√≥rmulas, funciones o texto.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Usa <paramref name="Arg1" /> como √≠ndice para devolver un valor de la lista de argumentos de valores.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si <paramref name="Arg1" /> es 1, <b>Elegir</b> devuelve valor1; Si es 2, <b>Choose</b> devuelve valor2; y as√≠ sucesivamente. </para>
          <para>Si <paramref name="Arg1" /> es menor que 1 o mayor que el n√∫mero del √∫ltimo valor de la lista, <b>Choose</b> genera un error. </para>
          <para>Si <paramref name="Arg1" /> es una fracci√≥n, se trunca al menor n√∫mero entero antes de ser utilizado. </para>
          <para>Si <paramref name="Arg1" /> es una matriz, cada valor se evaluar√° cuando se eval√∫e <b>Elegir</b> . </para>
          <para>Los argumentos de valor para <b>Elegir</b> pueden ser referencias de rango, as√≠ como valores individuales. Por ejemplo, la f√≥rmula:</para>
          <para>= SUM (elegir (2, a1: a10, B1: B10, C1: C10))</para>
          <para>da como resultado:</para>
          <para>=SUM(B1:B10)</para>
          <para>a continuaci√≥n, que devuelve un valor basado en los valores del rango B1: B10.</para>
          <para>La funci√≥n <b>Choose</b> se eval√∫a primero, devolviendo la referencia B1: B10. La funci√≥n suma, a continuaci√≥n, se eval√∫a utilizando B1: B10, el resultado de la funci√≥n <b>Choose</b> , como su argumento.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier informaci√≥n de una hoja de c√°lculo de la que se desea eliminar los caracteres no imprimibles.</param>
        <summary>Quita del texto todos los caracteres no imprimibles.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Use <b>Clean</b> en texto importado de otras aplicaciones que contiene caracteres que no se impriman con el sistema operativo. Por ejemplo, puede utilizar <b>Clean</b> para quitar cierto c√≥digo de bajo nivel de equipo que es con frecuencia al principio y al final de los archivos de datos y no se puede imprimir.</para>
          <para>
            <b>Importante</b>: la funci√≥n <b>Limpiar</b> se dise√±√≥ para quitar los primeros 32 caracteres no imprimibles en el c√≥digo ASCII de 7 bits (valores de 0 a 31) del texto. En el juego de caracteres Unicode, hay caracteres no imprimibles adicionales (valores 127, 129, 141, 143, 144 y 157). Por s√≠ mismo, la funci√≥n <b>Limpiar</b> no quita estos caracteres no imprimibles adicionales.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de elementos.</param>
        <param name="Arg2">N√∫mero de elementos existentes en cada combinaci√≥n.</param>
        <summary>Devuelve el n√∫mero de combinaciones para un n√∫mero determinado de elementos. Use <b>Combin</b> para determinar el n√∫mero total de grupos para un n√∫mero determinado de elementos posibles.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos num√©ricos se truncan y se convierten en n√∫meros enteros.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>Combin</b> genera un error. </para>
          <para>Si el n√∫mero &lt; k 0, &lt; 0 o n√∫mero &lt; k, <b>Combin</b> genera un error. </para>
          <para>Una combinaci√≥n es cualquier conjunto o subconjunto de elementos, independientemente de su orden interno. Las combinaciones son distintas de las permutaciones, en las que el orden interno es importante.</para>
          <para>El n√∫mero de combinaciones es como sigue, donde n = n√∫mero de elementos y k = n√∫mero de elementos de cada combinaci√≥n: 

 </para>
          <para>En la figura 1: N√∫mero de combinaciones</para>
          <para></para>
          <para></para>
          <para>Donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero total de elementos.</param>
        <param name="Arg2">N√∫mero de elementos existentes en cada combinaci√≥n.</param>
        <summary>Devuelve el n√∫mero de combinaciones de repeticiones para un n√∫mero determinado de elementos.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coeficiente real del n√∫mero complejo.</param>
        <param name="Arg2">Coeficiente imaginario del n√∫mero complejo.</param>
        <param name="Arg3">Sufijo del componente imaginario del n√∫mero complejo. Si se omite, se supone que sufijo tiene el valor "i".</param>
        <summary>Convierte coeficientes reales e imaginarios en n√∫meros complejos de la forma x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Todas las funciones de n√∫meros complejos aceptan "i" y "j" como sufijo, pero no "I" ni "J". El uso de may√∫sculas genera un error. Todas las funciones que acepten dos o m√°s n√∫meros complejos requieren que todos los sufijos se correspondan.</para>
          <para>Si <paramref name="Arg1" /> es un valor no num√©rico, <b>complejo</b> genera un error. </para>
          <para>Si <paramref name="Arg2" /> es un valor no num√©rico, <b>complejo</b> genera un error. </para>
          <para>Si <paramref name="Arg3" /> no es ni "i" ni "j", <b>complejo</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nivel de significaci√≥n utilizado para calcular el nivel de confianza. El nivel de confianza es igual a 100*(1 - alfa)%, es decir, un alfa de 0,05 indica un nivel de confianza de 95%.</param>
        <param name="Arg2">Desviaci√≥n est√°ndar de la poblaci√≥n para el rango de datos, que se presupone que es conocida.</param>
        <param name="Arg3">Tama√±o de la muestra.</param>
        <summary>Devuelve un valor que se puede utilizar para construir un intervalo de confianza para la media de una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> m√©todos.</para>
          <para>El intervalo de confianza es un rango de valores. La media de la muestra, x, est√° en el centro de este intervalo y el intervalo es x ¬± <b>con nivel de confianza</b>. Por ejemplo, si x es la media de la muestra de tiempos de entrega de productos encargados por correo electr√≥nico, x ¬± <b>con nivel de confianza</b> es un intervalo de medias de poblaci√≥n. Para cualquier media de poblaci√≥n, Œº0, en este intervalo, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que de x es mayor que alfa; para cualquier media de poblaci√≥n, Œº0, no en este intervalo, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que de x es menor que alfa. En otras palabras, suponga que utilizamos x, desv_est√°ndar y tama√±o para crear una prueba de dos colas en el nivel de importancia alfa de la hip√≥tesis consistente en que la media de la poblaci√≥n es Œº0. Entonces, no rechazaremos la hip√≥tesis si Œº0 est√° en el intervalo de confianza y rechazaremos la hip√≥tesis si Œº0 no est√° en el intervalo de confianza. El intervalo de confianza no nos permite inferir que haya una probabilidad 1 ‚Äì alfa que nuestro paquete siguiente tendr√° un tiempo de entrega que se encuentra en el intervalo de confianza. </para>
          <para>Si uno de los argumentos no es num√©rico, <b>Confidence</b> genera un error. </para>
          <para>Si alfa ‚â§ 0 o alfa ‚â• 1, <b>Confidence</b> genera un error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>Confidence</b> genera un error. </para>
          <para>Si el argumento de tama√±o no es un entero, se trunca.</para>
          <para>Si el tama√±o &lt; 1, <b>Confidence</b> genera un error. </para>
          <para>Si suponemos que el argumento alfa es igual a 0,05, ser√° necesario calcular el √°rea situada debajo de la curva normal est√°ndar que es igual a (1 - alfa) o 95%. Este valor es ¬± 1,96. Por lo tanto, el intervalo de confianza es: 

</para>
          <para>La figura 1: intervalo de confianza</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nivel de significaci√≥n utilizado para calcular el nivel de confianza. El nivel de confianza es igual a 100*(1 - alfa)%, es decir, un alfa de 0,05 indica un nivel de confianza de 95%.</param>
        <param name="Arg2">Desviaci√≥n est√°ndar de la poblaci√≥n para el rango de datos, que se presupone que es conocida.</param>
        <param name="Arg3">Tama√±o de la muestra.</param>
        <summary>Devuelve un valor que se puede utilizar para construir un intervalo de confianza para la media de una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El intervalo de confianza es un rango de valores. La media de la muestra, x, est√° en el centro de este intervalo y el intervalo es x ¬± <b>Confidence_Norm</b>. Por ejemplo, si x es la media de la muestra de tiempos de entrega de productos encargados por correo electr√≥nico, x ¬± <b>Confidence_Norm</b> es un intervalo de medias de poblaci√≥n. Para cualquier media de poblaci√≥n, Œº0, en este intervalo, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que de x es mayor que alfa; para cualquier media de poblaci√≥n, Œº0, no en este intervalo, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que de x es menor que alfa. En otras palabras, se supone los argumentos x, desv_est√°ndar y tama√±o se usa para crear una prueba de dos colas en el nivel de importancia alfa de la hip√≥tesis consistente en que la media de la poblaci√≥n es Œº0. Entonces, no rechazaremos la hip√≥tesis si Œº0 est√° en el intervalo de confianza y rechazaremos la hip√≥tesis si Œº0 no est√° en el intervalo de confianza. El intervalo de confianza no permite inferencia que hay probabilidad 1 ‚Äì alfa de que el siguiente paquete tendr√° un tiempo de entrega que se encuentra en el intervalo de confianza.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si alfa ‚â§ 0 o alfa ‚â• 1, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si el argumento de tama√±o no es un entero, se trunca.</para>
          <para>Si el tama√±o &lt; 1, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si se supone que el argumento alfa es igual a 0,05, ser√° necesario calcular el √°rea situada debajo de la curva normal est√°ndar que es igual a (1 - alfa) o 95%. Este valor es ¬± 1,96. Por lo tanto, el intervalo de confianza es: 

</para>
          <para>La figura 1: intervalo de confianza</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alfa: el nivel de importancia utilizado para calcular el nivel de confianza. El nivel de confianza es igual a 100 *(1-alpha) % o, en otras palabras, un valor alfa de 0,05 indica un nivel de confianza del 95 por ciento.</param>
        <param name="Arg2">Desv_est√°ndar: desviaci√≥n est√°ndar de poblaci√≥n para el rango de datos y se supone que es conocida.</param>
        <param name="Arg3">Tama√±o: tama√±o de la muestra.</param>
        <summary>Devuelve el intervalo de confianza para la media de una poblaci√≥n con distribuci√≥n t de Student.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>Confidence_T</b> devuelve #VALUE! valor de error. </para>
          <para>Si alfa ‚â§ 0 o alfa ‚â• 1, <b>Confidence_T</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>Confidence_T</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de tama√±o no es un entero, se trunca.</para>
          <para>Si el tama√±o es igual a 1, <b>Confidence_T</b> devuelve # ¬°DIV/0! valor de error. </para>
          <para>Si el tama√±o es igual a 1, <b>Confidence_T</b> devuelve # ¬°DIV/0! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor de las unidades que se desea convertir.</param>
        <param name="Arg2">Unidades del argumento de n√∫mero.</param>
        <param name="Arg3">Las unidades para el resultado. <b>Convertir</b> acepta los siguientes valores de texto (entre comillas) para la unidad de origen y la unidad de destino que se enumeran en la secci√≥n comentarios que aparece a continuaci√≥n.</param>
        <summary>Convierte a un n√∫mero de un sistema de medida a otro. Por ejemplo, <b>convertir</b> puede convertir una tabla de distancias en millas a una tabla de distancias en kil√≥metros.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>Gramo</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Slug</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Libra masa (avoirdupois)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (unidad de masa at√≥mica)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>Onza (sistema avdp)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Metro</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Milla</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Milla n√°utica</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Pulgada</term>
              <description>"in"</description>
            </item>
            <item>
              <term>Pie</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>Yarda</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Angstrom</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Pica (1/72 pda)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>A√±o</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>D√≠a</term>
              <description>"day"</description>
            </item>
            <item>
              <term>Hora</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Minuto</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Segundo</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa" (o "p")</description>
            </item>
            <item>
              <term>Atm√≥sfera</term>
              <description>"atm" (o "at")</description>
            </item>
            <item>
              <term>mm de mercurio</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Newton</term>
              <description>"N"</description>
            </item>
            <item>
              <term>Dina</term>
              <description>"dyn" (or "dy")</description>
            </item>
            <item>
              <term>Libra fuerza</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Julio</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Calor√≠a termodin√°mica</term>
              <description>"c"</description>
            </item>
            <item>
              <term>Calor√≠a (4,186795 J)</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>Electronvoltio</term>
              <description>"eV" (o "ev")</description>
            </item>
            <item>
              <term>Caballo hora</term>
              <description>"HPh" (o "hh")</description>
            </item>
            <item>
              <term>Vatio-hora</term>
              <description>"Wh" (o "wh")</description>
            </item>
            <item>
              <term>Libra pie</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU (Unidad t√©rmica inglesa)</term>
              <description>"BTU" (o "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Caballo</term>
              <description>"HP" (o "h")</description>
            </item>
            <item>
              <term>Vatio</term>
              <description>"W" (o "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Tesla</term>
              <description>"T"</description>
            </item>
            <item>
              <term>Gauss</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Grado Celsius</term>
              <description>"C" (o "cel")</description>
            </item>
            <item>
              <term>Grado Fahrenheit</term>
              <description>"F" (o "fah")</description>
            </item>
            <item>
              <term>Kelvin</term>
              <description>"K" (o "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Cuchara de t√©</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Cuchara sopera</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Onza l√≠quida</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>Taza</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>Pinta de EE.UU.</term>
              <description>"pt" (o "us_pt")</description>
            </item>
            <item>
              <term>Pinta del Reino Unido</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Cuarto</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>Gal√≥n</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>Litro</term>
              <description>"l" (o "lt")</description>
            </item>
          </list>
          <para>Los siguientes prefijos de unidad abreviada se pueden agregar a cualquier argumento de unidad de origen o unidad de destino.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>deca</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>mili</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Si los tipos de datos de entrada son incorrectos, <b>convertir</b> genera un error. </para>
          <para>Si la unidad no existe, <b>convertir</b> genera un error. </para>
          <para>Si la unidad no admite prefijos de unidad abreviada, <b>convertir</b> genera un error. </para>
          <para>Si las unidades son de grupos diferentes, <b>convertir</b> genera un error. </para>
          <para>Se distingue entre may√∫sculas y min√∫sculas en los nombres de unidades y prefijos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de celdas de valores.</param>
        <param name="Arg2">Segundo rango de celdas de valores.</param>
        <summary>Devuelve el coeficiente de correlaci√≥n de la <paramref name="Arg1" /> y <paramref name="Arg2" /> rangos de celda.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Use el coeficiente de correlaci√≥n para determinar la relaci√≥n entre dos propiedades. Por ejemplo, para examinar la relaci√≥n entre el promedio de la temperatura de una localidad y el uso de aire acondicionado.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si <paramref name="Arg1" /> y <paramref name="Arg2" /> tienen un n√∫mero diferente de puntos de datos, <b>Correl</b> genera un error. </para>
          <para>Si bien <paramref name="Arg1" /> o <paramref name="Arg2" /> est√° vac√≠o, o si s (la desviaci√≥n est√°ndar) de sus valores es igual a cero, <b>Correl</b> genera un error. </para>
          <para>La ecuaci√≥n para calcular el coeficiente de correlaci√≥n es: 

</para>
          <para>En la figura 1: Ecuaci√≥n para el coeficiente de correlaci√≥n</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de la muestra Average(Arg1) y Average(Arg2).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real cuyo coseno hiperb√≥lico desea obtener.</param>
        <summary>Devuelve el coseno hiperb√≥lico de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La f√≥rmula del coseno hiperb√≥lico es: </para>
          <para>En la figura 1: F√≥rmula del coseno hiperb√≥lico</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El √°ngulo en radianes para el que desea que la cotangente.</param>
        <summary>Devuelve la cotangente de un √°ngulo.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El √°ngulo en radianes para el que desea que la cotangente hiperb√≥lica.</param>
        <summary>Devuelve la cotangente hiperb√≥lica de un n√∫mero.</summary>
        <returns>DOBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos que pueden contener o hacer referencia a distintos tipos de datos, pero s√≥lo se cuentan los n√∫meros.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cuenta el n√∫mero de celdas que contienen n√∫meros y los n√∫meros incluidos en la lista de argumentos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Utilice <b>Count</b> para obtener el n√∫mero de entradas en un campo de n√∫mero que se encuentra en una matriz o rango de n√∫meros. </para>
          <para>Se cuentan los argumentos que son n√∫meros, fechas o la representaci√≥n textual de n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Se omiten los argumentos que sean valores de error o texto que no se puedan traducir a n√∫meros.</para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Si desea contar valores l√≥gicos, texto o valores de error, use la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> (funci√≥n).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos que representan los valores que desea contar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cuenta el n√∫mero de celdas que no est√°n vac√≠as y los valores que hay en la lista de argumentos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Use <b>CountA</b> para contar el n√∫mero de celdas que contienen datos en un rango o matriz.</para>
          <para>Un valor es cualquier tipo de informaci√≥n, incluidos valores de error y texto vac√≠o (""). Un valor no incluye las celdas vac√≠as.</para>
          <para>Si el argumento es una matriz o referencia, s√≥lo se utilizar√°n los valores de la matriz o de la referencia. Se pasar√°n por alto las celdas vac√≠as y los valores de texto de la matriz o de la referencia.</para>
          <para>Si no necesita contar valores l√≥gicos, texto o valores de error, use la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> (funci√≥n).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango cuyas celdas en blanco desea contar.</param>
        <summary>Cuenta el n√∫mero de celdas en blanco dentro de un rango.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Tambi√©n se cuentan las celdas que incluyen f√≥rmulas que devuelven "" (texto vac√≠o). Las celdas que contienen valores cero no se cuentan.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de celdas en el que desea contar las celdas.</param>
        <param name="Arg2">Los criterios en el formulario de un n√∫mero, expresi√≥n, referencia de celda o texto que define qu√© celdas se cuentan. Por ejemplo, los criterios pueden expresarse como 32, "32", "&gt;32", "manzanas" o B4.</param>
        <summary>Cuenta las celdas contenidas en un rango que no est√°n en blanco y que cumplen los criterios especificados.</summary>
        <returns>Devuelve <see cref="T:System.Double" />.</returns>
        <remarks>
          <para>Para los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uno o m√°s rangos en los que evaluar los criterios asociados.</param>
        <param name="Arg2">Uno o m√°s criterios en forma de n√∫mero, expresi√≥n, referencia de celda o texto que definen qu√© celdas se cuentan. Por ejemplo, los criterios pueden expresarse como 32, "32", "&gt;32", "manzanas" o B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cuenta las celdas contenidas en un rango que no est√°n en blanco y que cumplen varios criterios.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Cada celda de un rango se cuenta s√≥lo si todos los criterios correspondientes especificados se cumplen para dicha celda.</para>
          <para>Si una celda de cualquier argumento es una celda vac√≠a, <b>CountIfs</b> la trata como un valor 0. </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as desde el principio del per√≠odo de un cup√≥n hasta la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La tabla siguiente contiene la lista de valores para <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>CoupDayBs</b> genera un error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>CoupDayBs</b> genera un error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>CoupDayBs</b> genera un error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>CoupDayBs</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as del per√≠odo (entre dos cupones) donde se encuentra la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla contiene los valores utilizados en <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>CoupDays</b> genera un error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>CoupDays</b> genera un error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>CoupDays</b> genera un error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>CoupDays</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as desde la fecha de liquidaci√≥n hasta la fecha del pr√≥ximo cup√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla contiene los valores utilizados en <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>CoupDaysNc</b> genera un error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>CoupDaysNc</b> genera un error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>CoupDaysNc</b> genera un error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>CoupDaysNc</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve un n√∫mero que representa la fecha del pr√≥ximo cup√≥n desde la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla contiene los valores utilizados en <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>CoupNcd</b> genera un error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>CoupNcd</b> genera un error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>CoupNcd</b> genera un error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>CoupNcd</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de cupones pagaderos entre la fecha de liquidaci√≥n y la fecha de vencimiento, redondeado al siguiente cup√≥n entero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla contiene los valores utilizados en <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>CoupNum</b> genera un error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>CoupNum</b> genera un error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>CoupNum</b> genera un error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>CoupNum</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve la fecha del cup√≥n anterior antes de la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la siguiente tabla contiene los valores utilizados en <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>CoupPcd</b> genera un error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>CoupPcd</b> genera un error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>CoupPcd</b> genera un error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>CoupPcd</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primer rango de celdas de n√∫meros enteros.</param>
        <param name="Arg2">Segundo rango de celdas de n√∫meros enteros.</param>
        <summary>Devuelve la covarianza o promedio de los productos de las desviaciones para cada pareja de puntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> (m√©todo).</para>
          <para>La covarianza se utiliza para determinar las relaciones entre dos conjuntos de datos. Por ejemplo, puede investigar si unos ingresos m√°s elevados se corresponden con niveles de estudios m√°s altos.</para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si <paramref name="Arg1" /> y <paramref name="Arg2" /> tienen un n√∫mero diferente de puntos de datos, <b>Covar</b> genera un error. </para>
          <para>Si bien <paramref name="Arg1" /> o <paramref name="Arg2" /> est√° vac√≠o, <b>Covar</b> genera un error. </para>
          <para>La covarianza es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la covarianza</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de muestra PROMEDIO(matriz1) y PROMEDIO(matriz2) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primer rango de celdas de n√∫meros enteros.</param>
        <param name="Arg2">Segundo rango de celdas de n√∫meros enteros.</param>
        <summary>Devuelve la covarianza de la poblaci√≥n o promedio de los productos de las desviaciones para cada pareja de puntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Utilice <b>Covariance_P</b> para determinar la relaci√≥n entre dos conjuntos de datos. Por ejemplo, se puede examinar si ingresos mayor acompa√±a a mayores niveles de educaci√≥n.</para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si <paramref name="Arg1" /> y <paramref name="Arg2" /> tienen un n√∫mero diferente de puntos de datos, <b>Covariance_P</b> genera un error. </para>
          <para>Si bien <paramref name="Arg1" /> o <paramref name="Arg2" /> est√° vac√≠o, <b>Covariance_P</b> genera un error. </para>
          <para>La covarianza es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la covarianza</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de muestra PROMEDIO(matriz1) y PROMEDIO(matriz2) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1: primer rango de celdas de n√∫meros enteros.</param>
        <param name="Arg2">Matriz2: segundo rango de celdas de n√∫meros enteros.</param>
        <summary>Devuelve la covarianza de la muestra, o promedio de los productos de las desviaciones para cada pareja de puntos de datos en dos conjuntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los argumentos matriz1 y matriz2 tienen n√∫meros distintos de puntos de datos, <b>Covariance_S</b> devuelve el valor de error # n/a. </para>
          <para>Si los argumentos matriz1 o matriz2 est√° vac√≠o o contiene el punto de datos s√≥lo 1 cada uno, <b>Covariance_S</b> devuelve el #DIV/0! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un entero de 32 bits que indica la aplicaci√≥n en la que se cre√≥ el objeto. S√≥lo lectura <b>entero</b> (int en C#).</summary>
        <value>To be added.</value>
        <remarks>
          <para>Si el objeto se cre√≥ en Microsoft Excel, esta propiedad devuelve la cadena XCEL, que es equivalente al n√∫mero hexadecimal 5843454C. La propiedad <b>Creator</b> est√° dise√±ada para usarse en Microsoft Excel para Macintosh, donde cada aplicaci√≥n tiene un c√≥digo de creador de cuatro caracteres. Por ejemplo, Microsoft Excel tiene el c√≥digo de creador XCEL.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de ensayos de Bernoulli.</param>
        <param name="Arg2">Probabilidad de √©xito en cada ensayo.</param>
        <param name="Arg3">Valor de criterio.</param>
        <summary>Devuelve el menor valor cuya distribuci√≥n binomial acumulada es menor o igual que un valor de criterio.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Utilice esta funci√≥n para aplicaciones de control de calidad. Por ejemplo, use <b>CritBinom</b> para determinar el n√∫mero mayor de elementos defectuosos que se permite en una l√≠nea de ensamblado que se ejecute sin rechazar todo el lote.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>CritBinom</b> genera un error. </para>
          <para>Si el argumento de ensayos no es un entero, se trunca.</para>
          <para>Si ensayos &lt; 0, <b>CritBinom</b> genera un error. </para>
          <para>Si prob_√©xito es &lt; 0 o prob_√©xito &gt; 1, <b>CritBinom</b> genera un error. </para>
          <para>Si alfa &lt; 0 o alfa &gt; 1, <b>CritBinom</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El √°ngulo en radianes para el que desea que la cosecante.</param>
        <summary>Devuelve la cosecante de un √°ngulo.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El √°ngulo en radianes para el que desea que la cosecante hiperb√≥lica.</param>
        <summary>Devuelve la cosecante hiperb√≥lica de un √°ngulo.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa de inter√©s.</param>
        <param name="Arg2">N√∫mero total de per√≠odos de pago.</param>
        <param name="Arg3">Valor actual.</param>
        <param name="Arg4">Primer per√≠odo del c√°lculo. Los per√≠odos de pago se numeran comenzando por el n√∫mero 1.</param>
        <param name="Arg5">√öltimo per√≠odo del c√°lculo.</param>
        <param name="Arg6">Momento del pago.</param>
        <summary>Devuelve la cantidad de inter√©s pagado de un pr√©stamo entre los argumentos de inicio del per√≠odo y de final del per√≠odo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>En las tablas siguientes se enumeran los valores utilizados en <paramref name="Arg6" />.</para>
          <list type="table">
            <item>
              <term>0 (cero)</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al principio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de que son coherentes sobre las unidades usadas para especificar la tasa y nper. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con una tasa de inter√©s anual del 12 por ciento, use 12% / 12 para tasa y 4 * 12 para <paramref name="Arg2" />. Si realiza pagos anuales del mismo pr√©stamo, use 12% para tasa y 4 para <paramref name="Arg2" />. </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" />, <paramref name="Arg5" />, y tipo se truncan a enteros. </para>
          <para>Si la tasa ‚â§ 0, <paramref name="Arg2" /> ‚â§ 0, o <paramref name="Arg3" /> ‚â§ 0, <b>CumIPmt</b> genera un error. </para>
          <para>Si <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1, o <paramref name="Arg4" /> &gt; <paramref name="Arg5" />, <b>CumIPmt</b> genera un error. </para>
          <para>Si <paramref name="Arg6" /> es cualquier n√∫mero distinto de 0 o 1, <b>CumIPmt</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa de inter√©s.</param>
        <param name="Arg2">N√∫mero total de per√≠odos de pago.</param>
        <param name="Arg3">Valor actual.</param>
        <param name="Arg4">Primer per√≠odo del c√°lculo. Los per√≠odos de pago se numeran comenzando por el n√∫mero 1.</param>
        <param name="Arg5">√öltimo per√≠odo del c√°lculo.</param>
        <param name="Arg6">√öltimo per√≠odo del c√°lculo.</param>
        <summary>Devuelve la cantidad acumulada de capital pagado de un pr√©stamo entre el inicio y el final del per√≠odo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>En las tablas siguientes se enumeran los valores utilizados en <paramref name="Arg6" />.</para>
          <list type="table">
            <item>
              <term>0 (cero)</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al principio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de que son coherentes sobre las unidades usadas para especificar la tasa y nper. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con una tasa de inter√©s anual del 12 por ciento, use 12% / 12 para tasa y 4 * 12 para <paramref name="Arg2" />. Si realiza pagos anuales del mismo pr√©stamo, use 12% para tasa y 4 para <paramref name="Arg2" />. </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" />, <paramref name="Arg5" />, y tipo se truncan a enteros. </para>
          <para>Si la tasa ‚â§ 0, <paramref name="Arg2" /> ‚â§ 0, o <paramref name="Arg3" /> ‚â§ 0, <b>CumPrinc</b> genera un error. </para>
          <para>Si <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1, o <paramref name="Arg4" /> &gt; <paramref name="Arg5" />, <b>CumPrinc</b> genera un error. </para>
          <para>Si <paramref name="Arg6" /> es cualquier n√∫mero distinto de 0 o 1, <b>CumPrinc</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Devuelve el promedio de los valores de una columna de una lista o base de datos que cumplen las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde entryis el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) y fecha_final (Arg1) son las dos fechas entre las que desea saber el n√∫mero de d√≠as.</param>
        <param name="Arg2">start_date(Arg2) y fecha_final (Arg1) son las dos fechas entre las que desea saber el n√∫mero de d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as entre las dos fechas.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Las dos fechas entre las que se desea calcular el n√∫mero de d√≠as. Si la fecha inicial (Arg1) es posterior a la fecha final (Arg2), Days360 devuelve un n√∫mero negativo. Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones.</param>
        <param name="Arg2">Las dos fechas entre las que se desea calcular el n√∫mero de d√≠as. Si la fecha inicial (Arg1) es posterior a la fecha final (Arg2), Days360 devuelve un n√∫mero negativo. Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones.</param>
        <param name="Arg3">Un valor booleano que especifica si se debe usar el m√©todo estadounidense o Europeo en el c√°lculo.</param>
        <summary>Calcula el n√∫mero de d√≠as entre dos fechas bas√°ndose en un a√±o de 360 d√≠as (doce meses de 30 d√≠as) que se utiliza en algunos c√°lculos contables.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Use esta funci√≥n para facilitar el c√°lculo de pagos si su sistema de contabilidad se basa en doce meses de 30 d√≠as. Las tablas siguientes contienen los valores para <paramref name="Arg3" />.</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> u omitido</term>
              <description>M√©todo US (NASD). Si la fecha inicial es el 31 del mes, se convierte en el 30 del mismo mes. Si la fecha final es el 31 del mes y la fecha inicial es anterior al 30, la fecha final se convierte en el 1 del mes siguiente; de lo contrario la fecha final se convierte en el 30 del mismo mes.</description>
            </item>
            <item>
              <term>
                <b>True</b>
              </term>
              <description>M√©todo europeo. Las fechas iniciales o finales que corresponden al 31 del mes se convierten en el 30 del mismo mes.</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo).</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo: per√≠odo para el que se desea calcular la depreciaci√≥n. Debe usar las mismas unidades que el argumento de vida del activo.</param>
        <param name="Arg5">Meses: n√∫mero de meses del primer a√±o. Si se omite el argumento de meses, se presupone que es 12.</param>
        <summary>Devuelve la depreciaci√≥n de un activo durante un per√≠odo espec√≠fico usando el m√©todo de depreciaci√≥n de saldo fijo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El m√©todo de depreciaci√≥n de saldo fijo calcula la depreciaci√≥n a una tasa fija. DB usa las f√≥rmulas siguientes para calcular la depreciaci√≥n para un per√≠odo:</para>
          <para>(costo - depreciaci√≥n total de per√≠odos anteriores) * tasa</para>
          <para>donde:</para>
          <para>tasa = 1 - ((salvage / cost) ^ (1 / vida)), redondeado hasta tres posiciones decimales.</para>
          <para>La depreciaci√≥n para los per√≠odos y el apellido es un caso especial. Para el primer per√≠odo, DB usa la f√≥rmula:</para>
          <para>costo * tasa * mes / 12</para>
          <para>Para el √∫ltimo per√≠odo, DB usa la f√≥rmula:</para>
          <para>((costo - depreciaci√≥n total de per√≠odos anteriores) * tasa * (12 - meses)) / 12</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto o referencia a una celda que contiene el texto que desea cambiar.</param>
        <summary>Convierte letras de ancho medio (de un byte) dentro de una cadena de caracteres en caracteres de ancho completo (de doble byte). El nombre de la funci√≥n (y los caracteres que convierte) depende de la configuraci√≥n de idioma.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Cuenta las celdas que contienen n√∫meros en una columna de una lista o base de datos y que cumplen las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Cuenta las celdas que no est√°n en blanco de una columna de una lista o base de datos y que cumplen las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo). Este valor puede ser 0.</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo: per√≠odo para el que se desea calcular la depreciaci√≥n. Debe usar las mismas unidades que el argumento de vida del activo.</param>
        <param name="Arg5">Factor: tasa a la que disminuye el saldo. Si el argumento de factor se omite, se calcular√° como 2 (el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo).</param>
        <summary>Devuelve la depreciaci√≥n de un activo en un per√≠odo espec√≠fico con el m√©todo de depreciaci√≥n por doble disminuci√≥n de saldo u otro m√©todo que se especifique.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: todos los cinco argumentos deben ser n√∫meros positivos.</para>
          <para>El m√©todo de depreciaci√≥n por doble disminuci√≥n de saldo calcula la depreciaci√≥n a un ritmo acelerado. La depreciaci√≥n es mayor en el primer per√≠odo y disminuye en los per√≠odos sucesivos. <b>DDB</b> usa la f√≥rmula siguiente para calcular la depreciaci√≥n para un per√≠odo:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Si no desea usar el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo, cambie el argumento de factor.</para>
          <para>Usar el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> funciona si desea pasar al m√©todo de depreciaci√≥n lineal cuando la depreciaci√≥n sea mayor que el c√°lculo del saldo en disminuci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero entero decimal que desea convertir. Si el n√∫mero es negativo, los valores se pasan por alto y <b>Dec2Bin</b> devuelve un n√∫mero binario de 10 caracteres (10 bits) en el que el bit m√°s significativo es el bit de inicio de sesi√≥n. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan mediante la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Dec2Bin</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero decimal en binario.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero &lt; -512 o si n√∫mero &gt; 511, <b>Dec2Bin</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero es un valor no num√©rico, <b>Dec2Bin</b> devuelve #VALUE! valor de error. </para>
          <para>Si <b>Dec2Bin</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Dec2Bin</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es cero o un n√∫mero negativo, <b>Dec2Bin</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero entero decimal que desea convertir. Si el n√∫mero es negativo, se pasa por alto lugares y <b>Dec2Hex</b> devuelve un n√∫mero hexadecimal de 10 caracteres (40 bits) en el que el bit m√°s significativo es el bit de inicio de sesi√≥n. Los 39 bits restantes son bits de magnitud. Los n√∫meros negativos se representan mediante la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Dec2Hex</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero decimal en hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero &lt; -549.755.813.888 o si n√∫mero &gt; o mayor que 549.755.813.887, <b>Dec2Hex</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero es un valor no num√©rico, <b>Dec2Hex</b> devuelve #VALUE! valor de error. </para>
          <para>Si <b>Dec2Hex</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Dec2Hex</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es negativo, <b>Dec2Hex</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero entero decimal que desea convertir. Si el n√∫mero es negativo, se pasa por alto lugares y <b>Dec2Oct</b> devuelve un n√∫mero octal de 10 caracteres (30 bits) en el que el bit m√°s significativo es el bit de inicio de sesi√≥n. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan mediante la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Dec2Oct</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero decimal en octal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero &lt; -536.870.912 o si n√∫mero &gt; mayor que 536,870,911, <b>Dec2Oct</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero es un valor no num√©rico, <b>Dec2Oct</b> devuelve #VALUE! valor de error. </para>
          <para>Si <b>Dec2Oct</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Dec2Oct</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es negativo, <b>Dec2Oct</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero que se desea convertir.</param>
        <param name="Arg2">La base de la base de la cantidad que va a convertir.</param>
        <summary>Convierte una representaci√≥n de texto de un n√∫mero en una base determinada en un n√∫mero decimal.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo: √°ngulo en radianes que se desea convertir.</param>
        <summary>Convierte radianes en grados.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, el primer n√∫mero.</param>
        <param name="Arg2">N√∫mero2, el segundo n√∫mero. Si se omite, el valor predeterminado del argumento n√∫mero2 es 0.</param>
        <summary>Comprueba si dos valores son iguales. Devuelve 1 si n√∫mero1 es igual a n√∫mero2; de lo contrario devuelve 0.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Utilice esta funci√≥n para filtrar un conjunto de valores. Por ejemplo, si suma varias funciones <b>Delta</b> puede calcular el n√∫mero de pares iguales. Esta funci√≥n es tambi√©n conocida como la funci√≥n Kronecker Delta.</para>
          <para>Si N√∫mero1 es un valor no num√©rico, <b>Delta</b> devuelve #VALUE! valor de error. </para>
          <para>Si n√∫mero2 es un valor no num√©rico, <b>Delta</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, n√∫mero2... son de 1 a 30 argumentos cuya suma de las desviaciones cuadradas se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la suma de los cuadrados de las desviaciones de los puntos de datos a partir de la media de la muestra.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros. </para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos. </para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. </para>
          <para>La ecuaci√≥n para la suma de las desviaciones cuadradas es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la suma de las desviaciones cuadradas</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Extrae un √∫nico valor de una columna de una lista o una base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Precio: precio del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg4">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la tasa de descuento de un valor burs√°til.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto. </para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es un n√∫mero v√°lido de fecha de serie, <b>Disc</b> devuelve #VALUE! valor de error. </para>
          <para>Si precio ‚â§ 0 o si rescate son menores que 0, <b>Disc</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>Disc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>Disc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>Disco</b> se calcula de la siguiente manera: </para>
          <para>En la figura 1: Ecuaci√≥n para calcular Disc (m√©todo)</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en un a√±o, dependiendo de la base anual.</para>
          <para>DSM = n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Devuelve el valor m√°ximo de una columna de una lista o una base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Devuelve el valor m√≠nimo de una columna de una lista o una base de datos que coincida con las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: un n√∫mero, una referencia a una celda que contiene un n√∫mero o una f√≥rmula que se eval√∫a en un n√∫mero.</param>
        <param name="Arg2">Decimales es el n√∫mero de d√≠gitos a la derecha del separador decimal. Si decimales es negativo, el argumento n√∫mero se redondea hacia la izquierda del separador decimal. Si omite el argumento de decimales, se calcular√° como 2.</param>
        <summary>La funci√≥n descrita en este tema de Ayuda convierte un n√∫mero en formato de texto y le aplica un s√≠mbolo de moneda. El nombre de la funci√≥n (y el s√≠mbolo que aplica) depende de la configuraci√≥n de idioma.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La principal diferencia entre dar formato a una celda que contiene un n√∫mero con el comando celdas (men√∫ Formato) y dar formato a un n√∫mero directamente con la funci√≥n <b>Dollar</b> es que <b>Dollar</b> convierte el resultado en texto. Un n√∫mero con formato con el comando celdas sigue siendo un n√∫mero. Se puede seguir usando los n√∫meros que se ha dado formateados con <b>d√≥lar</b> en las f√≥rmulas, debido a que Microsoft Excel convierte los n√∫meros escritos como valores de texto a n√∫meros cuando calcula.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Moneda fraccionaria: n√∫mero expresado como fracci√≥n.</param>
        <param name="Arg2">Fracci√≥n: n√∫mero entero que se utiliza como denominador de la fracci√≥n.</param>
        <summary>Convierte una cotizaci√≥n de un valor burs√°til, expresada en forma fraccionaria, en decimal. Use DollarDe para convertir n√∫meros fraccionarios de moneda, como precios de valores burs√°tiles, a n√∫meros decimales.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento de fracci√≥n no es un entero, se trunca.</para>
          <para>Si el argumento de fracci√≥n es menor que 0, <b>DollarDe</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de fracci√≥n es 0, <b>DollarDe</b> devuelve el #DIV/0! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Moneda decimal: un n√∫mero decimal.</param>
        <param name="Arg2">Fracci√≥n: n√∫mero entero que se utiliza como denominador de la fracci√≥n.</param>
        <summary>Convierte una cotizaci√≥n de un valor burs√°til, expresada en forma decimal, en fraccionaria. Use DollarFR para convertir n√∫meros decimales de moneda en n√∫meros expresados como fracci√≥n, como precios de valores burs√°tiles.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento de fracci√≥n no es un entero, se trunca.</para>
          <para>Si el argumento de fracci√≥n es menor que 0, <b>DollarFr</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de fracci√≥n es 0, <b>DollarFr</b> devuelve el #DIV/0! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El argumento de base de datos es el rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">El argumento de nombre de campo indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">El argumento de criterios es el rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Multiplica los valores de una columna de una lista o base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de una poblaci√≥n bas√°ndose en una muestra y utilizando los n√∫meros de una columna de una lista o base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de una poblaci√≥n bas√°ndose en toda la poblaci√≥n y utilizando los n√∫meros de una columna de una lista o una base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Suma los n√∫meros de una columna de una lista o base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Cup√≥n: tasa de inter√©s nominal anual (inter√©s en los cupones) de un valor burs√°til.</param>
        <param name="Arg4">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg5">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la duraci√≥n de Macauley de un valor de valor nominal supuesto de 100 $. La duraci√≥n se define como el promedio ponderado del valor actual de los recursos generados y se usa como una medida de la respuesta del precio de un bono a los cambios en el rendimiento.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, frecuencia y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>Duration</b> devuelve #VALUE! valor de error. </para>
          <para>Si cup√≥n &lt; 0 o si rdto: rendimiento &lt; 0, <b>Duration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>Duration</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>Duration</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>duraci√≥n</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la varianza de una poblaci√≥n bas√°ndose en una muestra y utilizando los n√∫meros de una columna de una lista o base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la varianza de una poblaci√≥n bas√°ndose en toda la poblaci√≥n y utilizando los n√∫meros de una columna de una lista o una base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Debido a que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo que escribe; Sin embargo, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda correspondiente en el rango de criterios: </para>
          <para>='' = entrada ''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Cuando el filtrado de datos de texto, Excel no distingue entre may√∫sculas y min√∫sculas. Sin embargo, puede usar una f√≥rmula para realizar una b√∫squeda distingue may√∫sculas de min√∫sculas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Meses: n√∫mero de meses anteriores o posteriores al argumento de fecha inicial. Cuando el argumento de meses tiene un valor positivo el resultado es una fecha futura; cuando es un valor negativo, el resultado es una fecha pasada.</param>
        <summary>Devuelve el n√∫mero de serie que representa la fecha que indica el n√∫mero de meses anteriores o posteriores a la fecha especificada (argumento de fecha inicial). Use EDate para calcular las fechas de vencimiento que caen en el mismo d√≠a del mes que el d√≠a de emisi√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si el argumento fecha_inicial no es una fecha v√°lida, <b>EDate</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento de meses no es un n√∫mero entero, se trunca.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inter√©s nominal: tasa de inter√©s nominal.</param>
        <param name="Arg2">N√∫mero de per√≠odos por a√±o: n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</param>
        <summary>Devuelve la tasa efectiva del inter√©s anual, si se conocen la tasa de inter√©s anual nominal y el n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El argumento de n√∫mero de per√≠odos al a√±o se trunca a un valor entero.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>Effect</b> devuelve #VALUE! valor de error. </para>
          <para>Si nominal ‚â§ 0 o si n√∫m_per_a√±o &lt; 1, <b>Effect</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>Efecto</b> se calcula de la siguiente manera: </para>
          <para>En la figura 1: Ecuaci√≥n para calcular el m√©todo efecto</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto que se va a codificar.</param>
        <summary>Direcci√≥n URL codifica el argumento.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Meses: n√∫mero de meses anteriores o posteriores al argumento de fecha inicial. Cuando el argumento de meses tiene un valor positivo el resultado es una fecha futura; cuando es un valor negativo, el resultado es una fecha pasada.</param>
        <summary>Devuelve el n√∫mero de serie del √∫ltimo d√≠a del mes, anterior o posterior a la fecha inicial del n√∫mero de mes indicado. Use el EOMONTH para calcular las fechas de vencimiento que caen en el √∫ltimo d√≠a del mes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si el argumento fecha_inicial no es una fecha v√°lida, <b>EoMonth</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento fecha_inicial m√°s el argumento meses da como resultado una fecha no v√°lida, <b>EoMonth</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">L√≠mite_inf: l√≠mite inferior para la integraci√≥n de <b>Erf</b>.</param>
        <param name="Arg2">L√≠mite_sup: el l√≠mite superior para la integraci√≥n de <b>Erf</b>. Si se omite, el m√©todo se integra entre cero y el argumento de l√≠mite inferior.</param>
        <summary>Devuelve el resultado de la funci√≥n de error entre el argumento de l√≠mite inferior y el argumento de l√≠mite superior.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> (m√©todo).</para>
          <para>Si el argumento de l√≠mite inferior es un valor no num√©rico, <b>Erf</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento de l√≠mite inferior es negativo, <b>Erf</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de l√≠mite superior es un valor no num√©rico, <b>Erf</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento de l√≠mite superior es negativo, <b>Erf</b> devuelve el #NUM! valor de error. </para>
          <para>En la figura 1: Ecuaci√≥n para calcular el m√©todo Erf</para>
          <para></para>
          <para></para>
          <para>La figura 2: Ecuaci√≥n para calcular el m√©todo Erf</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">L√≠mite inferior: l√≠mite inferior para la integraci√≥n de ERF.</param>
        <summary>Devuelve el resultado de la funci√≥n de error entre cero y el argumento de l√≠mite inferior.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento de l√≠mite inferior no es num√©rico, <b>Erf_Precise</b> genera un error. Si el argumento de l√≠mite inferior es negativo, <b>Erf_Precise</b> genera un error.</para>
          <para>En la figura 1: Ecuaci√≥n para calcular el m√©todo FUN.error.exacto</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primer argumento.</param>
        <summary>Devuelve la funci√≥n ERF complementaria integrada entre el par√°metro especificado y el infinito.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> (m√©todo).</para>
          <para>Si esta funci√≥n no est√° disponible y devuelve el error #¬øNOMBRE?, es necesario instalar y cargar el complemento Herramientas para an√°lisis.</para>
          <para>Si el par√°metro es un valor no num√©rico, <b>ErfC</b> devuelve #VALUE! valor de error.</para>
          <para>Si el par√°metro es negativo, <b>ErfC</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor con el que se va a realizar el c√°lculo.</param>
        <summary>Devuelve la funci√≥n de error complementaria integrada entre el valor especificado y el infinito.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el valor especificado no es num√©rico, <b>ErfC_Precise</b> genera un error.</para>
          <para>Si el valor especificado es negativo, <b>ErfC_Precise</b> genera un error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <summary>Devuelve un n√∫mero redondeado hasta el n√∫mero entero par m√°s pr√≥ximo. Esta funci√≥n puede usarse para procesar art√≠culos que vienen en pares. Por ejemplo, un caj√≥n de embalaje que contiene filas de uno o dos art√≠culos est√° lleno cuando el n√∫mero de art√≠culos, redondeado hasta el par m√°s pr√≥ximo, coincide con la capacidad del caj√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero es un valor no num√©rico, <b>Even</b> devuelve #VALUE! valor de error. </para>
          <para>Independientemente del signo del n√∫mero, los valores se redondean hacia arriba. Si el argumento de n√∫mero es un entero par, no se redondea.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor de la funci√≥n.</param>
        <param name="Arg2">Lambda: valor del par√°metro.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que indica la forma de la funci√≥n exponencial para proporcionar. Si acumulado es <b>true</b>, <b>Expon_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n exponencial. Use EXPON_DIST para establecer el tiempo entre dos eventos, tal como el tiempo que tarda un cajero autom√°tico en entregar efectivo. Por ejemplo, la funci√≥n EXPON_DIST puede usarse para determinar la probabilidad de que el proceso tarde un minuto como m√°ximo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x o lambda no son num√©ricos, <b>Expon_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Expon_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si lambda ‚â§ 0, <b>Expon_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de la probabilidad es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la funci√≥n de densidad de probabilidad</para>
          <para></para>
          <para></para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa es: 

</para>
          <para>La figura 2: Ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor de la funci√≥n.</param>
        <param name="Arg2">Lambda: valor del par√°metro.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que indica la forma de la funci√≥n exponencial para proporcionar. Si acumulado es <b>true</b>, <b>ExponDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n exponencial. Use <b>ExponDist</b> para modelar el tiempo entre eventos, como cu√°nto tarda un cajero autom√°tico en entregar efectivo. Por ejemplo, puede usar <b>ExponDist</b> para determinar la probabilidad de que el proceso de toma de 1 minuto como m√°ximo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si x o lambda no son num√©ricos, <b>ExponDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>ExponDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si lambda ‚â§ 0, <b>ExponDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de la probabilidad es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la funci√≥n de densidad de probabilidad</para>
          <para></para>
          <para></para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa es: 

</para>
          <para>La figura 2: Ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Grados_de_libertad1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados_de_libertad2: n√∫mero de grados de libertad del denominador.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>F_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n de probabilidad F.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>F_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x es negativo, <b>F_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad1 o grados_de_libertad2 no son n√∫meros enteros, se truncan.</para>
          <para>Si grados_de_libertad1 &lt; 1, <b>F_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad &lt; 1, <b>F_Dist</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve la distribuci√≥n de probabilidad F de cola derecha. Esta funci√≥n puede usarse para determinar si dos conjuntos de datos tienen diferentes grados de diversidad. Por ejemplo, podr√≠a examinar los resultados de los ex√°menes presentados por hombres y mujeres para entrar a la escuela secundaria, y determinar si la variabilidad entre las mujeres es diferente de la variabilidad entre los hombres.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>F_Dist_RT</b> devuelve #VALUE! valor de error. </para>
          <para>Si x es negativo, <b>F_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si grados_de_libertad1 &lt; 1 o grados_de_libertad1 ‚â• 10 ^ 10, <b>F_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad2 &lt; 1 o grados_de_libertad2 ‚â• 10 ^ 10, <b>F_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>F_Dist_RT</b> se calcula como F_DIST_RT = P (F&gt;x), donde F es una variable aleatoria con una distribuci√≥n F con grados de libertad 1 y grados de libertad 2 grados de libertad.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n acumulativa F.</param>
        <param name="Arg2">Grados_de_libertad1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados_de_libertad2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve el inverso de la distribuci√≥n de probabilidad F.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>F_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>F_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad1 o grados_de_libertad2 no son n√∫meros enteros, se truncan.</para>
          <para>Si grados_de_libertad1 &lt; 1 o grados_de_libertad2 &lt; 1, <b>F_Inv</b> devuelve el #NUM! valor de error. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: una probabilidad asociada con la distribuci√≥n acumulativa F.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve el inverso de la distribuci√≥n de probabilidad F de cola derecha. Si p = F_DIST_RT(x,...), entonces F_INV_RT(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La distribuci√≥n F puede usarse en una prueba F que compare el grado de variabilidad en dos conjuntos de datos. Por ejemplo, podr√≠a analizar las distribuciones de ingresos en Venezuela y Colombia para determinar si ambos pa√≠ses tienen un grado de diversidad similar.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>F_Inv_RT</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>F_Inv_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si grados_de_libertad1 &lt; 1 o grados_de_libertad1 ‚â• 10 ^ 10, <b>F_Inv_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad2 &lt; 1 o grados_de_libertad2 ‚â• 10 ^ 10, <b>F_Inv_RT</b> devuelve el #NUM! valor de error.</para>
          <para>
            <b>F_Inv_RT</b> puede usarse para devolver valores cr√≠ticos de la distribuci√≥n F. Por ejemplo, el resultado de un c√°lculo an incluye datos para la estad√≠stica F, la probabilidad de F y el valor cr√≠tico de F en el nivel de importancia 0,05. Para devolver el valor cr√≠tico de F, use el nivel de importancia como el argumento de probabilidad a <b>F_Inv_RT</b>.</para>
          <para>Dado un valor de probabilidad, <b>F_Inv_RT</b> busca ese valor x tal que F_DIST_RT (x, grados_de_libertad1, grados_de_libertad2) = probabilidad. Por lo tanto, la precisi√≥n de <b>F_Inv_RT</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />. <b>F_Inv_RT</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 64 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primera matriz o rango de datos.</param>
        <param name="Arg2">Matriz 2: segunda matriz o rango de datos.</param>
        <summary>Devuelve el resultado de una prueba F. Una prueba F devuelve la probabilidad de dos colas de que las varianzas de los argumentos de matriz 1 y matriz 2 no presenten diferencias significativas. Utilice esta funci√≥n para determinar si las varianzas de dos muestras son diferentes. Por ejemplo, dados los resultados de los ex√°menes de escuelas p√∫blicas y privadas, puede comprobar si estas escuelas tienen m√°rgenes de resultados diferentes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si el n√∫mero de puntos de datos de los argumentos matriz1 o matriz2 es menor que 2, o si la varianza de matriz1 o matriz2 es cero, <b>F_Test</b> devuelve #DIV/0! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero no negativo cuyo factorial se desea obtener. Si el argumento de n√∫mero no es un entero, se trunca.</param>
        <summary>Devuelve el factorial de un n√∫mero. El factorial de un n√∫mero es igual a 1*2*3 *...* n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor del que se devuelve el factorial doble. Si el argumento de n√∫mero no es un entero, se trunca.</param>
        <summary>Devuelve el factorial doble de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si n√∫mero no es num√©rico, <b>FactDouble</b> devuelve #VALUE! valor de error. </para>
          <para>Si el n√∫mero es negativo, <b>FactDouble</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero es par: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para par</para>
          <para></para>
          <para></para>
          <para>Si el n√∫mero es impar: 

</para>
          <para>La figura 2: Ecuaci√≥n para impar</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve la distribuci√≥n de probabilidad F. Esta funci√≥n puede usarse para determinar si dos conjuntos de datos tienen diferentes grados de diversidad. Por ejemplo, podr√≠a examinar los resultados que obtienen las mujeres y los varones en los ex√°menes de acceso a la educaci√≥n secundaria, y determinar si la variabilidad entre las mujeres es diferente de la variabilidad entre los varones.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todos.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>FDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x es negativo, <b>FDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si grados_de_libertad1 &lt; 1 o grados_de_libertad1 ‚â• 10 ^ 10, <b>FDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad2 &lt; 1 o grados_de_libertad2 ‚â• 10 ^ 10, <b>FDist</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>FDist</b> se calcula como FDIST = P (F&gt;x), donde F es una variable aleatoria con una distribuci√≥n F con grados de libertad 1 y grados de libertad 2 grados de libertad.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cadena xml v√°lida.</param>
        <param name="Arg2">Cadena de consulta de XPath.</param>
        <summary>Obtener datos espec√≠ficos desde el XML devuelto, normalmente a partir de una llamada de funci√≥n <b>WebService</b> .</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>
          <para>El par√°metro XPath est√° limitado a 1024 caracteres.</para>
          <para>La funci√≥n <b>FILTERXML</b> devuelve los resultados que se analizan a trav√©s de la configuraci√≥n regional del usuario datos especificado.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El nombre de la hoja de c√°lculo.</param>
        <param name="Arg2">El nombre del rango.</param>
        <param name="Arg3">El nombre de un argumento para refinar la b√∫squeda.</param>
        <summary>Busca informaci√≥n concreta en una hoja de c√°lculo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto buscado: texto que se desea encontrar.</param>
        <param name="Arg2">Dentro del texto: texto que contiene el texto que se desea encontrar.</param>
        <param name="Arg3">N√∫mero inicial: especifica el car√°cter a partir del cual comenzar√° la b√∫squeda. El primer car√°cter de dentro del texto es el car√°cter n√∫mero 1. Si se omite el argumento de n√∫mero inicial, se supone que es 1.</param>
        <summary>
          <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />y <b>FindB</b> buscan una cadena de texto dentro de una segunda cadena de texto y devolver el n√∫mero de la posici√≥n inicial de la primera cadena de texto desde el primer car√°cter de la segunda cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> es para su uso con idiomas que utilizan el car√°cter de byte √∫nico conjunto (SBCS), mientras que <b>FindB</b> est√° pensada para su uso con idiomas que utilizan el juego de caracteres de doble byte (DBCS). La configuraci√≥n de idioma predeterminado en su equipo afecta al valor devuelto de la siguiente manera:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />siempre cuenta cada car√°cter, ya sea de un byte o de doble byte, como 1, independientemente del idioma predeterminado.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> cuenta cada car√°cter de doble byte como 2 si se ha habilitado la edici√≥n de un idioma que admite DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo contrario, <b>FindB</b> cuenta cada car√°cter como 1.</description>
            </item>
          </list>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />y <b>FindB</b> distinguen may√∫sculas de min√∫sculas y no admite caracteres comod√≠n. Si no desea hacer un comod√≠n entre may√∫sculas y min√∫sculas de b√∫squeda o el uso de caracteres, puede usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />. </para>
          <para>Si texto_buscado es "" (texto vac√≠o), <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> coincide con el primer car√°cter de la cadena de b√∫squeda (es decir, el car√°cter numeradas n√∫mero_inicio o 1). </para>
          <para>El argumento de texto buscado no puede contener ning√∫n car√°cter comod√≠n.</para>
          <para>Si texto_buscado no aparece en texto_continente, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <b>FindB</b> devuelven #VALUE! valor de error. </para>
          <para>Si el argumento de n√∫mero inicial no es mayor que cero, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <b>FindB</b> devuelven #VALUE! valor de error. </para>
          <para>Si el argumento de n√∫mero inicial es mayor que la longitud de texto_continente, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <b>FindB</b> devuelven #VALUE! valor de error. </para>
          <para>Use el argumento de n√∫mero inicial para omitir un n√∫mero especificado de caracteres. Uso de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> como ejemplo, supongamos que est√° trabajando con la cadena de texto "AYF0093. AtuendoParaJ√≥venes "con hallar. Para buscar el n√∫mero de la primera "A" en la parte descriptiva de la cadena de texto, establezca igual a 8 n√∫mero_inicio para que no se busca en la parte correspondiente al n√∫mero de serie del texto. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />comienza por el car√°cter 8, encuentra texto_buscado en el siguiente car√°cter y devuelve el n√∫mero 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />siempre devuelve el n√∫mero de caracteres desde el inicio de texto_continente, contando los caracteres omitidos si el argumento de n√∫mero inicial es mayor que 1.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: una probabilidad asociada con la distribuci√≥n acumulativa F.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve el inverso de la distribuci√≥n de probabilidad F. Si el argumento p = FDist(x,...), entonces FInv(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> m√©todos.</para>
          <para>La distribuci√≥n F puede usarse en una prueba F que compare el grado de variabilidad en dos conjuntos de datos. Por ejemplo, podr√≠a analizar las distribuciones de ingresos en Venezuela y Colombia para determinar si ambos pa√≠ses tienen un grado de diversidad similar.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>FInv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>FInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si grados_de_libertad1 &lt; 1 o grados_de_libertad1 ‚â• 10 ^ 10, <b>FInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad2 &lt; 1 o grados_de_libertad2 ‚â• 10 ^ 10, <b>FInv</b> devuelve el #NUM! valor de error.</para>
          <para>
            <b>FInv</b> puede usarse para devolver valores cr√≠ticos de la distribuci√≥n F. Por ejemplo, el resultado de un c√°lculo an incluye datos para la estad√≠stica F, la probabilidad de F y el valor cr√≠tico de F en el nivel de importancia 0,05. Para devolver el valor cr√≠tico de F, use el nivel de importancia como argumento de probabilidad en <b>FInv</b>.</para>
          <para>Dado un valor de probabilidad, <b>FInv</b> busca ese valor x tal que la funci√≥n FDIST (x, grados_de_libertad1, grados_de_libertad2) = probabilidad. Por lo tanto, la precisi√≥n de <b>FInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />. <b>FInv</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 64 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: un valor num√©rico para el cual se desea calcular la transformaci√≥n.</param>
        <summary>Devuelve la transformaci√≥n Fisher en x. Esta transformaci√≥n produce una funci√≥n que se distribuye normalmente en lugar de ser asim√©trica. Use esta funci√≥n para realizar pruebas hipot√©ticas sobre el coeficiente de correlaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x no es num√©rico, <b>Fisher</b> devuelve #VALUE! valor de error. </para>
          <para>Si los argumentos x ‚â§ -1 o si x ‚â• 1, <b>Fisher</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la transformaci√≥n FISHER es:</para>
          <para>En la figura 1: Ecuaci√≥n para la transformaci√≥n Fisher</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y: valor para el que se realizar√° la inversa de la transformaci√≥n.</param>
        <summary>Devuelve la inversa de la transformaci√≥n Fisher. Use esta transformaci√≥n para analizar correlaciones entre rangos de matrices de datos. Si el argumento y = FISHER(x), entonces FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si y es un valor no num√©rico, <b>FisherInv</b> devuelve #VALUE! valor de error. </para>
          <para>La ecuaci√≥n para la inversa de la transformaci√≥n Fisher es:</para>
          <para>En la figura 1: Ecuaci√≥n para la transformaci√≥n inversa de Fisher</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero que se desea redondear y convertir en texto.</param>
        <param name="Arg2">Decimales: n√∫mero de d√≠gitos a la derecha del separador decimal.</param>
        <param name="Arg3">Millares - una l√≥gica valor que, si <b>es true</b>, impide que <b>Fixed</b> incluya comas en el texto devuelto.</param>
        <summary>Redondea un n√∫mero con el n√∫mero de decimales especificado, le aplica formato decimal usando comas y puntos, y devuelve el resultado como texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>En Microsoft Excel, los n√∫meros nunca pueden tener m√°s de 15 d√≠gitos significativos, pero el argumento decimales puede tener hasta 127 d√≠gitos.</para>
          <para>Si el argumento de decimales es negativo, el n√∫mero se redondea hacia la izquierda del separador decimal.</para>
          <para>Si omite el argumento de decimales, se calcular√° como 2.</para>
          <para>Si millares es <b>false</b> o se omite, el texto devuelto incluir√° comas como de costumbre. </para>
          <para>La principal diferencia entre dar formato a una celda que contiene un n√∫mero con el comando celdas (men√∫ Formato) y dar formato a un n√∫mero directamente con la funci√≥n FIXED son que <b>Fixed</b> convierte el resultado en texto. Un n√∫mero con formato con el comando celdas sigue siendo un n√∫mero.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor num√©rico que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Redondea un n√∫mero al pr√≥ximo m√∫ltiplo del argumento de cifra significativa, hacia abajo (hacia el cero).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> (m√©todo).</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>Floor</b> devuelve #VALUE! valor de error. </para>
          <para>Si el n√∫mero y cifra significativa tienen distinto signo, <b>Floor</b> devuelve el #NUM! valor de error. </para>
          <para>Independientemente del signo del argumento de n√∫mero, un valor siempre se redondea hacia abajo, alej√°ndolo de cero. Si el argumento n√∫mero es un m√∫ltiplo exacto del argumento de cifra significativa, no se redondea.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El valor que desea redondear.</param>
        <param name="Arg2">El m√∫ltiplo al que desea redondear.</param>
        <param name="Arg3">Cuando se especifica un n√∫mero distinto de cero, esta funci√≥n se redondear√° hacia cero.</param>
        <summary>Redondea un n√∫mero hacia abajo, al entero m√°s pr√≥ximo o al m√∫ltiplo significativo m√°s cercano.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor num√©rico que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Redondea el n√∫mero especificado al m√∫ltiplo significativo m√°s pr√≥ximo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Seg√∫n el signo del n√∫mero y los argumentos de cifra significativa, el m√©todo <b>Floor_Precise</b> redondea acerc√°ndose al cero o alej√°ndose de √©ste.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
          </list>
          <para>Si cualquiera de los argumentos no es num√©rico, el m√©todo <b>Floor_Precise</b> genera un error. </para>
          <para>Si n√∫mero es un m√∫ltiplo exacto del argumento cifra_significativa, no se redondea.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: punto de datos para el que se desea predecir un valor.</param>
        <param name="Arg2">Valores conocidos de y: matriz o rango de datos dependientes.</param>
        <param name="Arg3">Valores conocidos de x: matriz o rango de datos independientes.</param>
        <summary>Calcula o pronostica un valor futuro a partir de los valores existentes. La predicci√≥n del valor es un valor de y obtenido a partir de un valor de x. Los valores conocidos son valores de x y valores de y existentes, y el nuevo valor se pronostica utilizando regresi√≥n lineal. Esta funci√≥n se puede utilizar para realizar previsiones de ventas, establecer requisitos de inventario o tendencias de los consumidores.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x no es num√©rico, <b>Forecast</b> devuelve #VALUE! valor de error. </para>
          <para>Si los valores conocidos de y y de valores conocidos de x est√°n vac√≠os o contienen un n√∫mero diferente de puntos de datos, <b>Forecast</b> devuelve el valor de error # n/a. </para>
          <para>Si la varianza de los valores conocidos de x es igual a cero, <b>Forecast</b> devuelve el #DIV/0! valor de error. </para>
          <para>La ecuaci√≥n de <b>Forecast</b> es a + bx, donde: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo previsi√≥n</para>
          <para></para>
          <para></para>
          <para>Y:</para>
          <para>La figura 2: Ecuaci√≥n para el m√©todo previsi√≥n</para>
          <para></para>
          <para></para>
          <para>y donde x e y son las medias de muestra de las funciones AVERAGE(valores conocidos de x) y AVERAGE(valores conocidos de y).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de datos: una matriz de o una referencia a un conjunto de valores para la que desea contar frecuencias. Si la matriz de datos no contiene ning√∫n valor, <b>frecuencia</b> devuelve una matriz de ceros.</param>
        <param name="Arg2">Matriz de grupos: una matriz de intervalos o referencia a en la que desea agrupar los valores del argumento datos. Si grupos no contiene ning√∫n valor, <b>frecuencia</b> devuelve el n√∫mero de elementos de matriz de datos.</param>
        <summary>¬øCon qu√© frecuencia se calculan valores se producen dentro de un intervalo de valores de y, a continuaci√≥n, devuelve una matriz vertical de n√∫meros. Por ejemplo, utilice <b>frecuencia</b> para contar el n√∫mero de resultados de prueba que se encuentran dentro de un rango. Debido a que <b>frecuencia</b> devuelve una matriz, se deben escribirse como una f√≥rmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Frequency</b> se escribe como una f√≥rmula de matriz despu√©s de seleccionar un rango de celdas adyacentes en las que se desea que aparezca el resultado de la distribuci√≥n. </para>
          <para>El n√∫mero de elementos de la matriz devuelta es uno m√°s que el n√∫mero de elementos en grupos. El elemento adicional de la matriz devuelta devuelve el recuento de todos los valores superiores al intervalo mayor. Por ejemplo, al sumar tres rangos de valores (intervalos) introducidos en tres celdas, aseg√∫rese de introducir <b>frecuencia</b> en cuatro celdas para los resultados. La celda adicional devuelve el n√∫mero de valores en grupos que son mayores que el valor del tercer intervalo. </para>
          <para>
            <b>Frequency</b> omite el texto y las celdas en blanco. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primera matriz o rango de datos.</param>
        <param name="Arg2">Matriz 2: segunda matriz o rango de datos.</param>
        <summary>Devuelve el resultado de una prueba F. Una prueba F devuelve la probabilidad de dos colas de que las varianzas de los argumentos de matriz 1 y matriz 2 no presenten diferencias significativas. Utilice esta funci√≥n para determinar si las varianzas de dos muestras son diferentes. Por ejemplo, dados los resultados de los ex√°menes de escuelas p√∫blicas y privadas, puede comprobar si estas escuelas tienen m√°rgenes de resultados diferentes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> (m√©todo).</para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si el n√∫mero de puntos de datos de los argumentos matriz1 o matriz2 es menor que 2, o si la varianza de matriz1 o matriz2 es cero, <b>FTest</b> devuelve #DIV/0! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Nper: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg3">Pago: pago efectuado cada per√≠odo y que no se puede cambiar durante la vigencia de la anualidad. Generalmente, el argumento de pago incluye el capital y el inter√©s pero ning√∫n otro arancel o impuesto. Si se omite el argumento de pago, se debe incluir el argumento de valor actual.</param>
        <param name="Arg4">Valor actual (Va): valor actual o importe total de una serie de pagos futuros. Si se omite el argumento de valor actual, se considerar√° 0 (cero) y se deber√° incluir el argumento de pago.</param>
        <param name="Arg5">Tipo: n√∫mero 0 √≥ 1 que indica el vencimiento de los pagos. Si tipo se omite, se calcular√° como 0.</param>
        <summary>Devuelve el valor futuro de una inversi√≥n bas√°ndose en pagos peri√≥dicos constantes y en una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Para obtener una descripci√≥n m√°s completa de los argumentos de <b>Fv</b> y para obtener m√°s informaci√≥n sobre las funciones para anualidades, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para>En todos los argumentos, el efectivo que se paga, por ejemplo dep√≥sitos en cuentas de ahorros, se representa con n√∫meros negativos; el efectivo que se recibe, por ejemplo cheques de dividendos, se representa con n√∫meros positivos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Principal: el valor actual.</param>
        <param name="Arg2">Plan de serie de tasas: matriz con las tasas de inter√©s que se van a aplicar.</param>
        <summary>Devuelve el valor futuro de un capital inicial despu√©s de aplicar una serie de tasas de inter√©s compuesto. Utilice FVSCHEDULE para calcular el valor futuro de una inversi√≥n con una tasa variable o ajustable.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los valores de programaci√≥n pueden ser n√∫meros o celdas en blanco; ¬°cualquier otro valor producir√° #VALUE! valor de error para <b>FVSchedule</b>. Se toman las celdas en blanco como ceros (sin inter√©s).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El valor para el que desea calcular Gamma.</param>
        <summary>Devuelve el valor de la funci√≥n Gamma.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>Gamma_Dist</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>Gamma_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria siguiendo una distribuci√≥n gamma. Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica. La distribuci√≥n gamma es de uso corriente en an√°lisis de tiempos de espera.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si los argumentos x, alfa o beta no son num√©ricos, <b>Gamma_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Gamma_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Gamma_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de probabilidad gamma es: 

 </para>
          <para>La figura 1: Funci√≥n de densidad de probabilidad Gamma</para>
          <para></para>
          <para></para>
          <para>La funci√≥n de densidad de probabilidad gamma est√°ndar es:</para>
          <para>La figura 2: Funci√≥n de densidad de probabilidad gamma est√°ndar</para>
          <para></para>
          <para></para>
          <para>Cuando alfa = 1, <b>Gamma_Dist</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>Para un entero positivo n, cuando los argumentos alfa = n/2, beta = 2 y acumulado = <b>Verdadero</b>, <b>Gamma_Dist</b> devuelve (1 - argumentos con n grados de libertad. </para>
          <para>Cuando alfa es un entero positivo, <b>Gamma_Dist</b> tambi√©n conocido como es la distribuci√≥n de Erlang.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n gamma.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>Gamma_Inv</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <summary>Devuelve, la inversa de la distribuci√≥n gamma acumulativa. Si p = GAMMA_DIST(x,...), entonces GAMMA_INV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica.</para>
          <para>Si uno de los argumentos es texto, <b>Gamma_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>Gamma_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Gamma_Inv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>Gamma_Inv</b> busca ese valor x tal que GAMMA_DIST (x, alfa, beta, verdadero) = probabilidad. Por lo tanto, la precisi√≥n de <b>Gamma_Inv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />. <b>Gamma_Inv</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>GammaDist</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>GammaDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria siguiendo una distribuci√≥n gamma. Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica. La distribuci√≥n gamma es de uso corriente en an√°lisis de tiempos de espera.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si los argumentos x, alfa o beta no son num√©ricos, <b>GammaDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>GammaDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>GammaDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de probabilidad gamma es: 

 </para>
          <para>La figura 1: Funci√≥n de densidad de probabilidad Gamma</para>
          <para></para>
          <para></para>
          <para>La funci√≥n de densidad de probabilidad gamma est√°ndar es:</para>
          <para>La figura 2: Funci√≥n de densidad de probabilidad gamma est√°ndar</para>
          <para></para>
          <para></para>
          <para>Cuando alfa = 1, <b>GammaDist</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>Para un entero positivo n, cuando los argumentos alfa = n/2, beta = 2 y acumulado = <b>true</b>, <b>GammaDist</b> devuelve (1 - argumentos con n grados de libertad. </para>
          <para>Cuando alfa es un entero positivo, <b>GammaDist</b> tambi√©n conocido como es la distribuci√≥n de Erlang.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n gamma.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>GammaInv</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <summary>Devuelve, para una probabilidad dada, el valor de la variable aleatoria siguiendo una distribuci√≥n gamma acumulativa. Si p es igual a GAMMADIST(x,...), entonces GAMMAINV(p,...) es igual a x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> (m√©todo).</para>
          <para>Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica.</para>
          <para>Si uno de los argumentos es texto, <b>GammaInv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>GammaInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>GammaInv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>GammaInv</b> busca un valor de x tal que GAMMADIST (x, alfa, beta, verdadero) = probabilidad. Por lo tanto, la precisi√≥n de <b>GammaInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />. <b>GammaInv</b> utiliza una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 64 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular GAMMALN.</param>
        <summary>Devuelve el logaritmo natural de la funci√≥n gamma, G(x).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> (m√©todo).</para>
          <para>Si x no es num√©rico, <b>GammaLn</b> devuelve #VALUE! valor de error. </para>
          <para>Si los argumentos x ‚â§ 0, <b>GammaLn</b> devuelve el #NUM! valor de error. </para>
          <para>El n√∫mero e elevado a la potencia GAMMALN(i), donde i es un entero, devuelve el mismo resultado que (i - 1)!.</para>
          <para>
            <b>GammaLn</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo GammaLn</para>
          <para></para>
          <para></para>
          <para>Donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular GAMMALN.</param>
        <summary>Devuelve el logaritmo natural de la funci√≥n gamma, G(x).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si x no es num√©rico, el m√©todo <b>GammaLn_Precise</b> genera un error.</para>
          <para>Si x ‚â§ 0, el m√©todo <b>GammaLn_Precise</b> genera un error.</para>
          <para>El n√∫mero e elevado a la potencia GAMMALN(i), donde i es un entero, devuelve el mismo resultado que (i - 1)!.</para>
          <para>El m√©todo de c√°lculo de GAMMALN es el siguiente: 

 </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo GammaLn_Precise</para>
          <para></para>
          <para></para>
          <para>Donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El valor para el que se desea calcular la distribuci√≥n.</param>
        <summary>Devuelve 0,5 menor que la distribuci√≥n acumulativa normal est√°ndar.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 29 valores. Si uno de los valores no es un n√∫mero entero, se trunca.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el m√°ximo com√∫n divisor de dos o m√°s n√∫meros enteros. El m√°ximo com√∫n divisor es el mayor n√∫mero entero por el que son divisibles los argumentos de n√∫mero 1 y n√∫mero 2 sin dejar resto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>Gcd</b> devuelve #VALUE! valor de error. </para>
          <para>Si uno de los argumentos es menor que cero, <b>Gcd</b> devuelve el #NUM! valor de error. </para>
          <para>1 divide cualquier valor exactamente.</para>
          <para>Los √∫nicos divisores de un n√∫mero primo son el mismo n√∫mero y 1.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya media se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la media geom√©trica de una matriz o de un rango de datos positivos. Por ejemplo, se puede utilizar GEOMEAN para calcular la tasa de crecimiento promedio, dado un inter√©s compuesto con tasas variables.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si alg√∫n punto de datos ‚â§ 0, <b>GeoMean</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la media geom√©trica es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la media geom√©trica</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se compara con el argumento del valor de referencia.</param>
        <param name="Arg2">Paso - el valor de umbral. Si se omite un valor para el paso, <b>GeStep</b> usa el cero.</param>
        <summary>Devuelve 1 si n√∫mero ‚â• paso; Devuelve 0 (cero) en caso contrario. Utilice esta funci√≥n para filtrar un conjunto de valores. Por ejemplo, si suma varias funciones <b>GeStep</b> , puede calcular el n√∫mero de valores que superan un umbral.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>GeStep</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de valores de x opcionales que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg3">Nuevos valores de x - nuevos valores de x para los que desea que <b>crecimiento</b> devuelva los correspondientes valores de y.</param>
        <param name="Arg4">Constante: valor l√≥gico que especifica si se ha de hacer que la constante b sea igual a 1.</param>
        <summary>Crecimiento exponencial previsto se calcula mediante el uso de los datos existentes. <b>Crecimiento</b> devuelve los valores y para una serie de nuevos valores de x que especifican mediante el uso de valores de x y valores y existentes. Tambi√©n puede usar la funci√≥n de hoja de c√°lculo <b>crecimiento</b> para ajustar una curva exponencial a los valores de x y los valores de y.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si cualquiera de los n√∫meros de valores conocidos de y es 0 o negativo, <b>Growth</b> devuelve el #NUM! valor de error. </para>
          <para>La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un vector (es decir, un rango compuesto por una fila o por una columna).</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>El argumento de nuevos valores de x debe incluir una columna (o una fila) para cada variable independiente, como ocurre con el argumento de valores conocidos de x. Por consiguiente, si el argumento de valores conocidos de y ocupa una sola columna, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de columnas. Si el argumento de valores de y conocidos ocupa una sola fila, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de filas.</para>
          <para>
				Si se omite el argumento de nuevos valores de x, se supone que √©ste es el mismo que el de los valores conocidos de x.
</para>
          <para>
				Si se omiten los argumentos de valores conocidos de x y de nuevos valores de x, se supone que estos son la matriz {1,2,3,...} que tiene el mismo tama√±o que el especificado por el argumento de valores conocidos de y.
</para>
          <para>Si constante es <b>true</b> o se omite, b se calcula normalmente. </para>
          <para>Si constante es <b>false</b>, b se establece igual a 1 y los valores de m se ajustan para que y = m ^ x. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz despu√©s de haber seleccionado el n√∫mero de celdas correcto.</para>
          <para>Cuando especifique una constante matricial para un argumento, como valores conocidos de x, utilice punto y coma para separar los valores de una misma fila y barra inversa para separar las filas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya media se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la media arm√≥nica de un conjunto de datos. La media arm√≥nica es la inversa de la media aritm√©tica de los valores rec√≠procos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La media arm√≥nica es siempre inferior a la media geom√©trica, que a su vez es siempre inferior a la media aritm√©tica.</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si alg√∫n punto de datos ‚â§ 0, <b>HarMean</b> devuelve el #NUM! valor de error. La ecuaci√≥n para la media arm√≥nica es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la media arm√≥nica</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero hexadecimal que se desea convertir. El n√∫mero no puede contener m√°s de 10 d√≠gitos. El bit m√°s significativo del argumento de n√∫mero es el bit del signo (40 bits contados desde la derecha). Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Hex2Bin</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero hexadecimal en binario.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero es negativo, <b>Hex2Bin</b> pasa por alto y devuelve un n√∫mero binario de 10 caracteres. </para>
          <para>Si el argumento de n√∫mero es negativo, no puede ser menor que FFFFFFFE00 y, si es positivo, no puede ser mayor que 1FF.</para>
          <para>Si el n√∫mero no es un n√∫mero hexadecimal v√°lido, <b>Hex2Bin</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Hex2Bin</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. Si el argumento de caracteres no es un n√∫mero entero, se trunca. </para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Hex2Bin</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es negativo, <b>Hex2Bin</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero hexadecimal que se desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (40 bits). El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 39 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <summary>Convierte un n√∫mero hexadecimal en decimal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero no es un n√∫mero hexadecimal v√°lido, <b>Hex2Dec</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero hexadecimal que se desea convertir. El n√∫mero no puede contener m√°s de 10 d√≠gitos. El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 39 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Hex2Oct</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero hexadecimal en octal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero es negativo, <b>Hex2Oct</b> pasa por alto y devuelve un n√∫mero octal de 10 caracteres. </para>
          <para>Si el argumento de n√∫mero es negativo, no puede ser menor que FFE0000000 y, si es positivo, no puede ser mayor que 1FFFFFFF.</para>
          <para>Si el n√∫mero no es un n√∫mero hexadecimal v√°lido, <b>Hex2Oct</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Hex2Oct</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Hex2Oct</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es negativo, <b>Hex2Oct</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor buscado: valor que se debe buscar en la primera fila de la tabla. El argumento de valor buscado puede ser un valor, una referencia o una cadena de texto.</param>
        <param name="Arg2">Matriz de b√∫squeda: tabla de informaci√≥n en la que se buscan los datos. Utilice una referencia a un rango o el nombre de un rango.</param>
        <param name="Arg3">Indicador de filas: el n√∫mero de fila en la matriz de tabla desde la que se devolver√° el valor coincidente. Un indicador de filas de la 1 devuelve el primer valor de la fila en la matriz de tabla, un indicador de filas de 2 devuelve el segundo valor de la fila en la matriz de tabla y as√≠ sucesivamente. Si el indicador de filas es menor que 1, <b>VLOOKUP</b> devuelve #VALUE! valor de error; Si el indicador de filas es mayor que el n√∫mero de filas existentes en, <b>VLOOKUP</b> devuelve el #REF! valor de error.</param>
        <param name="Arg4">Rango de b√∫squeda: valor l√≥gico que especifica si desea que <b>VLOOKUP</b> para encontrar una coincidencia exacta o aproximada. Si <b>es true</b> o se omite, se devuelve una coincidencia aproximada. En otras palabras, si no se encuentra una coincidencia exacta, se devuelve el siguiente valor mayor que sea menor que el argumento de valor_buscado. Si <b>es false</b>, <b>VLOOKUP</b> buscar√° a una coincidencia exacta. Si no se encuentra uno, se devuelve el valor de error # n /.</param>
        <summary>Busca un valor en la fila superior de una tabla o una matriz de valores y, a continuaci√≥n, devuelve un valor en la misma columna desde una fila especificada en la tabla o matriz. Use VLOOKUP cuando los valores de comparaci√≥n se encuentran en una fila en la parte superior de una tabla de datos, y que desea buscar hacia abajo un n√∫mero especificado de filas. Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> cuando los valores de comparaci√≥n se encuentran en una columna a la izquierda de los datos que desea buscar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si <b>VLOOKUP</b> no logra encontrar valor_buscado y ordenado es <b>true</b>, utiliza el mayor valor que es menor que el argumento de valor_buscado. </para>
          <para>Si el argumento de valor_buscado es menor que el valor m√°s peque√±o de la primera fila de la matriz de, <b>VLOOKUP</b> devuelve el valor de error # n/a. </para>
          <para>Si el argumento de rango de b√∫squeda es FALSE y el de valor buscado es texto, se pueden los usar caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*) en el argumento de valor buscado. El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">√âxitos de muestra: n√∫mero de √©xitos en la muestra.</param>
        <param name="Arg2">N√∫mero de muestras: tama√±o de la muestra.</param>
        <param name="Arg3">√âxitos de la poblaci√≥n: n√∫mero de √©xitos en la poblaci√≥n.</param>
        <param name="Arg4">N√∫mero de poblaci√≥n: tama√±o de la poblaci√≥n.</param>
        <param name="Arg5">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el argumento acumulado es <b>true</b>, <b>HypGeom_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de probabilidad bruta.</param>
        <summary>Devuelve la distribuci√≥n hipergeom√©trica. <b>HypGeom_Dist</b> devuelve la probabilidad de un determinado n√∫mero de √©xitos de muestra, dado el tama√±o de la muestra, el √©xitos de la poblaci√≥n y el tama√±o de la poblaci√≥n. Use <b>HypGeom_Dist</b> para problemas con una poblaci√≥n finita, donde cada observaci√≥n es un √©xito o un error, y donde cada subconjunto de un tama√±o dado se elige con probabilidad igual.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>HypGeom_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si muestra_√©xito &lt; 0 o muestra_√©xito es mayor que el menor de n√∫m_de_muestra o poblaci√≥n_√©xito, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento muestra_√©xito es menor que el mayor de 0 o (n√∫m_de_muestra - n√∫m_de_poblaci√≥n + poblaci√≥n_√©xito), <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si n√∫m_de_muestra ‚â§ 0 o si n√∫m_de_muestra &gt; n√∫mero de poblaci√≥n, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si poblaci√≥n_√©xito ‚â§ 0 o poblaci√≥n_√©xito &gt; n√∫mero de poblaci√≥n, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero de poblaci√≥n ‚â§ 0, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la distribuci√≥n hipergeom√©trica es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n hipergeom√©trica</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>x = √©xitos de muestra:</para>
          <para>n = n√∫m_de_muestra</para>
          <para>M = poblaci√≥n_√©xito</para>
          <para>N = n√∫mero de poblaci√≥n</para>
          <para>
            <b>HypGeom_Dist</b> se utiliza en muestreos sin reemplazo, a partir de una poblaci√≥n finita.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√âxitos de muestra: n√∫mero de √©xitos en la muestra.</param>
        <param name="Arg2">N√∫mero de muestras: tama√±o de la muestra.</param>
        <param name="Arg3">√âxitos de la poblaci√≥n: n√∫mero de √©xitos en la poblaci√≥n.</param>
        <param name="Arg4">N√∫mero de poblaci√≥n: tama√±o de la poblaci√≥n.</param>
        <summary>Devuelve la distribuci√≥n hipergeom√©trica. <b>HypGeomDist</b> devuelve la probabilidad de un determinado n√∫mero de √©xitos de muestra, dado el tama√±o de la muestra, el √©xitos de la poblaci√≥n y el tama√±o de la poblaci√≥n. Use <b>HypGeomDist</b> para problemas con una poblaci√≥n finita, donde cada observaci√≥n es un √©xito o un error, y donde cada subconjunto de un tama√±o dado se elige con probabilidad igual.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>HypGeomDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si muestra_√©xito &lt; 0 o muestra_√©xito es mayor que el menor de n√∫m_de_muestra o poblaci√≥n_√©xito, <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento muestra_√©xito es menor que el mayor de 0 o (n√∫m_de_muestra - n√∫m_de_poblaci√≥n + poblaci√≥n_√©xito), <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si n√∫m_de_muestra ‚â§ 0 o si n√∫m_de_muestra &gt; n√∫mero de poblaci√≥n, HYPGEOMDIST devuelve el #NUM! valor de error. </para>
          <para>Si poblaci√≥n_√©xito ‚â§ 0 o poblaci√≥n_√©xito &gt; n√∫mero de poblaci√≥n, <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero de poblaci√≥n ‚â§ 0, <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la distribuci√≥n hipergeom√©trica es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n hipergeom√©trica</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>x = √©xitos de muestra:</para>
          <para>n = n√∫m_de_muestra</para>
          <para>M = poblaci√≥n_√©xito</para>
          <para>N = n√∫mero de poblaci√≥n</para>
          <para>
            <b>HypGeomDist</b> se utiliza en muestreos sin reemplazo, a partir de una poblaci√≥n finita.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: argumento en el que se busca un error.</param>
        <param name="Arg2">Valor en caso de error: valor que devolver si la f√≥rmula se eval√∫a como un error. Se eval√∫an los siguientes tipos de error: #N/A, #¬°VALOR!, #¬°REF!, #¬°DIV/0!, #¬°NUM!, #¬øNOMBRE? o #¬°NULO!</param>
        <summary>Devuelve un valor que especifica si una f√≥rmula da como resultado un error; de lo contrario, devuelve el resultado de la f√≥rmula. Utilice la funci√≥n <b>IfError</b> para interceptar y controlar los errores en una f√≥rmula.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si los argumentos de valor o es una celda vac√≠a, <b>IfError</b> los trata como un valor de cadena vac√≠a (""). </para>
          <para>Si el valor es una f√≥rmula de matriz, <b>IfError</b> devuelve una matriz de resultados para cada celda del rango especificado en el valor. Vea el segundo ejemplo siguiente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">valor: cualquier valor o expresi√≥n o referencia.</param>
        <param name="Arg2">value_if_na: cualquier valor o expresi√≥n o referencia.</param>
        <summary>Devuelve el valor que especifica si la expresi√≥n se resuelve en # n/a, en caso contrario, devuelve el resultado de la expresi√≥n.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo valor absoluto se desea calcular.</param>
        <summary>Devuelve el valor absoluto (m√≥dulo) de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El valor absoluto de un n√∫mero complejo es: 

 </para>
          <para>La figura 1: La ecuaci√≥n para el valor absoluto de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>z = x + yi</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo coeficiente imaginario se desea calcular.</param>
        <summary>Devuelve el coeficiente de la parte imaginaria de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo es un n√∫mero complejo que se desea obtener el argumento theta.</param>
        <summary>Devuelve el argumento (theta), un √°ngulo expresado en radianes, tal que:</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>
            <b>ImArgument</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo ImArgument</para>
          <para></para>
          <para></para>
          <para>Donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>y</para>
          <para>z = x + yi</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo conjugado se desea calcular.</param>
        <summary>Devuelve la conjugada compleja de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>La conjugada de un n√∫mero complejo es: </para>
          <para>La figura 1: La ecuaci√≥n para el conjugado de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo coseno se desea obtener.</param>
        <summary>Devuelve el coseno de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>Si n√∫mero complejo es un valor l√≥gico, <b>ImCos</b> devuelve #VALUE! valor de error. </para>
          <para>El coseno de un n√∫mero complejo es: 

 </para>
          <para>En la figura 1: Coseno de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo cuyo coseno hiperb√≥lico se desea obtener.</param>
        <summary>Devuelve el coseno hiperb√≥lico de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo que se desea la cotangente.</param>
        <summary>Devuelve la cotangente de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo que se desea la cosecante.</param>
        <summary>Devuelve la cosecante de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo que se desea la cosecante hiperb√≥lica.</param>
        <summary>Devuelve la cosecante hiperb√≥lica de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1: n√∫mero complejo que se utilizar√° como numerador o dividendo en la operaci√≥n.</param>
        <param name="Arg2">N√∫mero complejo 2: n√∫mero complejo que se usar√° como denominador o divisor en la operaci√≥n.</param>
        <summary>Devuelve el cociente entre dos n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El cociente de dos n√∫meros complejos es: 

 </para>
          <para>En la figura 1: Cociente de dos n√∫meros complejos</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuya funci√≥n exponencial se desea calcular.</param>
        <summary>Devuelve en forma algebraica el resultado de la funci√≥n exponencial de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>La funci√≥n exponencial de un n√∫mero complejo es: 

 </para>
          <para>En la figura 1: Exponencial de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo logaritmo natural (neperiano) se desea obtener.</param>
        <summary>Devuelve el logaritmo natural (neperiano) de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El logaritmo natural (neperiano) de un n√∫mero complejo es: 

 </para>
          <para>La figura 1: logaritmo Natural de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo logaritmo com√∫n (en base 10) se desea obtener.</param>
        <summary>Devuelve el logaritmo com√∫n (en base 10) de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El logaritmo com√∫n de un n√∫mero complejo se puede calcular a partir del logaritmo natural (neperiano) como se indica a continuaci√≥n: 

 </para>
          <para>La figura 1: La ecuaci√≥n para el logaritmo com√∫n de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: un n√∫mero complejo cuyo logaritmo en base 2 se desea obtener.</param>
        <summary>Devuelve el logaritmo en base 2 de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El logaritmo en base 2 de un n√∫mero complejo se puede calcular a partir del logaritmo natural (neperiano) como se indica a continuaci√≥n: 

 </para>
          <para>La figura 1: La ecuaci√≥n para el logaritmo en base 2 de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo que se desea elevar a una potencia.</param>
        <param name="Arg2">N√∫mero: potencia a la cual se desea elevar el n√∫mero complejo.</param>
        <summary>Devuelve el resultado de un n√∫mero complejo elevado a una potencia entera con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>Si n√∫mero no es num√©rico, <b>ImPower</b> devuelve #VALUE! valor de error. </para>
          <para>El argumento de n√∫mero puede ser un n√∫mero entero, fraccionario o negativo.</para>
          <para>Un n√∫mero complejo elevado a una potencia se calcula como se indica a continuaci√≥n: 

 </para>
          <para>La figura 1: N√∫mero ecuaci√≥n complejo elevado a una potencia</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>Y en:</para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>Y en:</para>
          <para>La figura 4: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1; n√∫mero complejo2;... son de 1 a 29 n√∫meros complejos que se deben multiplicar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el producto de 2 a 29 n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El producto de dos n√∫meros complejos es:</para>
          <para>En la figura 1: Producto de dos n√∫meros complejos</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo coeficiente real se desea calcular.</param>
        <summary>Devuelve el coeficiente de la parte real de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo que se desea la cosecante hiperb√≥lica.</param>
        <summary>Devuelve la cosecante hiperb√≥lica de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo que se desea la secante hiperb√≥lica.</param>
        <summary>Devuelve la secante de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo seno se desea obtener.</param>
        <summary>Devuelve el seno de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El seno de un n√∫mero complejo es: 

 </para>
          <para>En la figura 1: Seno de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea que el seno hiperb√≥lico.</param>
        <summary>Devuelve el seno hiperb√≥lico de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuya ra√≠z cuadrada se desea obtener.</param>
        <summary>Devuelve la ra√≠z cuadrada de un n√∫mero complejo x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. La ra√≠z cuadrada de un n√∫mero complejo es: 

 </para>
          <para>La figura 1: ra√≠z cuadrada de un n√∫mero complejo</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>Y en:</para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>Y en:</para>
          <para>La figura 4: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1: n√∫mero complejo del que se resta el argumento del n√∫mero complejo 2.</param>
        <param name="Arg2">N√∫mero complejo 2: n√∫mero complejo que se resta del n√∫mero complejo 1.</param>
        <summary>Devuelve la diferencia de dos n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo.</para>
          <para>La diferencia de dos n√∫meros complejos es: 

</para>
          <para>En la figura 1: Diferencia de dos n√∫meros complejos</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1, n√∫mero complejo 2,...: de 1 a 29 n√∫meros complejos que se deben sumar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la suma de dos o m√°s n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Uso <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>La suma de dos n√∫meros complejos es: 

</para>
          <para>En la figura 1: Suma de dos n√∫meros complejos</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo que se desea la tangente.</param>
        <summary>Devuelve la tangente de un n√∫mero complejo.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz o referencia: rango de celdas o constante matricial. En el caso de referencias, es la referencia a uno o m√°s rangos de celdas.</param>
        <param name="Arg2">N√∫mero de fila: selecciona la fila de una matriz desde la que devolver un valor. Si se omite el argumento de n√∫mero de fila, se requiere un argumento de n√∫mero de columna. En el caso de referencias, es el n√∫mero de la fila desde la que devolver una referencia.</param>
        <param name="Arg3">N√∫mero de columna: selecciona la columna de una matriz desde la que devolver un valor. Si se omite el argumento de n√∫mero de columna, se debe utilizar el argumento de n√∫mero de fila. En el caso de referencias, es el n√∫mero de la columna desde la que devolver una referencia.</param>
        <param name="Arg4">N√∫mero de √°rea: s√≥lo se utiliza al devolver referencias. Selecciona un rango en referencia desde el que se va a devolver la intersecci√≥n de fila y el n√∫mero de columna. La primera √°rea seleccionada o introducida recibe el n√∫mero 1, el segundo es 2 y as√≠ sucesivamente. Si se omite n√∫m_√°rea, <b>Indice</b> usa √°rea 1.</param>
        <summary>Devuelve un valor o la referencia a un valor dentro de una tabla o rango. Hay dos formas de la funci√≥n de <b>√≠ndice</b> : la forma matricial y el formulario de referencia.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Forma matricial</para>
          <para>Devuelve el valor de un elemento de una tabla o matriz seleccionado por los √≠ndices de n√∫mero de fila y de columna.</para>
          <para>Use la forma matricial si el primer argumento para <b>Index</b> es una constante matricial.</para>
          <para>Si se utilizan argumentos fila y de columna, <b>Index</b> devuelve el valor en la celda situada en la intersecci√≥n de fila y el n√∫mero de columna. </para>
          <para>Si establece en 0 (cero) de fila o n√∫mero de columna, <b>Index</b> devuelve la matriz de valores para toda la columna o fila, respectivamente. Para utilizar valores devueltos como una matriz, introduzca la funci√≥n <b>Indice</b> como una f√≥rmula de matriz en un rango horizontal de celdas para una fila y en un rango vertical de celdas para una columna. Para escribir una f√≥rmula de matriz, presione CTRL + MAY√öS + ENTRAR. </para>
          <para>N√∫mero de fila y deben apuntar a una celda contenida en matriz; ¬°de lo contrario, <b>Index</b> devuelve el #REF! valor de error. </para>
          <para>Forma de referencia</para>
          <para>Devuelve la referencia de la celda ubicada en la intersecci√≥n de una fila y de una columna determinadas. Si el argumento de la referencia es una selecci√≥n m√∫ltiple, se podr√° elegir la selecci√≥n en la que se buscar√° la referencia. Si cada √°rea del argumento de referencia contiene una sola fila o columna, el argumento de n√∫mero de fila o n√∫mero de columna, respectivamente, es opcional. Por ejemplo, para un argumento de referencia con una sola fila, utilice INDEX(reference,,column_num).</para>
          <para>Despu√©s de referencia y n√∫mero de √°rea han seleccionado un rango determinado, el n√∫mero de fila y seleccionan una celda determinada: n√∫mero de fila 1 es la primera fila en el intervalo, n√∫mero de columna 1 es la primera columna y as√≠ sucesivamente. La referencia devuelta por <b>√≠ndice</b> es la intersecci√≥n de fila y el n√∫mero de columna. </para>
          <para>Si establece en 0 (cero) de fila o n√∫mero de columna, <b>Index</b> devuelve la referencia para toda la columna o fila, respectivamente.</para>
          <para>N√∫mero de √°rea, n√∫mero de columna y fila deben apuntar a una celda contenida en la referencia; ¬°de lo contrario, <b>Index</b> devuelve el #REF! valor de error. Si se omiten el n√∫mero de fila y, <b>Index</b> devuelve el √°rea de referencia especificado por el n√∫mero de √°rea. </para>
          <para>El resultado de la funci√≥n de <b>√≠ndice</b> es una referencia y se interpreta como tal por otras f√≥rmulas. Dependiendo de la f√≥rmula, se puede usar el valor devuelto del √≠ndice como una referencia o como un valor. Por ejemplo, la celda de la f√≥rmula ("width", INDEX (a1: B2, 1, 2)) es equivalente a CELL("width",B1). La funci√≥n celda utiliza el valor devuelto del √≠ndice como una referencia de celda. Por otro lado, una f√≥rmula como 2*INDEX(A1:B2,1,2) traduce el valor devuelto de <b>√≠ndice</b> en el n√∫mero en la celda B1.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de observaciones o datos dependientes.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de observaciones o datos independientes.</param>
        <summary>Calcula el punto en el que una l√≠nea intersecar√° el eje y mediante el uso de valores de x y los valores de y. El punto de intersecci√≥n se basa en una l√≠nea de regresi√≥n optimizada trazada a trav√©s de los valores conocidos de x y conoce los valores de y. Use la funci√≥n <b>Intercept</b> cuando desea determinar el valor de la variable dependiente cuando la variable independiente es 0 (cero). Por ejemplo, puede usar la funci√≥n <b>Intercept</b> para predecir el√©ctrico resistencia de un metal a 0 ¬∞ C si los puntos de datos se han tomado a temperatura ambiente y posterior.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los valores conocidos de y y de valores conocidos de x contienen un n√∫mero diferente de puntos de datos o no contienen ninguno, <b>Intercept</b> devuelve el valor de error # n/a. </para>
          <para>La ecuaci√≥n que representa la intersecci√≥n de la l√≠nea de regresi√≥n, a, es: 

</para>
          <para>En la figura 1: Ecuaci√≥n que representa la intersecci√≥n de la l√≠nea de regresi√≥n</para>
          <para></para>
          <para></para>
          <para>donde la pendiente, b, se calcula como:</para>
          <para>La figura 2: Ecuaci√≥n para la pendiente</para>
          <para></para>
          <para></para>
          <para>y donde x e y son las medias de muestra AVERAGE(valores conocidos de x) y AVERAGE(valores conocidos de y).</para>
          <para>El algoritmo subyacente utilizado en la <b>Intercept</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> funciones es diferente del algoritmo subyacente utilizado en la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> (funci√≥n). La diferencia entre estos algoritmos puede producir resultados diferentes cuando datos est√°n pendiente e INTERSECCION. Por ejemplo, si los puntos de datos del argumento de los valores conocidos de y son 0 y los puntos de datos del argumento de x son 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Intercept</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> devolver un #DIV/0! error. El <b>interceptar</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> algoritmo est√° dise√±ado para buscar una y solamente una respuesta, y en este caso puede haber m√°s de una respuesta. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />Devuelve un valor de 0. El <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> algoritmo est√° dise√±ado para devolver resultados razonables para los datos colineales y, en este caso se puede encontrar al menos una respuesta.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Inversi√≥n: cantidad de dinero que se ha invertido en el valor burs√°til.</param>
        <param name="Arg4">Valor de amortizaci√≥n: cantidad que se recibir√° en la fecha de vencimiento.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la tasa de inter√©s para la inversi√≥n total en un valor burs√°til.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>IntRate</b> devuelve #VALUE! valor de error. </para>
          <para>Si inversi√≥n ‚â§ 0 o si rescate son menores que 0, <b>IntRate</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>IntRate</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>IntRate</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>IntRate</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo tasa.int</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en un a√±o, dependiendo de la base anual.</para>
          <para>DIM = n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Per√≠odo: per√≠odo para el que se desea calcular el inter√©s y que debe estar entre 1 y el valor del argumento de n√∫mero de per√≠odos.</param>
        <param name="Arg3">Nper: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg4">Va: valor actual o importe total de una serie de pagos futuros.</param>
        <param name="Arg5">Vf: valor futuro o un saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento de vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0).</param>
        <param name="Arg6">Tipo: n√∫mero 0 √≥ 1 que indica el vencimiento de los pagos. Si tipo se omite, se calcular√° como 0.</param>
        <summary>Devuelve el inter√©s pagado en un per√≠odo espec√≠fico por una inversi√≥n bas√°ndose en pagos peri√≥dicos constantes y en una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos. </para>
          <para>En todos los argumentos, el efectivo que se paga, por ejemplo dep√≥sitos en cuentas de ahorros, se representa con n√∫meros negativos; el efectivo que se recibe, por ejemplo cheques de dividendos, se representa con n√∫meros positivos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores: matriz o referencia a celdas que contienen los n√∫meros para los cuales se desea calcular la tasa interna de retorno.</param>
        <param name="Arg2">Estimaci√≥n: n√∫mero que el usuario estima que se aproximar√° al resultado de IRR.</param>
        <summary>Devuelve la tasa interna de retorno de los flujos de caja representados por los n√∫meros del argumento de valores. Estos flujos de caja no tienen por qu√© ser constantes, como es el caso en una anualidad. Sin embargo, los flujos de caja deben producirse a intervalos regulares, como meses o a√±os. La tasa interna de retorno equivale a la tasa de inter√©s producida por un proyecto de inversi√≥n con pagos (valores negativos) e ingresos (valores positivos) que tienen lugar en per√≠odos regulares.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El argumento de valores debe contener al menos un valor positivo y uno negativo para calcular la tasa interna de retorno.</para>
          <para>IRR interpreta el orden de los flujos de caja siguiendo el orden del argumento de valores. Aseg√∫rese de escribir los valores de los pagos e ingresos en el orden correcto.</para>
          <para>Si un argumento matricial o de referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto.</para>
          <para>Microsoft Excel utiliza una t√©cnica iterativa para calcular <b>Irr</b>. A partir de estimaci√≥n, <b>Irr</b> recorre el c√°lculo hasta que el resultado es preciso 0,00001 por ciento. Si <b>Irr</b> no puede encontrar un resultado despu√©s de 20 intentos, el #NUM! se devuelve el valor de error. </para>
          <para>En la mayor√≠a de los casos no es necesario proporcionar el argumento estimar para el c√°lculo de <b>Irr</b> . Si se omite el argumento de estimaci√≥n, se supone que es 0,1 (10 por ciento). </para>
          <para>Si <b>Irr</b> devuelve el #NUM! Error de valor, o si el resultado no es aproxima, vuelva a intentarlo con un valor diferente para el argumento estimar.</para>
          <para>
            <b>IRR</b> se relaciona estrechamente con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, el neto presente el valor de funci√≥n. La tasa de retorno calculada por <b>Irr</b> es la tasa de inter√©s correspondiente a un 0 (cero) valor presente neto. La f√≥rmula siguiente demuestra c√≥mo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y <b>Irr</b> est√°n relacionadas con:</para>
          <para>NPV(IRR(B1:B6),B1:B6) es igual a 3, 60E-08 [dentro de la exactitud del c√°lculo <b>TIR</b> , el valor 3, 60E-08 es en efecto 0 (cero).]</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia a cualquier valor de error excepto # n/a.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia a cualquier valor de error (# n/a, #VALUE!, #REF!, # ¬°DIV/0!, #NUM!, #NAME? o #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor es par.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referencia a la celda que desea probar. Referencia puede ser una referencia de celda, una f√≥rmula o un nombre que hace referencia a una celda.</param>
        <summary>Comprueba si una referencia es una celda que contiene una f√≥rmula y devuelve <b>TRUE</b> o <b>FALSE</b>.</summary>
        <returns>
          <b>BOOL</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia a un valor l√≥gico.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia al valor de error #N/A (valor no disponible).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia a cualquier elemento que no es de texto. (Tenga en cuenta que esta funci√≥n devuelve <b>true</b> si el valor hace referencia a una celda en blanco.)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia a un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo opcional a qu√© n√∫mero es que se desea redondear. Si se omite el argumento cifra_significativa, su valor predeterminado es 1.</param>
        <summary>Devuelve un n√∫mero redondeado al entero mayor m√°s cercano o al m√∫ltiplo m√°s cercano de la cifra significativa.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor es impar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">C√≥digo de fecha y hora utilizado por Excel para el c√°lculo de fecha y hora.</param>
        <param name="Arg2">Este argumento no est√° disponible en la funci√≥n.</param>
        <summary>Devuelve el n√∫mero de semana ISO del a√±o de una fecha determinada.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>
          <para>Devuelve el n√∫mero ordinal de la semana del calendario [ISO8601] en el a√±o en la fecha dada. ISO 8601 define la semana del calendario como un intervalo de tiempo de siete d√≠as de calendario, empezando por un lunes y la primera semana del calendario de un a√±o como que incluye el primer jueves de ese a√±o.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s de la inversi√≥n.</param>
        <param name="Arg2">Per√≠odo: per√≠odo para el que se desea calcular el inter√©s y que debe estar comprendido entre 1 y el valor del argumento de n√∫mero de per√≠odos.</param>
        <param name="Arg3">N√∫mero de per√≠odos: n√∫mero total de per√≠odos de pago de la inversi√≥n.</param>
        <param name="Arg4">Valor actual: valor actual de la inversi√≥n. En el caso de un pr√©stamo, el argumento de valor actual es la cantidad del pr√©stamo.</param>
        <summary>Calcula el inter√©s pagado durante un per√≠odo espec√≠fico de una inversi√≥n. Esta funci√≥n se incluye para proporcionar compatibilidad con Lotus 1-2-3.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con una tasa de inter√©s anual del 12 por ciento, use 12%/12 para el argumento de tasa y 4*12 para el argumento de n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para>Para todos los argumentos, el dinero que desembolse, como dep√≥sitos en una cuenta de ahorros u otros reintegrados, se representa con n√∫meros negativos, mientras que el dinero recibido, como cheques de dividendos y otros dep√≥sitos, se representa con n√∫meros positivos.</para>
          <para>Para obtener informaci√≥n adicional acerca de las funciones financieras, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> (funci√≥n).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> dependiendo de si el valor hace referencia a texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor de las funciones es no se convierten. Por ejemplo, en la mayor√≠a otras funciones donde se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte en un valor de texto y el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> funci√≥n devuelve <b>false</b>. </para>
          <para>Las funciones es son √∫tiles en las f√≥rmulas para comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n si, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2,...: de 1 a 30 argumentos cuya curtosis desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la curtosis de un conjunto de datos. La curtosis caracteriza la elevaci√≥n o achatamiento relativos de una distribuci√≥n en comparaci√≥n con la distribuci√≥n normal. Una curtosis positiva indica una distribuci√≥n relativamente elevada. Una curtosis negativa indica una distribuci√≥n relativamente achatada.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si hay menos de cuatro puntos de datos, o si la desviaci√≥n est√°ndar de la muestra es igual a cero, <b>Kurt</b> devuelve el #DIV/0! valor de error. </para>
          <para>La curtosis se define del modo siguiente: 

 </para>
          <para>La figura 1: Ecuaci√≥n de curtosis</para>
          <para></para>
          <para></para>
          <para>donde s es la desviaci√≥n est√°ndar de muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos cuyo k-√©simo mayor valor se desea determinar.</param>
        <param name="Arg2">K: posici√≥n, dentro de la matriz o del rango de celdas, de los datos que se van a devolver, determinada a partir del mayor de los valores.</param>
        <summary>Devuelve el k-√©simo mayor valor en un conjunto de datos. Puede usar esta funci√≥n para seleccionar un valor en funci√≥n de su posici√≥n relativa. Por ejemplo, puede utilizar <b>Large</b> para devolver la mejor, segunda m√°s alta o puntuaci√≥n tercer lugar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠a, <b>Large</b> devuelve el #NUM! valor de error. </para>
          <para>Si se√±ala k ‚â§ 0 o si k es mayor que el n√∫mero de datos, <b>Large</b> devuelve el #NUM! valor de error.</para>
          <para>Si n es el n√∫mero de puntos de datos en el rango, LARGE(matriz,1) devuelve el valor mayor y LARGE(matriz,n) devuelve el valor menor.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, n√∫mero2,...: de 1 a 29 valores para los que desea calcular el m√≠nimo com√∫n m√∫ltiplo. Si el valor no es un entero, se trunca.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el m√≠nimo com√∫n m√∫ltiplo de n√∫meros enteros. El m√≠nimo com√∫n m√∫ltiplo es el entero positivo menor que es m√∫ltiplo de todos los argumentos enteros n√∫mero1, n√∫mero2, etc. Utilice LCM para agregar fracciones con diferentes denominadores.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>Lcm</b> devuelve #VALUE! valor de error. </para>
          <para>Si uno de los argumentos es menor que cero, <b>Lcm</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores conocidos de y en la relaci√≥n y = mx + b.</param>
        <param name="Arg2">Valores conocidos de x: conjunto opcional de valores de x que se conocen en la relaci√≥n y = mx+b.</param>
        <param name="Arg3">Constante: valor l√≥gico que especifica si se ha de hacer que la constante b sea igual a 0.</param>
        <param name="Arg4">Estad√≠stica: valor l√≥gico que especifica si se van a devolver estad√≠sticas de regresi√≥n adicionales.</param>
        <summary>Calcula el valor estad√≠stico de una l√≠nea mediante el m√©todo de los "m√≠nimos cuadrados" con el fin de calcular la l√≠nea recta que mejor se adapta a los datos, y devuelve una matriz que describe la l√≠nea. Como esta funci√≥n devuelve una matriz de valores, debe especificarse como una f√≥rmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La ecuaci√≥n de la l√≠nea es la siguiente:</para>
          <para>y = mx + b o</para>
          <para>y = m1x1 + m2x2 + ... + b (si hay varios rangos de valores x)</para>
          <para>donde el valor de y dependiente es una funci√≥n de los valores de x independientes. Los valores de m son coeficientes que corresponden a cada valor de x y b es un valor constante. Tenga en cuenta que y, x y m pueden ser vectores. La matriz que devuelve <b>LinEst</b> es {mn, mn-1,..., m1, b}. <b>LinEst</b> puede devolver tambi√©n estad√≠sticas de regresi√≥n adicionales.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un vector (es decir, un rango compuesto por una fila o por una columna).</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>Si constante es <b>true</b> o se omite, b se calcula normalmente. </para>
          <para>Si argumento de constante es <b>false</b>, b se establece igual a 0 y los valores de m se ajustan para encajar en y = mx. </para>
          <para>Si el argumento de estad√≠stica es <b>truuue</b>, <b>LinEst</b> devuelve las estad√≠sticas de regresi√≥n adicionales, por lo que la matriz devuelta es {mn, mn-1,..., m1, b; sen, sen-1,..., se1, seb; r2, sey; F, df; ssreg, ssresid}. </para>
          <para>Si el argumento de estad√≠stica es <b>false</b> o se omite, <b>LinEst</b> devuelve s√≥lo los coeficientes m y la constante b. </para>
          <para>Las estad√≠sticas de regresi√≥n adicionales son las siguientes:</para>
          <list type="table">
            <item>
              <term>Se1, se2,..., sen</term>
              <description>Valores de error t√≠picos para los coeficientes m1,m2,...,mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>El valor de error t√≠pico para la constante b (seb = #N/A cuando el argumento de constante es <b>false</b>).</description>
            </item>
            <item>
              <term>R2</term>
              <description>El coeficiente de determinaci√≥n. Compara los valores estimados y reales y los rangos con valor comprendido entre 0 y 1. Si es 1, hay una correlaci√≥n perfecta en la muestra: no hay ninguna diferencia entre el valor y estimado y el valor y real. En el otro extremo, si el coeficiente de determinaci√≥n es 0, la ecuaci√≥n de regresi√≥n no es √∫til para predecir un valor y. </description>
            </item>
            <item>
              <term>sey</term>
              <description>Error t√≠pico para el valor previsto de y.</description>
            </item>
            <item>
              <term>F</term>
              <description>Valor estad√≠stico de F o valor observado de F. Utilice el valor estad√≠stico de F para determinar si la relaci√≥n observada entre las variables dependientes e independientes se produce al azar.</description>
            </item>
            <item>
              <term>df</term>
              <description>Grados de libertad. Utilice los grados de libertad para ayudarle a encontrar valores F cr√≠ticos en una tabla estad√≠stica. Compare los valores que se encuentre en la tabla con la estad√≠stica F devuelven por <b>LinEst</b> para determinar una confianza de niveles para el modelo. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>Suma de regresi√≥n de cuadrados.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>La suma residual de los cuadrados.</description>
            </item>
          </list>
          <para>En la siguiente ilustraci√≥n se muestra el orden en que se devuelven las estad√≠sticas de regresi√≥n adicionales.</para>
          <para>En la figura 1: hoja de c√°lculo</para>
          <para></para>
          <para></para>
          <para>Puede describir cualquier l√≠nea recta con la pendiente y la intersecci√≥n de y: </para>
          <para>Pendiente (m):</para>
          <para>
Para buscar la pendiente de una l√≠nea, frecuentemente indicada por m, tome dos puntos de la l√≠nea, (x 1, y1) y (x2, y2); la pendiente es igual a (y2 - y1) / (x 2 - x 1).</para>
          <para>Intersecci√≥n de Y (b):</para>
          <para>
La intersecci√≥n de y de una l√≠nea, frecuentemente indicada por b, es el valor de y en el punto donde la l√≠nea cruza el eje x.</para>
          <para>La ecuaci√≥n de una l√≠nea recta es y = mx + b. Una vez que sepa los valores de m y b, se puede calcular cualquier punto de la l√≠nea con conectar el valor y o x en la ecuaci√≥n. Tambi√©n puede usar el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> (funci√≥n).</para>
          <para>Cuando tenga s√≥lo una variable x independiente, puede obtener los valores de pendiente e intersecci√≥n de y directamente mediante las f√≥rmulas siguientes: </para>
          <para>Pendiente:</para>
          <para>
=Index(LINEST(known_y's,known_x's),1)</para>
          <para>Intersecci√≥n de Y:</para>
          <para>
=Index(LINEST(known_y's,known_x's),2)</para>
          <para>La exactitud de la l√≠nea calculada por <b>LineEst</b> depende del grado de dispersi√≥n de los datos. Cuanto m√°s lineales los datos, m√°s precisa el modelo de <b>LineEst</b> . <b>LineEst</b> utiliza el m√©todo de los m√≠nimos cuadrados para determinar el mejor ajuste para los datos. Cuando tenga s√≥lo una variable x independiente, los c√°lculos de m y b se basan en las f√≥rmulas siguientes: </para>
          <para>La figura 2: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de muestra, es decir, x = AVERAGE(valores conocidos de x) e y = AVERAGE(valores conocidos de y).</para>
          <para>La curva-ajuste de l√≠nea y funciones <b>LineEst</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> puede calcular la mejor l√≠nea recta o curva exponencial que se adapta a sus datos. Sin embargo, se debe decidir cu√°l de los dos resultados que mejor se adapta a sus datos. Puede calcular Trend para una l√≠nea recta o crecimiento (valores conocidos de y, valores conocidos de x) para una curva exponencial. Estas funciones, sin el argumento nueva_matriz_x, devuelven una matriz de valores de y previstos a lo largo de la l√≠nea o curva en los puntos de datos reales. A continuaci√≥n, puede comparar los valores previstos con los valores reales. Es posible que desee gr√°fico con ambos para realizar una comparaci√≥n visual. </para>
          <para>En el an√°lisis de regresi√≥n, Microsoft Excel calcula para cada punto el cuadrado de la diferencia entre el valor y estimado para ese punto y su valor y real. La suma de estas diferencias cuadradas se denomina la suma residual de los cuadrados, ssresid. Microsoft Excel, a continuaci√≥n, se calcula la suma total de los cuadrados, sstotal. Cuando const = <b>Verdadero</b>, o se omite, la suma total de los cuadrados es la suma de los cuadrados de las diferencias entre los valores y reales y la media de los valores de y. Cuando const = <b>Falso</b>, la suma total de los cuadrados es la suma de los cuadrados de los valores de y reales (sin restar el valor y medio de cada valor y individual). A continuaci√≥n, suma de regresi√≥n de cuadrados, ssreg, se puede encontrar en: ssreg = sstotal - ssresid. Cuanto menor sea la suma residual de los cuadrados, comparada con la suma total de los cuadrados, mayor ser√° el valor del coeficiente de determinaci√≥n, r2, que es un indicador de c√≥mo la ecuaci√≥n resultante del an√°lisis de regresi√≥n explica la relaci√≥n entre el variables. R2 es igual a ssreg/sstotal. </para>
          <para>En algunos casos, una o varias de las columnas X (supongamos que Y y x est√°n en columnas) no pueden tener ning√∫n valor predictivo adicional en presencia de las otras columnas X. En otras palabras, eliminar una o varias columnas X puede producir valores Y pronosticados que son igualmente exactos. En ese caso se deben omitir estas columnas X redundantes del modelo de regresi√≥n. Este fen√≥meno se denomina "colinealidad" porque cualquier redundantes columna X se puede expresar como una suma de m√∫ltiplos de las columnas X no redundantes. <b>LinEst</b> comprueba la colinealidad y quita cualquier redundantes X columnas del modelo de regresi√≥n cuando las identifica. Pueden reconocer las columnas X eliminadas en los resultados <b>devueltos por LinEst</b> como tener coeficientes 0 as√≠ como 0 ingenieros de sistemas. Si una o m√°s columnas se quitan como redundantes, a continuaci√≥n, df se ve afectado porque df depende del n√∫mero de columnas X realmente utilizadas con fines de predicci√≥n. Si se cambia df porque redundantes se quitan columnas X, los valores de sey y F tambi√©n se ven afectados. Colinealidad deber√≠a ser relativamente poco frecuente en la pr√°ctica. Sin embargo, un caso donde lo m√°s probable es que surjan es cuando algunas columnas X contienen s√≥lo 0 y 1 como indicadores de si un sujeto en un experimento es o no es un miembro de un grupo determinado. Si const = <b>true</b> o se omite, <b>LinEst</b> inserta una columna X adicional de todos los 1 para representar la intersecci√≥n. Si tiene una columna con un 1 para cada sujeto si es var√≥n o 0 si no, y tambi√©n tiene una columna con un 1 para cada sujeto si femenino o 0 si no es as√≠, esta √∫ltima columna es redundante porque las entradas se pueden obtener restando la entrada en el "indicador masculino" columna de la entrada en la columna adicional de todos los valores 1 agregados por <b>LineEst</b>. </para>
          <para>df se calcula como se indica a continuaci√≥n cuando se quita ninguna columna X del modelo debido a la colinealidad: si hay k columnas de valores conocidos de y const = <b>true</b> o se omite, entonces df = n ‚Äì k ‚Äì 1. Si const = <b>Falso</b>, entonces df = n - k. En ambos casos, cada columna X eliminada debido a la colinealidad aumenta df en 1. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz. Cuando especifique una constante matricial, como valores conocidos como un argumento, utilice comas para separar los valores de la misma fila y puntos y coma para separar las filas. Caracteres separadores pueden ser diferentes seg√∫n la configuraci√≥n de configuraci√≥n regional en Configuraci√≥n Regional y de idioma en el Panel de Control. </para>
          <para>Tenga en cuenta que los valores de y previstos por la ecuaci√≥n de regresi√≥n puede que no sean v√°lidos si quedan fuera del rango de los valores de y utilizados para determinar la ecuaci√≥n. El algoritmo subyacente utilizado en la funci√≥n <b>LinEst</b> es diferente del algoritmo subyacente utilizado en la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> funciones. La diferencia entre estos algoritmos puede producir resultados diferentes cuando datos est√°n pendiente e INTERSECCION. Por ejemplo, si los puntos de datos del argumento de los valores conocidos de y son 0 y los puntos de datos del argumento de x son 1: </para>
          <para>
            <b>LineEst</b> devuelve un valor de 0. El algoritmo de <b>LinEst</b> est√° dise√±ado para devolver resultados razonables para los datos colineales y, en este caso se puede encontrar al menos una respuesta. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> devolver un #DIV/0! error. El <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> algoritmo est√° dise√±ado para buscar una y solamente una respuesta, y en este caso puede haber m√°s de una respuesta.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero real positivo cuyo logaritmo natural (neperiano) se desea obtener.</param>
        <summary>Devuelve el logaritmo natural (neperiano) de un n√∫mero. Los logaritmos naturales se basan en la constante e (2,71828182845904).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Ln</b> es la funci√≥n inversa de la funci√≥n EXP.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero real positivo cuyo logaritmo se desea obtener.</param>
        <param name="Arg2">Base: base del logaritmo. Si se omite la base, se presupone que es 10.</param>
        <summary>Devuelve el logaritmo de un n√∫mero en la base especificada.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero real positivo cuyo logaritmo en base 10 se desea obtener.</param>
        <summary>Devuelve el logaritmo en base 10 de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de valores de x opcionales que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg3">Constante: valor l√≥gico que especifica si se ha de hacer que la constante b sea igual a 1.</param>
        <param name="Arg4">Estad√≠stica: valor l√≥gico que especifica si se van a devolver estad√≠sticas de regresi√≥n adicionales.</param>
        <summary>En el an√°lisis de regresi√≥n, calcula una curva exponencial que se adapta a los datos y devuelve una matriz de valores que describe la curva. Como esta funci√≥n devuelve una matriz de valores, debe especificarse como una f√≥rmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La ecuaci√≥n de la curva es la siguiente:</para>
          <para>y = b*m^x o</para>
          <para>y = (b *(m1 ^ x1)*(m2 ^ x2) * _) (si hay varios valores de x)</para>
          <para>donde el valor de y dependiente es una funci√≥n de los valores de x independientes. Los valores de m son bases que corresponden a cada valor de x exponencial y b es un valor constante. Tenga en cuenta que y, x y m pueden ser vectores. La matriz que devuelve <b>LogEst</b> es {mn, mn-1,..., m1, b}.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>
				La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un rango de celdas compuesto por una fila o por una columna (lo que se conoce tambi√©n como vector).
</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>Si constante es <b>true</b> o se omite, b se calcula normalmente.</para>
          <para>Si constante es <b>false</b>, b se establece igual a 1 y los valores de m se ajustan a y = m ^ x.</para>
          <para>Si el argumento de estad√≠stica es <b>true</b>, <b>LogEst</b> devuelve las estad√≠sticas de regresi√≥n adicionales, por lo que la matriz devuelta es {mn, mn-1,..., m1, b; sen, sen-1,..., se1, seb; r 2, sey; F, df; ssreg, ssresid}. </para>
          <para>Si el argumento de estad√≠stica es <b>false</b> o se omite, <b>LogEst</b> devuelve s√≥lo los coeficientes m y la constante b. </para>
          <para>Para obtener m√°s informaci√≥n acerca de las estad√≠sticas de regresi√≥n adicionales, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>M√°s un trazado de los datos es similar a una curva exponencial, mejor ser√° la l√≠nea calculada m√°s adecuado para los datos. Al igual que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />, <b>LogEst</b> devuelve una matriz de valores que describe una relaci√≥n entre los valores, pero <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> ajusta una l√≠nea recta a sus datos; <b>LogEst</b> se adapta a una curva exponencial. Para obtener m√°s informaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Cuando tenga s√≥lo una variable x independiente, puede obtener valores (b) intersecci√≥n de y directamente mediante la f√≥rmula siguiente: </para>
          <para>Intersecci√≥n de Y (b):</para>
          <para>
Index(LOGEST(known_y's,known_x's),2)</para>
          <para>Puede usar la y = b * m ^ x ecuaci√≥n para predecir valores futuros de y, pero Microsoft Excel proporciona la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> funci√≥n hacer esto para usted. Para obtener m√°s informaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para>Cuando especifique como argumento una constante matricial, como valores conocidos de x, utilice comas para separar los valores de una misma fila y signos de punto y coma para separar las filas. Los caracteres separadores pueden ser diferentes seg√∫n la configuraci√≥n local definida en Configuraci√≥n regional y de idioma en el Panel de control.</para>
          <para>Tenga en cuenta que los valores de y previstos por la ecuaci√≥n de regresi√≥n puede que no sean v√°lidos si quedan fuera del rango de los valores de y utilizados para determinar la ecuaci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n logar√≠tmico-normal.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <summary>Use la distribuci√≥n logar√≠tmico-normal para analizar datos transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> (m√©todo).</para>
          <para>Si uno de los argumentos no es num√©rico, <b>LogInv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt;= 0 o probabilidad &gt;= 1, <b>LogInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si desv_est√°ndar &lt;= 0, <b>LogInv</b> devuelve el #NUM! valor de error. </para>
          <para>
				La funci√≥n inversa de la distribuci√≥n logar√≠tmico-normal es:				 </para>
          <para>En la figura 1: Inverso de la funci√≥n de distribuci√≥n logar√≠tmico-normal</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>LogNorm_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n logar√≠tmico-normal de x, donde ln(x) se distribuye normalmente con los par√°metros Media y Desv_est√°ndar. Use esta funci√≥n para analizar datos que han sido transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>LogNorm_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>If x ‚â§ 0 o si el argumento desv_est√°ndar ‚â§ 0, <b>LogNorm_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n logar√≠tmico-normal acumulativa es:  </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa logar√≠tmico-normal</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n logar√≠tmico-normal.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <summary>Devuelve la inversa de la funci√≥n de distribuci√≥n acumulativa logar√≠tmico-normal. Use la distribuci√≥n logar√≠tmico-normal para analizar datos transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>LogNorm_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt;= 0 o probabilidad &gt;= 1, <b>LogNorm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si desv_est√°ndar &lt;= 0, <b>LogNorm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>
				La funci√≥n inversa de la distribuci√≥n logar√≠tmico-normal es:				 </para>
          <para>En la figura 1: Inverso de la funci√≥n de distribuci√≥n logar√≠tmico-normal</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <summary>Devuelve la distribuci√≥n logar√≠tmico-normal acumulativa de x, donde ln(x) se distribuye normalmente con la media y la desviaci√≥n est√°ndar. Utilice esta funci√≥n para analizar los datos transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si uno de los argumentos no es num√©rico, <b>LogNormDist</b> devuelve #VALUE! valor de error. </para>
          <para>If x ‚â§ 0 o si el argumento desv_est√°ndar ‚â§ 0, <b>LogNormDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n logar√≠tmico-normal acumulativa es:  </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa logar√≠tmico-normal</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor_buscado: un valor que <b>Buscar</b> busca en el primer vector. El argumento de valor_buscado puede ser un n√∫mero, texto, un valor l√≥gico, o un nombre o referencia que hace referencia a un valor.</param>
        <param name="Arg2">Vector_de_comparaci√≥n o matriz: en la forma factorial, rango que contiene solamente una fila o una columna. Los valores del vector_de_comparaci√≥n pueden ser texto, n√∫meros o valores l√≥gicos. En la forma matricial, rango de celdas que contiene texto, n√∫meros o valores l√≥gicos que desea comparar con el valor_buscado.</param>
        <param name="Arg3">Vector_resultante: s√≥lo se utiliza con la forma vectorial. Rango que contiene solamente una fila o columna. Debe tener el mismo tama√±o que el argumento de vector_de_comparaci√≥n.</param>
        <summary>Devuelve un valor de un rango de una fila o una columna o de una matriz. La funci√≥n LOOKUP tiene dos formas sint√°cticas: la forma vectorial y la forma matricial.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>Buscar en un rango de una fila o una columna (llamado tambi√©n vector) un valor y devolver un valor desde la misma posici√≥n en un segundo rango de una fila o una columna</term>
              <description>Forma vectorial</description>
              <description>Utilice la forma vectorial cuando tenga una lista grande de valores en los que desea buscar o cuando los valores puedan cambiar con el tiempo.</description>
            </item>
            <item>
              <term>Buscar en la primera fila o columna de una matriz el valor especificado y devolver un valor desde la misma posici√≥n en la √∫ltima fila o columna de la matriz</term>
              <description>Forma matricial</description>
              <description>Utilice la forma matricial cuando tenga una lista peque√±a de valores y los valores permanezcan constantes a lo largo del tiempo.</description>
            </item>
          </list>
          <para>
            <b>Nota</b>: tambi√©n puede usar la funci√≥n de <b>b√∫squeda</b> como alternativa a la funci√≥n IF para pruebas complicadas o pruebas de m√°s de siete condiciones. Vea los ejemplos de la forma matricial.</para>
          <para>Forma vectorial</para>
          <para>Un vector es un rango de una columna o una √∫nica fila. La forma vectorial de <b>Lookup</b> busca en un rango una fila o una columna (llamado tambi√©n vector) un valor y devuelve un valor desde la misma posici√≥n en un segundo rango de una fila o una columna. Utilice esta forma de la funci√≥n de <b>b√∫squeda</b> cuando desea especificar el rango que contiene los valores que desea hacer coincidir. La otra forma de <b>Lookup</b> busca autom√°ticamente en la primera columna o fila.</para>
          <para>
            <b>Importante</b>: los valores en el vector_de_comparaci√≥n deben colocarse en orden ascendente:..., -2, -1, 0, 1, 2,..., A-z, <b>false</b>, <b>true</b>; en caso contrario, la <b>b√∫squeda</b> no es posible que d√© el valor correcto. El texto en may√∫sculas y min√∫sculas son equivalentes.</para>
          <para>Si LOOKUP no puede encontrar el valor_buscado, busca una coincidencia con el valor mayor en el vector_de_comparaci√≥n que sea menor o igual al valor_buscado.</para>
          <para>Si el argumento de valor_buscado es menor que el valor m√°s peque√±o del vector_de_comparaci√≥n, <b>Lookup</b> devuelve el valor de error # n/a.</para>
          <para>Forma matricial</para>
          <para>La forma matricial de <b>Lookup</b> busca en la primera fila o columna de una matriz para el valor especificado y devuelve un valor desde la misma posici√≥n en la √∫ltima fila o columna de la matriz. Utilice este formulario de <b>b√∫squeda</b> cuando los valores que desea hacer coincidir est√°n en la primera fila o columna de la matriz. Utilice la otra forma de <b>Lookup</b> cuando desee especificar la ubicaci√≥n de la columna o fila.</para>
          <para>
            <b>Sugerencia</b>: en general, es mejor usar la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />funci√≥n en lugar de la forma matricial de <b>Buscar</b>. Este formulario de <b>b√∫squeda</b> se proporciona para la compatibilidad con otros programas de hoja de c√°lculo.</para>
          <para>Si <b>Lookup</b> no puede encontrar el valor_buscado, utiliza el valor mayor de la matriz que sea menor o igual al valor_buscado.</para>
          <para>Si el argumento de valor_buscado es menor que el menor valor de la primera fila o columna (en funci√≥n de las dimensiones de la matriz), la <b>b√∫squeda</b> devuelve el valor de error # n/a.</para>
          <para>La forma matricial de <b>Lookup</b> es muy similar a la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> funciones. La diferencia es que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> busca valor_buscado en la primera fila, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> las b√∫squedas en la primera columna y <b>Lookup</b> busca seg√∫n las dimensiones de matriz.</para>
          <para>Si la matriz cubre un √°rea m√°s ancho que larga es alto (m√°s columnas que filas), <b>Lookup</b> busca el valor de la primera fila.</para>
          <para>Si la matriz es cuadrada o es m√°s alto que es wide (m√°s filas que columnas), <b>Lookup</b> busca en la primera columna.</para>
          <para>Con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />, puede indizar vertical u horizontalmente, pero <b>Lookup</b> selecciona siempre el √∫ltimo valor de la fila o columna.</para>
          <para>
            <b>Importante</b>: los valores de matriz deben colocarse en orden ascendente:..., -2, -1, 0, 1, 2,..., A-z, <b>false</b>, <b>true</b>; en caso contrario, la <b>b√∫squeda</b> no es posible que d√© el valor correcto. El texto en may√∫sculas y min√∫sculas son equivalentes.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor_buscado: el valor que se utiliza para buscar un valor en una tabla.</param>
        <param name="Arg2">Matriz_buscada: rango continuo de celdas que contienen posibles valores de b√∫squeda. El argumento de matriz_buscada debe ser una matriz o una referencia a una matriz.</param>
        <param name="Arg3">Tipo_de_coincidencia: el n√∫mero -1, 0 o 1. El tipo de coincidencia especifica c√≥mo Microsoft Excel compara el argumento de valor_b√∫squeda con los valores de la matriz_buscada.</param>
        <summary>Devuelve la posici√≥n relativa de un elemento en una matriz que coincida con un valor especificado en un orden especificado. Usar <b>coincidencia</b> en lugar de uno de los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> funciona cuando se necesita la posici√≥n de un elemento en un rango en lugar del propio elemento.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El argumento de valor_buscado es el valor para el que se desea encontrar una coincidencia en la matriz_buscada. Por ejemplo, al buscar el n√∫mero de una persona en un list√≠n telef√≥nico se utiliza el nombre de la persona como valor de b√∫squeda, pero el n√∫mero de tel√©fono es el valor que se desea obtener.</para>
          <para>El argumento de valor_buscado puede ser un valor (n√∫mero, texto o valor l√≥gico) o una referencia de celda a un n√∫mero, texto o valor l√≥gico.</para>
          <para>Si el argumento de tipo_de_coincidencia es 1, <b>Match</b> busca el valor mayor que sea menor o igual al valor_buscado. Matriz_buscada debe colocarse en orden ascendente:...,-2, -1, 0, 1, 2,..., A-z, <b>false</b>, <b>true</b>.</para>
          <para>Si el argumento de tipo_de_coincidencia es 0, <b>Match</b> busca el primer valor que es exactamente igual al valor_buscado. Matriz_buscada puede estar en cualquier orden.</para>
          <para>Si el argumento de tipo_de_coincidencia es -1, <b>Match</b> busca el valor m√°s peque√±o que es mayor o igual al valor_buscado. Matriz_buscada debe colocarse en orden descendente: <b>true</b>, <b>false</b>, Z-a,... 2, 1, 0, -1, -2,... y as√≠ sucesivamente. Si se omite el argumento de tipo_de_coincidencia, se supone que es 1.</para>
          <para>
            <b>Match</b> devuelve la posici√≥n del valor coincidente dentro de la matriz_buscada, no el propio valor. Por ejemplo, MATCH("b",{"a","b","c"},0) devuelve 2, la posici√≥n relativa de "b" dentro de la matriz {"a", "b", "c"}. </para>
          <para>
            <b>Match</b> no distingue entre may√∫sculas y min√∫sculas al buscar valores de texto. </para>
          <para>Si <b>Match</b> no encuentra ninguna coincidencia, devuelve el valor de error # n/a. </para>
          <para>Si el argumento de tipo_de_coincidencia es 0 y el argumento de valor_buscado es texto, se pueden usar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*) en el argumento de valor_buscado. El signo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 n√∫meros para los que desea encontrar el valor m√°ximo.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el valor mayor de un conjunto de valores.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si el argumento es una matriz o referencia, s√≥lo se utilizar√°n los n√∫meros de la matriz o de la referencia. Se omitir√°n las celdas vac√≠as, los valores l√≥gicos o el texto de la matriz o de la referencia.</para>
          <para>Si los argumentos no contienen n√∫meros, <b>Max</b> devuelve 0 (cero). </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si desea incluir valores l√≥gicos y representaciones textuales de n√∫meros en una referencia como parte del c√°lculo, utilice la <see cref="MAXA" /> (funci√≥n).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz num√©rica con el mismo n√∫mero de filas y columnas.</param>
        <summary>Devuelve el determinante matricial de una matriz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La matriz puede especificarse como un rango de celdas, por ejemplo, a1: C3; como una constante matricial, como {1,2,3; 4,5,6; 7,8,9;} o bien como un nombre con cualquiera de ellos. <b>¬°MDeterm</b> devuelve #VALUE! error cuando: </para>
          <para>Alguna celda de la matriz est√° vac√≠a o contiene texto.</para>
          <para>La matriz no tiene el mismo n√∫mero de filas y columnas.</para>
          <para>El tama√±o de la matriz es mayor que 73 columnas por 73 filas.</para>
          <para>El determinante matricial es un n√∫mero obtenido de los valores de la matriz. Para una matriz de tres filas y tres columnas, A1:C3, el determinante se define como: 

</para>
          <code>MDETERM(A1:C3)</code>
          <para>es igual a</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Los determinantes matriciales se suelen utilizar para resolver sistemas de ecuaciones matem√°ticas con varias variables.</para>
          <para>
            <b>MDeterm</b> se calcula con un precisi√≥n de alrededor de 16 d√≠gitos, lo que puede producir un peque√±o error num√©rico cuando el c√°lculo no est√° completo. Por ejemplo, el determinante de una matriz individual puede diferir de cero en 1E-16.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Cup√≥n: tasa de inter√©s nominal anual (inter√©s en los cupones) de un valor burs√°til.</param>
        <param name="Arg4">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg5">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la duraci√≥n modificada de Macauley de un valor burs√°til con un valor nominal supuesto de 100 $.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, frecuencia y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>MDuration</b> devuelve #VALUE! valor de error. </para>
          <para>Si rdto: rendimiento &lt; 0 o si cup√≥n &lt; 0, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>La duraci√≥n modificada se define del modo siguiente: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la duraci√≥n modificada</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya mediana se desea calcular.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la mediana de los n√∫meros especificados. La mediana es el n√∫mero central de un conjunto de n√∫meros.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si no hay un n√∫mero par de n√∫meros en el conjunto, <b>Median</b> calcula el promedio de los n√∫meros de dos en la mitad. Vea la segunda f√≥rmula en el ejemplo.</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>Nota</b>: la <b>mediana</b> (funci√≥n) mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres medidas m√°s comunes de tendencia central son:</para>
          <list type="bullet">
            <item>
              <description>Promedio, que es la media aritm√©tica y se calcula mediante la adici√≥n de un grupo de n√∫meros y dividiendo a continuaci√≥n por el recuento de dichos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es 5. </description>
            </item>
            <item>
              <description>Mediana, que es el n√∫mero central de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores que son mayores que la mediana y mitad de los n√∫meros tiene valores que son menores que la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo de que es el n√∫mero que se repiten con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, el modo de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 n√∫meros para los que desea encontrar el valor m√≠nimo.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el n√∫mero menor de un conjunto de valores.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si el argumento es una matriz o referencia, s√≥lo se utilizar√°n los n√∫meros de la matriz o de la referencia. Se omitir√°n las celdas vac√≠as, los valores l√≥gicos o el texto de la matriz o de la referencia.</para>
          <para>Si los argumentos no contienen n√∫meros, <b>Min</b> devuelve 0. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si desea incluir valores l√≥gicos y representaciones textuales de n√∫meros en una referencia como parte del c√°lculo, utilice la funci√≥n MINA.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz num√©rica con el mismo n√∫mero de filas y columnas.</param>
        <summary>Devuelve la matriz inversa de la matriz dentro de una matriz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El tama√±o de la matriz no debe superar los 52 columnas por 52 filas. Si es as√≠, la funci√≥n devuelve #VALUE! error. </para>
          <para>La matriz puede especificarse como un rango de celdas (como A1:C3), como una constante matricial (como {1,2,3;4,5,6;7,8,9}) o como un nombre de un rango o una constante.</para>
          <para>Si alguna celda de la matriz est√° vac√≠a o contiene texto, <b>MInverse</b> devuelve #VALUE! valor de error. </para>
          <para>
            <b>¬°MInverse</b> devuelve tambi√©n #VALUE! valor de error si la matriz no tiene el mismo n√∫mero de filas y columnas. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para>Las matrices inversas, como los determinantes, se suelen utilizar para resolver sistemas de ecuaciones matem√°ticas con varias variables. El producto de una matriz y su inversa es la matriz de identidad: la matriz cuadrada en la que los valores diagonales son 1 y todos los dem√°s valores son 0.</para>
          <para>Para ejemplificar el c√°lculo de una matriz de dos filas y dos columnas, supongamos que el rango A1:B2 contiene las letras a, b, c y d que representan cuatro n√∫meros cualesquiera. En la tabla siguiente se muestra la matriz inversa de la matriz A1:B2. 

</para>
          <list type="table">
            <item>
              <term>Fila 1</term>
              <description>d. / (una c*d-b*)</description>
              <description>b / (b*c-a*d.)</description>
            </item>
            <item>
              <term>Fila 2</term>
              <description>c / (b*c-a*d.)</description>
              <description>una / (una c*d-b*)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> se calcula con un precisi√≥n de alrededor de 16 d√≠gitos, lo que puede producir un peque√±o error num√©rico cuando la cancelaci√≥n no est√° completa. </para>
          <para>¬°Algunas matrices cuadradas no se pueden invertir y devolver√° el #NUM! valor de error con <b>MInverse</b>. El determinante de una matriz no invertible es 0.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores: matriz o referencia a celdas que contienen n√∫meros. Estos n√∫meros representan una serie de pagos (valores negativos) o ingresos (valores positivos) realizados en per√≠odos constantes.</param>
        <param name="Arg2">Tasa_financiamiento: tasa de inter√©s que se paga del dinero utilizado en flujos de efectivo.</param>
        <param name="Arg3">Tasa_reinversi√≥n: tasa de inter√©s que se recibe de los flujos de efectivo a medida que se vuelven a invertir.</param>
        <summary>Devuelve la tasa interna de retorno modificada de una serie de flujos de efectivo peri√≥dicos. MIRR considera el costo de la inversi√≥n y el inter√©s recibido al volver a invertir el efectivo.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Valores deben contener al menos un valor positivo y uno negativo para calcular la tasa interna de retorno modificada. ¬°De lo contrario, <b>MIrr</b> devuelve #DIV/0! valor de error. </para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>
            <b>MIrr</b> utiliza el orden de valores para interpretar el orden de los flujos de efectivo. Aseg√∫rese de escribir su pago valores e ingresos en el orden que desee y con los signos correctos (valores positivos para el efectivo recibido y valores negativos para el efectivo pagado). </para>
          <para>Si n es el n√∫mero de flujos de efectivo en los valores, frate es tasa_financiamiento y rrate es tasa_reinversi√≥n, entonces la f√≥rmula de <b>MIrr</b> es: </para>
          <para>En la figura 1: F√≥rmula de MIrr (m√©todo)</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1, matriz2: las matrices que se desea multiplicar.</param>
        <param name="Arg2">Matriz1, matriz2: las matrices que se desea multiplicar.</param>
        <summary>Devuelve el producto matricial de dos matrices. El resultado es una matriz con el mismo n√∫mero de filas que matriz1 y el mismo n√∫mero de columnas que matriz2.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El n√∫mero de columnas de matriz1 debe ser el mismo que el n√∫mero de filas de matriz2, y ambas matrices s√≥lo deben contener n√∫meros.</para>
          <para>Matriz1 y matriz2 pueden especificarse como rangos de celdas, constantes matriciales o referencias.</para>
          <para>
            <b>¬°MMult</b> devuelve #VALUE! error cuando: </para>
          <para>Alguna celda est√° vac√≠a o contiene texto.</para>
          <para>El n√∫mero de columnas de matriz1 es diferente del n√∫mero de filas de matriz2.</para>
          <para>El tama√±o de la matriz resultante es igual o mayor que un total de 5.461 celdas.</para>
          <para>La matriz de un producto matricial de dos matrices b y c es: 

 </para>
          <para>Figura 1: Matriz producto una de dos matrices b y c</para>
          <para></para>
          <para></para>
          <para>donde i es el n√∫mero de filas y j es el n√∫mero de columnas.</para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya moda se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el valor que se repite con m√°s frecuencia en una matriz o rango de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que puede proporcionar precisi√≥n mejorada y cuyos nombres que refleje mejor su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> m√©todos.</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si el conjunto de datos no contiene puntos de datos duplicados, <b>Mode</b> devuelve el valor de error # n/a.</para>
          <para>
            <b>Nota</b>: el <b>modo de</b> funci√≥n mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres medidas m√°s comunes de tendencia central son:</para>
          <list type="bullet">
            <item>
              <description>Promedio, que es la media aritm√©tica y se calcula mediante la adici√≥n de un grupo de n√∫meros y dividiendo a continuaci√≥n por el recuento de dichos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es 5. </description>
            </item>
            <item>
              <description>Mediana, que es el n√∫mero central de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores que son mayores que la mediana y mitad de los n√∫meros tiene valores que son menores que la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4. </description>
            </item>
            <item>
              <description>Modo de que es el n√∫mero que se repiten con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, el modo de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, el primer argumento num√©rico para el que va a calcular el modo.</param>
        <param name="Arg2">N√∫mero 2, n√∫mero 30: de 2 a 30 argumentos cuya moda se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve una matriz vertical de los valores que se repiten con m√°s frecuencia en una matriz o rango de datos</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si el conjunto de datos no contiene puntos de datos duplicados, <b>Mode_Mult</b> devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya moda se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el valor que se repite con m√°s frecuencia en una matriz o rango de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si el conjunto de datos no contiene puntos de datos duplicados, <b>Mode_Sngl</b> devuelve el valor de error # n/a.</para>
          <para>
            <b>Nota</b>: el <b>Mode_Sngl</b> funci√≥n mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres medidas m√°s comunes de tendencia central son:</para>
          <list type="bullet">
            <item>
              <description>Promedio de la media aritm√©tica y se calcula mediante la adici√≥n de un grupo de n√∫meros y dividiendo a continuaci√≥n por el recuento de dichos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es 5. </description>
            </item>
            <item>
              <description>Mediana el n√∫mero central de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores que son mayores que la mediana y mitad de los n√∫meros tiene valores que son menores que la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4. </description>
            </item>
            <item>
              <description>Modo el n√∫mero que se repiten con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, el modo de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">M√∫ltiplo: m√∫ltiplo al que se desea redondear el n√∫mero.</param>
        <summary>Devuelve un n√∫mero redondeado al m√∫ltiplo deseado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>MRound</b> redondea hacia arriba, alej√°ndose del cero, si el resto de dividir el n√∫mero por el m√∫ltiplo es mayor o igual que la mitad del valor del m√∫ltiplo.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, n√∫mero2, ...: de 1 a 29 valores para los que desea calcular el polinomio.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el cociente del factorial de una suma de valores con respecto al producto de factoriales.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>MultiNomial</b> devuelve #VALUE! valor de error. </para>
          <para>Si uno de los argumentos es menor que cero, <b>MultiNomial</b> devuelve el #NUM! valor de error. </para>
          <para>El polinomio es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para el m√©todo MultiNomial</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero entero que especifica la dimensi√≥n de la matriz de unidad que se desea devolver.</param>
        <summary>Devuelve la matriz de unidad de la dimensi√≥n especificada.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_fracasos: el n√∫mero de fracasos.</param>
        <param name="Arg2">N√∫m_√©xitos: el n√∫mero m√°ximo de √©xitos.</param>
        <param name="Arg3">prob_√©xito: la probabilidad de un √©xito.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>NegBinom_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n binomial negativa. <b>NegBinom_Dist</b> devuelve la probabilidad de que haya n√∫m_fracasos antes del √©xito n√∫m_√©xitos, cuando la probabilidad constante de √©xito es prob_√©xito. Esta funci√≥n es similar a la distribuci√≥n binomial, excepto en que el n√∫mero de √©xitos es fijo y el n√∫mero de ensayos es variable. Al igual que la distribuci√≥n binomial, se supone que los ensayos son independientes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Por ejemplo, necesita encontrar 10 personas con reflejos excelentes, y sabe la probabilidad de que un candidato tenga estas cualificaciones es de 0,3. <b>NegBinom_Dist</b> calcula la probabilidad de que se entrevista a un cierto n√∫mero de candidatos no cualificados antes de encontrar a los 10 candidatos aptos: </para>
          <para>Los argumentos de n√∫m_fracasos y n√∫m_√©xitos se truncan a valores enteros.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>NegBinom_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si prob_√©xito &lt; 0 o si probabilidad &gt; 1, <b>NegBinom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si n√∫m_fracasos &lt; 0 o n√∫m_√©xitos &lt; 1, <b>NegBinom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la distribuci√≥n binomial negativa es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n binomial negativa</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>x es n√∫m_fracasos, r es n√∫m_√©xitos y p es prob_√©xito.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_fracasos: el n√∫mero de fracasos.</param>
        <param name="Arg2">N√∫m_√©xitos: el n√∫mero m√°ximo de √©xitos.</param>
        <param name="Arg3">prob_√©xito: la probabilidad de un √©xito.</param>
        <summary>Devuelve la distribuci√≥n binomial negativa. NegBinomDist devuelve la probabilidad de que haya n√∫m_fracasos antes del √©xito n√∫m_√©xitos, cuando la probabilidad constante de √©xito es prob_√©xito. Esta funci√≥n es similar a la distribuci√≥n binomial, excepto en que el n√∫mero de √©xitos es fijo y el n√∫mero de ensayos es variable. Al igual que la distribuci√≥n binomial, se supone que los ensayos son independientes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que puede proporcionar precisi√≥n mejorada y cuyos nombres que refleje mejor su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Por ejemplo, necesita encontrar 10 personas con reflejos excelentes, y sabe la probabilidad de que un candidato tenga estas cualificaciones es de 0,3. <b>NegBinomDist</b> calcula la probabilidad de que se entrevista a un cierto n√∫mero de candidatos no cualificados antes de encontrar a los 10 candidatos aptos. </para>
          <para>Los argumentos de n√∫m_fracasos y n√∫m_√©xitos se truncan a valores enteros.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>NegBinomDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si prob_√©xito &lt; 0 o si probabilidad &gt; 1, <b>NegBinomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si n√∫m_fracasos &lt; 0 o n√∫m_√©xitos &lt; 1, <b>NegBinomDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la distribuci√≥n binomial negativa es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n binomial negativa</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>x es n√∫m_fracasos, r es n√∫m_√©xitos y p es prob_√©xito.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha_inicial: fecha que representa la fecha inicial.</param>
        <param name="Arg2">Fecha_final: fecha que representa la fecha final.</param>
        <param name="Arg3">Festivos: rango opcional de una o varias fechas que deben excluirse del calendario laboral, como los d√≠as festivos nacionales y locales. La lista puede ser un rango de celdas que contengan fechas o una constante matricial de los n√∫meros de serie que representen las fechas.</param>
        <summary>Devuelve el n√∫mero de d√≠as laborables entre fecha_inicial y fecha_final. D√≠as laborables excluyen los fines de semana y cualquier fecha identificada en d√≠as festivos. Utilice <b>NetworkDays</b> para calcular los beneficios de los empleados que acumular√°n en funci√≥n del n√∫mero de d√≠as que ha funcionado durante un per√≠odo espec√≠fico.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si uno de los argumentos no es una fecha v√°lida, <b>NetworkDays</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha_inicial: la fecha de inicio para la que es la diferencia a calcularse. El argumento fecha_inicial puede ser anterior a la misma o posterior a la fecha_final.</param>
        <param name="Arg2">Fecha_final: la fecha de finalizaci√≥n para que la diferencia es que calcularse. El argumento fecha_inicial puede ser anterior a la misma o posterior a la fecha_final.</param>
        <param name="Arg3">Fines de semana: indica los d√≠as de la semana que son los d√≠as de la semana y no se incluyen en el n√∫mero de d√≠as laborables entre fecha_inicial y fecha_final. Fin de semana es un n√∫mero de fin de semana o una cadena que especifica cu√°ndo tienen lugar los fines de semana.</param>
        <param name="Arg4">Festivos: un conjunto opcional de uno o m√°s de las fechas que se excluyen del calendario del d√≠a laborable. Festivos es un rango de celdas que contienen las fechas o una constante matricial de los valores de serie que representen las fechas. El orden de las fechas o valores de serie en d√≠as festivos puede ser arbitrario.</param>
        <summary>Devuelve el n√∫mero de todos los d√≠as laborables entre dos fechas mediante par√°metros para indicar cu√°les y cu√°ntos son d√≠as de fin de semana. Los d√≠as de fin de semana y los d√≠as que se especifiquen como d√≠as festivos no se consideran d√≠as laborables.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la fecha_inicial es posterior a la fecha_final, el valor devuelto ser√° negativo, y la magnitud ser√° el n√∫mero de todos los d√≠as laborales.</para>
          <para>Si el argumento fecha_inicial est√° fuera del intervalo para el valor de base de la fecha actual, <b>NetworkDays_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento fecha_final est√° fuera del intervalo para el valor de base de la fecha actual, <b>NetworkDays_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si una cadena de fin de semana de longitud no v√°lida o contiene caracteres no v√°lidos, <b>NetworkDays_Intl</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa_efect: tasa de inter√©s efectiva.</param>
        <param name="Arg2">N√∫mero de per√≠odos por a√±o: n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</param>
        <summary>Devuelve la tasa nominal del inter√©s anual, si se conocen la tasa efectiva y el n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El argumento de n√∫mero de per√≠odos al a√±o se trunca a un valor entero.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>Nominal</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa_efect ‚â§ 0 o si n√∫m_per_a√±o &lt; 1, <b>Nominal</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>Nominal</b> est√° relacionada con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> tal como se muestra en la ecuaci√≥n siguiente: </para>
          <para>En la figura 1: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular la distribuci√≥n.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>Norm_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de probabilidad bruta.</param>
        <summary>Devuelve la distribuci√≥n normal para la media y la desviaci√≥n est√°ndar especificadas. Esta funci√≥n tiene un campo muy amplio de aplicaciones en estad√≠stica, incluidas las pruebas de hip√≥tesis.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si Media o desv_est√°ndar no es num√©rico, <b>Norm_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>Norm_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si Media = 0, desv_est√°ndar = 1 y acumulado = <b>Verdadero</b>, <b>Norm_Dist</b> devuelve la distribuci√≥n normal est√°ndar, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad normal (acumulado = <b>Falso</b>) es: </para>
          <para>En la figura 1: Ecuaci√≥n para la funci√≥n de densidad normal</para>
          <para></para>
          <para></para>
          <para>Cuando acumulado = <b>Verdadero</b>, la f√≥rmula es la integral desde el infinito negativo a x de la f√≥rmula dada.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <summary>Devuelve el inverso de la distribuci√≥n acumulativa normal para la media y la desviaci√≥n est√°ndar especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>Norm_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt;= 0 o si probabilidad &gt;= 1, <b>Norm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>Norm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si Media = 0 y desv_est√°ndar = 1, <b>Norm_Inv</b> usa la distribuci√≥n normal est√°ndar (vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />).</para>
          <para>Dado un valor de probabilidad, <b>Norm_Inv</b> busca ese valor x tal que NORM_DIST (x, Media, desv_est√°ndar, verdadero) = probabilidad. Por lo tanto, la precisi√≥n de <b>Norm_Inv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z: valor para el que se desea calcular la distribuci√≥n.</param>
        <param name="Arg2">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>Norm_S_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de probabilidad bruta.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno. Puede usar esta funci√≥n en lugar de una tabla de √°reas curvas normales est√°ndar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si z no es num√©rico, <b>Norm_S_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>La ecuaci√≥n de la funci√≥n de densidad normal est√°ndar es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la funci√≥n de densidad normal est√°ndar</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <summary>Devuelve el inverso de la distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si probabilidad no es num√©rico, <b>Norm_S_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>Norm_S_Inv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>Norm_S_Inv</b> busca ese valor z tal que NORM_S_DIST(z) = probabilidad. Por lo tanto, la precisi√≥n de <b>Norm_S_Inv</b>depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />. <b>Norm_S_Inv</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular la distribuci√≥n.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>NormDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de probabilidad bruta.</param>
        <summary>Devuelve la distribuci√≥n normal para la media y la desviaci√≥n est√°ndar especificadas. Esta funci√≥n tiene un gran variedad de aplicaciones en estad√≠stica, como la comprobaci√≥n de hip√≥tesis.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si Media o desv_est√°ndar no es num√©rico, <b>NormDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>NormDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si Media = 0, desv_est√°ndar = 1 y acumulado = <b>true</b>, <b>NormDist</b> devuelve la distribuci√≥n normal est√°ndar, <b>NormDist</b>. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad normal (acumulado = <b>Falso</b>) es: </para>
          <para>En la figura 1: Ecuaci√≥n para la funci√≥n de densidad normal</para>
          <para></para>
          <para></para>
          <para>Cuando acumulado = <b>Verdadero</b>, la f√≥rmula es la integral desde el infinito negativo a x de la f√≥rmula dada.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <summary>Devuelve el inverso de la distribuci√≥n acumulativa normal para la media y la desviaci√≥n est√°ndar especificadas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> (m√©todo).</para>
          <para>Si uno de los argumentos no es num√©rico, <b>NormInv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>NormInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>NormInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si Media = 0 y desv_est√°ndar = 1, <b>NormInv</b> utiliza la distribuci√≥n normal est√°ndar (vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />). </para>
          <para>Dado un valor de probabilidad, <b>NormInv</b> busca un valor de x tal que NORMDIST (x, Media, desv_est√°ndar, verdadero) = probabilidad. Por lo tanto, la precisi√≥n de <b>NormInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />. <b>NormInv</b> utiliza una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z: valor para el que se desea calcular la distribuci√≥n.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno. Puede usar esta funci√≥n en lugar de una tabla de √°reas curvas normales est√°ndar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si z es un valor no num√©rico, <b>NormSDist</b> devuelve #VALUE! valor de error. </para>
          <para>La ecuaci√≥n de la funci√≥n de densidad normal est√°ndar es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la funci√≥n de densidad normal est√°ndar</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <summary>Devuelve el inverso de la distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> (m√©todo).</para>
          <para>Si la probabilidad es un valor no num√©rico, <b>NormSInv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt;= 0 o si probabilidad &gt;= 1, <b>NormSInv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>NormSInv</b> busca ese valor z tal que NORMDIST = probabilidad. Por lo tanto, la precisi√≥n de <b>NormSInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Pago: pago efectuado cada per√≠odo y que no se puede cambiar durante la vigencia de la anualidad. Generalmente, el argumento de pago incluye el capital y el inter√©s pero ning√∫n otro arancel o impuesto.</param>
        <param name="Arg3">Va: valor actual o importe total de una serie de pagos futuros.</param>
        <param name="Arg4">Vf: valor futuro o un saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento de vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0).</param>
        <param name="Arg5">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <summary>Devuelve el n√∫mero de per√≠odos de una inversi√≥n en funci√≥n de los pagos peri√≥dicos constantes y de una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de descuento durante un per√≠odo.</param>
        <param name="Arg2">Valor1, valor2, ...: de 1 a 29 argumentos que representan los pagos y los ingresos.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula el valor neto presente de una inversi√≥n a partir de una tasa de descuento y una serie de pagos futuros (valores negativos) e ingresos (valores positivos).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de valor1, valor2, etc., deben estar igualmente distribuidos en el tiempo y deben producirse al final de cada per√≠odo.</para>
          <para>
            <b>NPV</b> usa el orden de valor1, valor2,... para interpretar el orden de los flujos de efectivo. Aseg√∫rese de escribir su pago valores e ingresos en la secuencia correcta. </para>
          <para>Se tienen en cuenta los argumentos que son n√∫meros, celdas vac√≠as, valores l√≥gicos o representaciones textuales de n√∫meros; los argumentos que son valores de error o texto que no se convierten en n√∫meros se omiten.</para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se omiten las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>La inversi√≥n de <b>Npv</b> comienza un periodo antes de la fecha del flujo de efectivo del valor1 y termina con el √∫ltimo flujo de caja de la lista. El c√°lculo de <b>Npv</b> se basa en flujos de efectivo futuros. Si el primer flujo de efectivo se produce al principio del primer per√≠odo, el primer valor debe agregarse al resultado de <b>Npv</b> , no incluido en los argumentos de valores. Para obtener m√°s informaci√≥n, vea los ejemplos siguientes. </para>
          <para>Si n es el n√∫mero de flujos de efectivo en la lista de valores, la f√≥rmula de <b>Npv</b> es: </para>
          <para>En la figura 1: F√≥rmula para el m√©todo Npv</para>
          <para></para>
          <para></para>
          <para>
            <b>NPV</b> es similar a la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> funci√≥n (valor presente). La diferencia principal entre PV y <b>Npv</b> es que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> permite que los flujos de caja comiencen al final o al principio del per√≠odo. A diferencia de los valores de flujo de efectivo de <b>Npv</b> variables, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> flujos de efectivo debe ser constantes a lo largo de la inversi√≥n. Para obtener informaci√≥n acerca de anualidades y funciones financieras, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />. </para>
          <para>
            <b>VNA</b> tambi√©n est√° relacionada con el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> funci√≥n (tasa interna de retorno). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />es la tasa para la que <b>Npv</b> es igual a cero: VNA,...) = 0.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cadena que representa el n√∫mero al que desea convertir.</param>
        <param name="Arg2">Car√°cter utilizado como separador decimal en la cadena.</param>
        <param name="Arg3">Car√°cter utilizado como separador de grupo en la cadena.</param>
        <summary>Convierte texto en n√∫mero de forma independiente de la configuraci√≥n regional.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero octal que se desea convertir. El n√∫mero no puede contener m√°s de 10 d√≠gitos. El bit m√°s significativo del argumento de n√∫mero es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Oct2Bin</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero octal en binario.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero es negativo, <b>Oct2Bin</b> omite lugares y devuelve un n√∫mero binario de 10 caracteres. </para>
          <para>Si el argumento de n√∫mero es negativo, no puede ser menor que 7777777000 y, si es positivo, no puede ser mayor que 777.</para>
          <para>Si el n√∫mero no es un n√∫mero octal v√°lido, <b>Oct2Bin</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Oct2Bin</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Oct2Bin</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es negativo, <b>Oct2Bin</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero octal que se desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres octales (30 bits). El bit m√°s significativo del argumento de n√∫mero es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <summary>Convierte un n√∫mero octal en decimal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero no es un n√∫mero octal v√°lido, <b>Oct2Dec</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero octal que se desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres octales (30 bits). El bit m√°s significativo del argumento de n√∫mero es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se va a usar. Si se omite, <b>Oct2Hex</b> utiliza el n√∫mero m√≠nimo de caracteres necesarios. Lugares es √∫til para completar el valor devuelto con l√≠der 0 (ceros).</param>
        <summary>Convierte un n√∫mero octal en hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero es negativo, <b>Oct2Hex</b> omite lugares y devuelve un n√∫mero hexadecimal de 10 caracteres. </para>
          <para>Si el n√∫mero no es un n√∫mero octal v√°lido, <b>Oct2Hex</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Oct2Hex</b> requiere m√°s caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento caracteres es un valor no num√©rico, <b>Oct2Hex</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento caracteres es negativo, <b>Oct2Hex</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <summary>Devuelve un n√∫mero redondeado hacia arriba hasta el pr√≥ximo entero impar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero es un valor no num√©rico, <b>impar</b> devuelve #VALUE! valor de error. </para>
          <para>Independientemente del signo del n√∫mero, los valores se redondean hacia arriba. Si el argumento de n√∫mero es un entero impar, no se redondea.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg4">Primer_cup√≥n: fecha del primer cup√≥n del valor burs√°til.</param>
        <param name="Arg5">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg6">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg7">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg8">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg9">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio de un valor nominal de 100 $ de un valor burs√°til con un per√≠odo inicial impar (largo o corto).</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n, primer_cup√≥n y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n, vencimiento, emisi√≥n o primer_cup√≥n no es una fecha v√°lida, <b>OddFPrice</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa &lt; 0 o si rdto: rendimiento &lt; 0, <b>OddFPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>OddFPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Debe cumplirse la siguiente condici√≥n de fecha; ¬°de lo contrario, <b>OddFPrice</b> devuelve el #NUM! valor de error: </para>
          <para>vencimiento &gt; primer_cup√≥n &gt; el argumento de liquidaci√≥n &gt; problema</para>
          <para></para>
          <para>
            <b>OddFPrice</b> se calcula de la siguiente manera: primer cup√≥n corto impar:</para>
          <para>En la figura 1: Primer cup√≥n irregular corto</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>A = n√∫mero de d√≠as desde el principio del per√≠odo del cup√≥n hasta la fecha de liquidaci√≥n (d√≠as acumulados).</para>
          <para>DSC = n√∫mero de d√≠as desde la liquidaci√≥n hasta la fecha del pr√≥ximo cup√≥n.</para>
          <para>DFC = n√∫mero de d√≠as desde el principio del primer cup√≥n irregular hasta la fecha del primer cup√≥n.</para>
          <para>E = n√∫mero de d√≠as del per√≠odo del cup√≥n.</para>
          <para>N = n√∫mero de cupones pagaderos entre la fecha de liquidaci√≥n y la fecha de rescate. (Si este n√∫mero contiene una fracci√≥n, se produce el siguiente n√∫mero entero.)</para>
          <para>Primer cup√≥n irregular largo:</para>
          <para>La figura 2: Primer cup√≥n irregular largo</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>AI = n√∫mero de d√≠as desde el principio de la i-√©simo, o √∫ltimo, per√≠odo del cuasi cup√≥n dentro del per√≠odo impar.</para>
          <para>DCi = N√∫mero de d√≠as desde la fecha fijada (o fecha de emisi√≥n) hasta el primer cuasi-cup√≥n (= 1) o n√∫mero de d√≠as del cuasi cup√≥n (= 2,..., = NC).</para>
          <para>DSC = n√∫mero de d√≠as desde el argumento de liquidaci√≥n hasta la fecha del pr√≥ximo cup√≥n.</para>
          <para>E = n√∫mero de d√≠as del per√≠odo del cup√≥n.</para>
          <para>N = n√∫mero de cupones pagaderos entre la fecha del primer cup√≥n real y la fecha de amortizaci√≥n. (Si este n√∫mero contiene una fracci√≥n, se produce el siguiente n√∫mero entero.)</para>
          <para>CN = n√∫mero de per√≠odos de cuasi cup√≥n que cabe en un per√≠odo irregular. (Si este n√∫mero contiene una fracci√≥n, se produce el siguiente n√∫mero entero.)</para>
          <para>NLi = Duraci√≥n normal en d√≠as del i-√©simo completa, o √∫ltimo, per√≠odo del cuasi cup√≥n dentro del per√≠odo impar.</para>
          <para>Nq = N√∫mero de per√≠odos completos de cuasi cup√≥n entre la fecha de liquidaci√≥n y el primer cup√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg4">Primer_cup√≥n: fecha del primer cup√≥n del valor burs√°til.</param>
        <param name="Arg5">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg6">Pr: precio del valor burs√°til.</param>
        <param name="Arg7">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg8">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg9">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento de un valor burs√°til con un primer per√≠odo impar (corto o largo).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n, primer_cup√≥n y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n, vencimiento, emisi√≥n o primer_cup√≥n no es una fecha v√°lida, <b>OddFYield</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa &lt; 0 o si precio ‚â§ 0, <b>OddFYield</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>OddFYield</b> devuelve el #NUM! valor de error. </para>
          <para>Debe cumplirse la siguiente condici√≥n de fecha; ¬°de lo contrario, <b>OddFYield</b> devuelve el #NUM! valor de error: </para>
          <para>vencimiento &gt; primer_cup√≥n &gt; el argumento de liquidaci√≥n &gt; problema</para>
          <para>Excel usa una t√©cnica iterativa para calcular <b>OddFYield</b>. Esta funci√≥n utiliza el m√©todo de Newton basado en la f√≥rmula que se usa para la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. Se cambia el rendimiento a trav√©s de 100 iteraciones hasta que el precio estimado con el rendimiento dado se acerque al precio. Vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> para la f√≥rmula que utiliza <b>OddFYield</b> .</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">√öltimo_inter√©s: fecha del √∫ltimo cup√≥n del valor burs√°til.</param>
        <param name="Arg4">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg5">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg6">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg7">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg8">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio de un valor nominal de 100 $ de un valor burs√°til con un per√≠odo de cup√≥n final impar (largo o corto).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, √∫ltimo_inter√©s y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n, vencimiento o √∫ltimo_inter√©s no es una fecha v√°lida, <b>OddLPrice</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa &lt; 0 o si rdto: rendimiento &lt; 0, <b>OddLPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>OddLPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Debe cumplirse la siguiente condici√≥n de fecha; ¬°de lo contrario, <b>OddLPrice</b> devuelve el #NUM! valor de error: </para>
          <para>vencimiento &gt; el argumento de liquidaci√≥n &gt; √∫ltimo_inter√©s</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">√öltimo_inter√©s: fecha del √∫ltimo cup√≥n del valor burs√°til.</param>
        <param name="Arg4">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg5">Pr: precio del valor burs√°til.</param>
        <param name="Arg6">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg7">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg8">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento de un valor burs√°til con un √∫ltimo per√≠odo impar (corto o largo).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, √∫ltimo_inter√©s y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n, vencimiento o √∫ltimo_inter√©s no es una fecha v√°lida, <b>OddLYield</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa &lt; 0 o si precio ‚â§ 0, <b>OddLYield</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>OddLYield</b> devuelve el #NUM! valor de error. </para>
          <para>Debe cumplirse la siguiente condici√≥n de fecha; ¬°de lo contrario, <b>OddLYield</b> devuelve el #NUM! valor de error: </para>
          <para>vencimiento &gt; el argumento de liquidaci√≥n &gt; √∫ltimo_inter√©s </para>
          <para>
            <b>OddLYield</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para OddLYield (m√©todo)</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>AI = n√∫mero de d√≠as acumulados para el i-√©simo, o √∫ltimo, cuasi-cup√≥n dentro del per√≠odo irregular, contando hacia delante de √∫ltima fecha de inter√©s antes de amortizaci√≥n.</para>
          <para>DCi = N√∫mero de d√≠as contados en el i-√©simo, o √∫ltimo, per√≠odo del cuasi cup√≥n delimitado por la longitud del per√≠odo del cup√≥n real.</para>
          <para>CN = n√∫mero de per√≠odos de cuasi cup√≥n que cabe en un per√≠odo irregular; Si este n√∫mero contiene una fracci√≥n se aumentar√° al n√∫mero entero siguiente.</para>
          <para>NLi = Duraci√≥n normal en d√≠as de la i-√©simo, o √∫ltimo, per√≠odo del cuasi cup√≥n dentro del per√≠odo de cup√≥n final impar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1, valor_l√≥gico2,...: de 1 a 30 condiciones que desea comprobar y que pueden ser <b>true</b> o <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve <b>true</b> si alg√∫n argumento es <b>true</b>; Devuelve <b>false</b> si todos los argumentos son <b>false</b>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben evaluarse como valores l√≥gicos, como <b>true</b> o <b>false</b>, o matrices o referencias que contengan valores l√≥gicos. </para>
          <para>Si un argumento de matriz o referencia contiene texto o celdas vac√≠as, esos valores se omiten.</para>
          <para>Si el rango especificado no contiene valores l√≥gicos, <b>o</b> devuelve #VALUE! valor de error. </para>
          <para>Puede usar una f√≥rmula de matriz <b>o</b> para ver si se produce un valor en una matriz. Para escribir una f√≥rmula de matriz, presione CTRL + MAY√öS + ENTRAR.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve el objeto primario correspondiente al objeto especificado. S√≥lo lectura.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Valor actual de la inversi√≥n.</param>
        <param name="Arg3">Valor futuro de la inversi√≥n deseado.</param>
        <summary>Devuelve el n√∫mero de per√≠odos de una inversi√≥n requerida ponerse en contacto con un valor especificado.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1: conjunto de valores independientes.</param>
        <param name="Arg2">Matriz2: conjunto de valores dependientes.</param>
        <summary>Devuelve el coeficiente de correlaci√≥n producto momento de Pearson, r, que es un √≠ndice sin dimensiones que abarca desde -1,0 a 1,0, inclusive y refleja la extensi√≥n de una relaci√≥n lineal entre dos conjuntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices, constantes o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se omiten; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los argumentos matriz1 y matriz2 est√°n vac√≠os o contienen un n√∫mero diferente de puntos de datos, <b>Pearson</b> devuelve el valor de error # n/a. </para>
          <para>La f√≥rmula para el coeficiente de correlaci√≥n producto momento de Pearson, r, es: 

 </para>
          <para>En la figura 1: Pearson coeficiente de correlaci√≥n producto</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de la muestra AVERAGE(matriz1) y AVERAGE(matriz2).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos que define la posici√≥n relativa.</param>
        <param name="Arg2">K: valor de percentil en el rango 0..1, inclusive.</param>
        <summary>Devuelve el percentil k-√©simo de los valores de un rango. Puede utilizar esta funci√≥n para establecer un umbral de valores aceptables. Por ejemplo, puede decidir examinar a candidatos con una puntuaci√≥n superior al nonag√©simo percentil.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> (m√©todo). </para>
          <para>Si la matriz esta vac√≠o, <b>Percentile</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un valor no num√©rico, <b>Percentile</b> devuelve #VALUE! valor de error. </para>
          <para>Si k es &lt; 0 o si k &gt; 1, <b>Percentile</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un m√∫ltiplo de 1 / (n - 1), <b>Percentile</b> se interpola para determinar el valor en el k-√©simo percentil.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos que define la posici√≥n relativa.</param>
        <param name="Arg2">K: valor de percentil en el rango 0.. 1, exclusivo.</param>
        <summary>Devuelve el k-√©simo percentil de los valores en un rango, donde k est√° en el rango de 0 a 1, ambos no incluidos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Percentile_Exc</b> devuelve el #NUM! valor de error </para>
          <para>Si k no es un valor no num√©rico, <b>Percentile_Exc</b> devuelve #VALUE! valor de error. </para>
          <para>Si k es ‚â§ 0 o si k ‚â• 1, <b>Percentile_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un m√∫ltiplo de 1 / (n - 1), <b>percentil_exc</b> interpola para determinar el valor en el k-√©simo percentil. </para>
          <para>
            <b>Percentile_Exc</b> se interpola cuando el valor para el percentil especificado se encuentra entre dos valores de la matriz. Si no se interpola para el percentil, k especificado, Excel devolver√° #NUM! error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos que define la posici√≥n relativa.</param>
        <param name="Arg2">K: valor de percentil en el rango de 0 a 1, ambos incluidos.</param>
        <summary>Devuelve el k-√©simo percentil de los valores de un rango. Esta funci√≥n permite establecer un umbral de aceptaci√≥n. Por ejemplo, podr√° examinar a los candidatos cuya calificaci√≥n sea superior al nonag√©simo percentil.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Percentile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un valor no num√©rico, <b>Percentile_Inc</b> devuelve #VALUE! valor de error. </para>
          <para>Si k es &lt; 0 o si k &gt; 1, <b>Percentile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un m√∫ltiplo de 1 / (n - 1), <b>Percentile_Inc</b> interpola para determinar el valor en el k-√©simo percentil.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos con valores num√©rico que define la posici√≥n relativa.</param>
        <param name="Arg2">X: valor cuya clasificaci√≥n desea conocer.</param>
        <param name="Arg3">Cifra significativa: un valor opcional que identifica el n√∫mero de d√≠gitos significativos del valor de porcentaje devuelto. Si se omite, <b>PercentRank</b> utiliza tres d√≠gitos (0.xxx).</param>
        <summary>Devuelve el rango de un valor en un conjunto de datos como un porcentaje del conjunto de datos. Esta funci√≥n puede utilizarse para evaluar la posici√≥n relativa de un valor dentro de un conjunto de datos. Por ejemplo, puede utilizar <b>PercentRank</b> para evaluar la posici√≥n de una puntuaci√≥n de prueba de aptitud entre todos los resultados de la prueba.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> m√©todos.</para>
          <para>Si la matriz esta vac√≠o, <b>PercentRank</b> devuelve el #NUM! valor de error. </para>
          <para>Si cifra significativa &lt; mayor que 1, <b>PercentRank</b> devuelve el #NUM! valor de error. </para>
          <para>Si x no coincide con uno de los valores de matriz, <b>PercentRank</b> se interpola para devolver la clasificaci√≥n porcentual correcta.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos con valores num√©rico que define la posici√≥n relativa.</param>
        <param name="Arg2">X: valor cuya clasificaci√≥n desea conocer.</param>
        <param name="Arg3">Cifra significativa: un valor que identifica el n√∫mero de d√≠gitos significativos del valor de porcentaje devuelto. Si se omite, <b>PercentRank_Exc</b> utiliza tres d√≠gitos (0.xxx).</param>
        <summary>Devuelve el rango de un valor en un conjunto de datos como un porcentaje (de 0 a 1 exclusive) del conjunto de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Percentile_exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si cifra significativa &lt; 1, <b>Percentile_exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si x no coincide con uno de los valores de matriz, <b>PercentRank_Exc</b> interpola para devolver la clasificaci√≥n porcentual correcta.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos con valores num√©rico que define la posici√≥n relativa.</param>
        <param name="Arg2">X: valor cuya clasificaci√≥n desea conocer.</param>
        <param name="Arg3">Cifra significativa: un valor opcional que identifica el n√∫mero de d√≠gitos significativos del valor de porcentaje devuelto. Si se omite, <b>PercentRank_Inc</b> utiliza tres d√≠gitos (0.xxx).</param>
        <summary>Devuelve el rango de un valor en un conjunto de datos como un porcentaje (0.. 1, inclusive) del conjunto de datos. Esta funci√≥n puede utilizarse para evaluar la posici√≥n relativa de un valor dentro de un conjunto de datos. Por ejemplo, puede usar <b>PercentRank_Inc</b> para evaluar la posici√≥n de una puntuaci√≥n de prueba de aptitud entre todos los resultados de la prueba.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>PercentRank_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si cifra significativa &lt; 1, <b>PercentRank_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si x no coincide con uno de los valores de matriz, <b>PercentRank_Inc</b> interpola para devolver la clasificaci√≥n porcentual correcta.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: entero que describe el n√∫mero de objetos.</param>
        <param name="Arg2">Tama√±o: entero que describe el n√∫mero de objetos en cada permutaci√≥n.</param>
        <summary>Devuelve el n√∫mero de permutaciones para un n√∫mero determinado de objetos que pueden ser seleccionados de los objetos de n√∫mero. Una permutaci√≥n es un conjunto o subconjunto de objetos o eventos cuyo orden interno es importante. Las permutaciones difieren de las combinaciones, ya que en √©stas √∫ltimas el orden interno no es importante. Utilice esta funci√≥n para c√°lculos de probabilidad como la loter√≠a.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ambos argumentos se truncan a n√∫meros enteros.</para>
          <para>Si el argumento de n√∫mero o es un valor no num√©rico, <b>Permut</b> devuelve #VALUE! valor de error. </para>
          <para>Si n√∫mero ‚â§ 0 o si k &lt; 0, <b>Permut</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero &lt; tama√±o, <b>Permut</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n del n√∫mero de permutaciones es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para el n√∫mero de permutaciones</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero total de objetos.</param>
        <param name="Arg2">N√∫mero de objetos en cada permutaci√≥n.</param>
        <summary>Devuelve el n√∫mero de permutaciones para un n√∫mero determinado de objetos (con repeticiones) que se pueden seleccionar desde el n√∫mero total de objetos.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que se desea la densidad de la distribuci√≥n normal est√°ndar.</param>
        <summary>Devuelve el valor de la funci√≥n de densidad de una distribuci√≥n normal est√°ndar.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referencia: cadena de texto o referencia a una √∫nica celda o un rango de celdas que contienen una cadena de texto furigana.</param>
        <summary>Extrae los caracteres fon√©ticos (furigana) de una cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la referencia es un rango de celdas, se devuelve la cadena de texto furigana situada en la celda de la esquina superior izquierda del rango. </para>
          <para>Si la referencia es un rango de celdas no adyacentes, se devuelve el valor de error #N/A.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el n√∫mero 3,14159265358979, la constante matem√°tica pi, con una precisi√≥n de 15 d√≠gitos.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s del pr√©stamo.</param>
        <param name="Arg2">Nper: n√∫mero total de pagos del pr√©stamo.</param>
        <param name="Arg3">Va: valor actual o cantidad total que tiene en la actualidad una serie de pagos futuros; se conoce tambi√©n como el capital.</param>
        <param name="Arg4">Vf: valor futuro o saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento vf se omite, se supone que el valor es 0 (cero), es decir, el valor futuro de un pr√©stamo es 0.</param>
        <param name="Arg5">Tipo: n√∫mero 0 (cero) o 1 que indica el vencimiento de los pagos.</param>
        <summary>Calcula el pago de un pr√©stamo basado en pagos y una tasa de inter√©s constantes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Para obtener una descripci√≥n m√°s completa de los argumentos de <b>Pmt</b>, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> (funci√≥n).</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>El pago devuelvo por <b>Pmt</b> incluye el capital y el inter√©s, pero no los impuestos, los pagos de reserva o cuotas asociadas algunas veces a los pr√©stamos. </para>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con una tasa de inter√©s anual del 12 por ciento, use 12%/12 para el argumento de tasa y 4*12 para el argumento de n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: n√∫mero de eventos.</param>
        <param name="Arg2">Media: valor num√©rico previsto.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la distribuci√≥n de probabilidad devuelta. Si el argumento de acumulado es TRUE, POISSON devuelve la probabilidad acumulativa de Poisson de que el n√∫mero de eventos aleatorios producidos est√© entre cero y x, inclusive. Si es FALSE, devuelve la funci√≥n de probabilidad bruta de Poisson de que el n√∫mero de eventos producidos sea exactamente x.</param>
        <summary>Devuelve la distribuci√≥n de Poisson. Una aplicaci√≥n com√∫n de la distribuci√≥n de Poisson es prever el n√∫mero de eventos durante un per√≠odo de tiempo espec√≠fico, como los autom√≥viles que llegan a un peaje en un minuto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si el argumento de x no es un entero, se trunca.</para>
          <para>Si x o Media no es num√©rico, <b>Poisson</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Poisson</b> devuelve el #NUM! valor de error. </para>
          <para>Si Media ‚â§ 0, <b>Poisson</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>POISSON</b> se calcula de la siguiente manera. </para>
          <para>Para acumulado = <b>Falso</b>:</para>
          <para>En la figura 1: C√°lculo cuando acumulativo es falso</para>
          <para></para>
          <para></para>
          <para>Para acumulado = <b>Verdadero</b>:</para>
          <para>La figura 2: C√°lculo cuando acumulativo es true</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: n√∫mero de eventos.</param>
        <param name="Arg2">Media: valor num√©rico previsto.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la distribuci√≥n de probabilidad devuelta. Si acumulado es <b>true</b>, <b>Poisson_Dist</b> devuelve la probabilidad de Poisson de que el n√∫mero de eventos aleatorios producidos est√© entre 0 (cero) y x inclusive; Si <b>es false</b>, devuelve la funci√≥n de probabilidad bruta de Poisson que el n√∫mero de eventos que se produzca ser√° exactamente x.</param>
        <summary>Devuelve la distribuci√≥n de Poisson. Una de las aplicaciones comunes de la distribuci√≥n de Poisson es la predicci√≥n del n√∫mero de eventos en un determinado per√≠odo de tiempo, como por ejemplo, el n√∫mero de autom√≥viles que se presenta a una zona de peaje en el intervalo de un minuto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento de x no es un entero, se trunca.</para>
          <para>Si x o Media no son num√©ricos, <b>Poisson_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Poisson_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si Media ‚â§ 0, <b>Poisson_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>Poisson_Dist</b> se calcula de la siguiente manera. </para>
          <para>Para acumulado = <b>Falso</b>:</para>
          <para>En la figura 1: C√°lculo cuando acumulativo es falso</para>
          <para></para>
          <para></para>
          <para>Para acumulado = <b>Verdadero</b>:</para>
          <para>La figura 2: C√°lculo cuando acumulativo es true</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero base. Puede ser cualquier n√∫mero real.</param>
        <param name="Arg2">Potencia: exponente al que desea elevar el n√∫mero base.</param>
        <summary>Devuelve el resultado de elevar un n√∫mero a una potencia.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Per√≠odo: el per√≠odo, que debe encontrarse en el rango comprendido entre 1 y nper.</param>
        <param name="Arg3">Nper: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg4">Va: cantidad total que tiene en la actualidad una serie de pagos futuros.</param>
        <param name="Arg5">Vf: valor futuro o saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento vf se omite, se supone que el valor es 0 (cero), es decir, el valor futuro de un pr√©stamo es 0.</param>
        <param name="Arg6">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <summary>Devuelve el pago del capital en un determinado per√≠odo de una inversi√≥n, basado en pagos constantes peri√≥dicos y una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Para obtener una descripci√≥n m√°s completa de los argumentos de <b>Ppmt</b>, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Tasa: tasa de inter√©s nominal anual de un valor burs√°til.</param>
        <param name="Arg4">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg5">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg6">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg7">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de un valor burs√°til que paga una tasa de inter√©s peri√≥dica.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, frecuencia y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>precio</b> devuelve #VALUE! valor de error. </para>
          <para>Si rdto: rendimiento &lt; 0 o si tasa &lt; 0, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si rescate son menores que 0, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si la frecuencia es un n√∫mero distinto de 1, 2 o 4, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si la fecha de liquidaci√≥n ‚â• vencimiento, <b>Price</b> devuelve el #NUM! valor de error. <b>Price</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para Price (m√©todo)</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>DSC = n√∫mero de d√≠as desde el argumento de liquidaci√≥n hasta la fecha del pr√≥ximo cup√≥n.</para>
          <para>E = n√∫mero de d√≠as de un per√≠odo de cup√≥n en el que se encuentra la fecha de liquidaci√≥n.</para>
          <para>N = n√∫mero de cupones pagaderos entre la fecha de liquidaci√≥n y la fecha de rescate.</para>
          <para>A = n√∫mero de d√≠as desde el principio del per√≠odo de un cup√≥n hasta la fecha de liquidaci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Descuento: tasa de descuento del valor burs√°til.</param>
        <param name="Arg4">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de un valor burs√°til con descuento.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>PriceDisc</b> devuelve #VALUE! valor de error. </para>
          <para>Si descuento ‚â§ 0 o si rescate son menores que 0, <b>PriceDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>PriceDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>PriceDisc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>PriceDisc</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para PriceDisc (m√©todo)</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as de un a√±o, dependiendo de la base anual.</para>
          <para>DSM = n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til, expresada como n√∫mero de serie.</param>
        <param name="Arg4">Tasa: tasa de inter√©s en la fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg5">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de un valor burs√°til que genera intereses al vencimiento.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n, vencimiento o emisi√≥n no es una fecha v√°lida, <b>PriceMat</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa &lt; 0 o si rdto: rendimiento &lt; 0, <b>PriceMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>PriceMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>PriceMat</b> devuelve el #NUM! valor de error. <b>PriceMat</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para PriceMat (m√©todo)</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as de un a√±o, dependiendo de la base anual.</para>
          <para>DSM = n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento.</para>
          <para>DIM = n√∫mero de d√≠as entre emisi√≥n y de vencimiento.</para>
          <para>A = n√∫mero de d√≠as entre emisi√≥n y el argumento de liquidaci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango_x: rango de valores num√©ricos de x con el que hay probabilidades asociadas.</param>
        <param name="Arg2">Rango_probabilidad: conjunto de probabilidades asociado a valores del rango_x.</param>
        <param name="Arg3">L√≠mite_inf: l√≠mite inferior del valor para el que se desea obtener una probabilidad.</param>
        <param name="Arg4">L√≠mite_sup: l√≠mite superior opcional del valor para el que se desea obtener una probabilidad.</param>
        <summary>Devuelve la probabilidad de que los valores de un rango se encuentren entre dos l√≠mites. Si no se especifica el argumento de l√≠mite_sup, se devuelve la probabilidad de que los valores del argumento de rango_x sean iguales al argumento de l√≠mite_inf.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si alg√∫n valor de rango_probabilidad ‚â§ 0 o si alg√∫n valor de rango_probabilidad &gt; 1, <b>Prob</b> devuelve el #NUM! valor de error. </para>
          <para>Si la suma de los valores de rango_probabilidad ¬π 1, <b>Prob</b> devuelve el #NUM! valor de error. </para>
          <para>Si se omite el argumento l√≠mite_sup, <b>Prob</b> devuelve la probabilidad de que sea igual al argumento de l√≠mite_inf. </para>
          <para>Si los argumentos de rango_x y rango_probabilidad contienen un n√∫mero diferente de puntos de datos, <b>Prob</b> devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos que desea multiplicar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplica todos los n√∫meros especificados como argumentos y devuelve el producto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Se tienen en cuenta los argumentos que son n√∫meros, valores l√≥gicos o representaciones textuales de n√∫meros; los argumentos que son valores de error o texto que no se convierten en n√∫meros causan un error. </para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se omiten las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto incluido entre comillas, una f√≥rmula que devuelve texto o una referencia a una celda que contiene el texto que desea convertir parcialmente a may√∫sculas.</param>
        <summary>Pone en may√∫sculas la primera letra de una cadena de texto y cualquier otra letra del texto que aparezca detr√°s de un car√°cter distinto de una letra. Convierte todas las dem√°s letras a letras min√∫sculas.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo. Por ejemplo, si obtiene un pr√©stamo para la compra de un autom√≥vil con una tasa de inter√©s anual del 10% y realiza los pagos mensualmente, la tasa de inter√©s al mes es 10%/12 √≥ 0,83%. En tal caso, en la f√≥rmula deber√≠a especificar 10%/12, 0,83% √≥ 0,0083 como tasa.</param>
        <param name="Arg2">Nper: n√∫mero total de per√≠odos de pago en una anualidad. Por ejemplo, si obtiene un pr√©stamo para la compra de un autom√≥vil a cuatro a√±os y realiza pagos mensuales, el pr√©stamo tiene 4*12 (o 48) per√≠odos. En tal caso, deber√≠a especificar 48 en la f√≥rmula como argumento nper.</param>
        <param name="Arg3">Pago: pago efectuado en cada per√≠odo, que no puede variar durante la vigencia de la anualidad. Generalmente el argumento de pago incluye el capital y el inter√©s, pero no incluye ning√∫n otro arancel o impuesto. Por ejemplo, los pagos mensuales de un pr√©stamo a cuatro a√±os de 10.000 $ al 12% son de 263,33 $. En ese caso, en la f√≥rmula deber√≠a especificar -263,33 como pago. Si se omite este argumento, deber√° incluirse el argumento vf.</param>
        <param name="Arg4">Vf: valor futuro o saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0). Por ejemplo, si desea ahorrar 50.000 $ para pagar un determinado proyecto en 18 a√±os, el valor futuro es 50.000 $. A continuaci√≥n, podr√≠a hacer una estimaci√≥n conservadora a cierto tipo de inter√©s y determinar cu√°nto debe ahorrar cada mes. Si se omite este argumento, debe incluirse el argumento de pago.</param>
        <param name="Arg5">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <summary>Devuelve el valor actual de una inversi√≥n. El valor actual es la cantidad total que tiene actualmente la suma de una serie de pagos futuros. Por ejemplo, cuando se presta dinero, el importe del pr√©stamo es el valor actual para el prestamista.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos. </para>
          <para>Las funciones siguientes se aplican a anualidades: </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Una anualidad es una serie de pagos constantes en efectivo realizados durante un per√≠odo continuo. Por ejemplo, un pr√©stamo de autom√≥vil o una hipoteca es una anualidad. Para obtener m√°s informaci√≥n, vea la descripci√≥n de cada funci√≥n de anualidades. </para>
          <para>En las funciones de anualidad, el efectivo que se paga, como un dep√≥sito en una cuenta de ahorros, se representa con n√∫meros negativos; el efectivo que se recibe, como los cheques de dividendos, se representa con n√∫meros positivos. Por ejemplo, un dep√≥sito de 1.000 $ en el banco se representar√≠a mediante el argumento -1000 si es el depositante y mediante el argumento 1000 si es el banco. </para>
          <para>Microsoft Excel resuelve un argumento financiero en funci√≥n de los otros. Si la tasa no es 0, entonces: 

 </para>
          <para>La figura 1: Ecuaci√≥n cuando la tasa no es 0</para>
          <para></para>
          <para></para>
          <para>Si la tasa es 0, entonces:</para>
          <para>(pago * nper) + VP + vf = 0</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de celdas de valores num√©ricos cuyo cuartil se desea obtener.</param>
        <param name="Arg2">Cuartil: indica el valor que se debe devolver.</param>
        <summary>Devuelve el cuartil de un conjunto de datos. Los cuartiles se usan a menudo en ventas y los datos de la encuesta para dividir las poblaciones en grupos. Por ejemplo, puede utilizar <b>Quartile</b> para determinar el 25 por ciento de ingresos m√°s altos en una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> m√©todos.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>El valor m√≠nimo</description>
            </item>
            <item>
              <term>1</term>
              <description>El primer cuartil (percentil 25)</description>
            </item>
            <item>
              <term>2</term>
              <description>El valor de la mediana (percentil 50)</description>
            </item>
            <item>
              <term>3</term>
              <description>El tercer cuartil (percentil 75)</description>
            </item>
            <item>
              <term>4</term>
              <description>El valor m√°ximo</description>
            </item>
          </list>
          <para>Si la matriz esta vac√≠o, <b>Quartile</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de cuartil no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento de cuartil &lt; 0 o si el argumento de cuartil &gt; 4, <b>Quartile</b> devuelve el #NUM! valor de error. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> devuelven el mismo valor que <b>Quartile</b> cuando el argumento cuartil es igual a 0 (cero), 2 y 4, respectivamente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o celda rango de valores num√©ricos cuyo cuartil se desea obtener.</param>
        <param name="Arg2">Cuartil: valor que se debe devolver.</param>
        <summary>Devuelve el cuartil del conjunto de datos, seg√∫n los valores de percentil de 0 a 1, ambos no incluidos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Quartile_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de cuartil no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento de cuartil ‚â§ 0 o si el argumento Cuartil ‚â• 4, <b>Quartile_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> devuelven el mismo valor que <b>Quartile_Exc</b> cuando el argumento cuartil es igual a 0 (cero), 2 y 4, respectivamente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de celdas de valores num√©ricos cuyo cuartil se desea obtener.</param>
        <param name="Arg2">Cuartil: valor que se debe devolver.</param>
        <summary>Devuelve el cuartil del conjunto de datos, seg√∫n los valores de percentil de 0 a 1, ambos incluidos. Los cuartiles se usan con frecuencia en los datos de ventas y encuestas para dividir las poblaciones en grupos. Por ejemplo, puede usar QUARTILE_INC para determinar el 25% de los ingresos m√°s altos en una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Quartile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de cuartil no es un n√∫mero entero, se trunca.</para>
          <para>Si el argumento de cuartil &lt; 0 o si el argumento de cuartil &gt; 4, <b>Quartile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> devuelven el mismo valor que <b>Quartile_Inc</b> cuando el argumento cuartil es igual a 0 (cero), 2 y 4, respectivamente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numerador: el dividendo.</param>
        <param name="Arg2">Denominador: el divisor.</param>
        <summary>Devuelve la parte entera de una divisi√≥n. Use este m√©todo cuando desee descartar el resto de una divisi√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>Quotient</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo: √°ngulo expresado en grados que se desea convertir.</param>
        <summary>Convierte grados en radianes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inferior: n√∫mero entero m√°s bajo que devolver√° RANDBETWEEN.</param>
        <param name="Arg2">Superior: n√∫mero entero m√°s alto que devolver√° RANDBETWEEN.</param>
        <summary>Devuelve un n√∫mero entero aleatorio entre los n√∫meros que especifique. Devuelve un nuevo n√∫mero entero aleatorio cada vez que se calcula la hoja de c√°lculo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero cuya jerarqu√≠a se desea conocer.</param>
        <param name="Arg2">Referencia: matriz de una lista de n√∫meros o referencia a ella. Los valores no num√©ricos se pasan por alto.</param>
        <param name="Arg3">Orden: n√∫mero que especifica c√≥mo se debe clasificar el n√∫mero entero.</param>
        <summary>Devuelve la jerarqu√≠a de un n√∫mero en una lista de n√∫meros. La jerarqu√≠a de un n√∫mero es su tama√±o en comparaci√≥n con otros valores de la lista (si ordenara la lista, la jerarqu√≠a del n√∫mero ser√≠a su posici√≥n).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> m√©todos.</para>
          <para>Si el argumento orden es 0 (cero) o se omite, Microsoft Excel determina la jerarqu√≠a de un n√∫mero como si la lista definida por el argumento de referencia estuviese ordenada en forma descendente.</para>
          <para>Si el argumento de orden es distinto de cero, Microsoft Excel determina la jerarqu√≠a del n√∫mero como si la lista definida por el argumento de referencia estuviera ordenada en forma ascendente.</para>
          <para>
            <b>Clasificaci√≥n</b> proporciona el mismo rango de n√∫meros duplicados. Sin embargo, la presencia de n√∫meros duplicados afecta la jerarqu√≠a de los n√∫meros subsiguientes. Por ejemplo, en una lista de n√∫meros enteros ordenados en orden ascendente, si el n√∫mero 10 aparece dos veces y tiene una jerarqu√≠a de 5, 11 tendr√≠a una jerarqu√≠a de 7 (ning√∫n n√∫mero tendr√≠a jerarqu√≠a de 6).</para>
          <para>Para algunos fines uno podr√≠a ser conveniente utilizar una definici√≥n de jerarqu√≠a que tiene v√≠nculos en cuenta. En el ejemplo anterior, puede que desee una jerarqu√≠a revisada de 5,5 para el n√∫mero 10. Esto puede realizarse agregando el factor de correcci√≥n para el valor devuelto por <b>Rank</b>. Este factor de correcci√≥n es adecuado tanto para el caso de que una jerarqu√≠a se calcule en orden descendente (orden = 0 u omitido) o ascendente (orden = valor distinto de cero).</para>
          <para>Factor de correcci√≥n para jerarqu√≠as vinculado + 1 clasificaci√≥n de ‚Äì RANK (number, ref, 0) ‚Äì (n√∫mero, ref, 1)] / 2.</para>
          <para>En el ejemplo siguiente, RANK(A2,A1:A5,1) es igual a 3. El factor de correcci√≥n es (5 + 1 ‚Äì 2 ‚Äì 3) / 2 = 0,5 y la jerarqu√≠a revisada que tiene v√≠nculos en cuenta es 3 + 0,5 = 3,5. Si el n√∫mero se produce s√≥lo una vez en ref, el factor de correcci√≥n ser√° 0, ya que <b>el rango</b> no tiene que ser ajustados de una placa.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero cuya jerarqu√≠a se desea conocer.</param>
        <param name="Arg2">Referencia: matriz de una lista de n√∫meros o referencia a ella. Los valores no num√©ricos se pasan por alto.</param>
        <param name="Arg3">Orden: n√∫mero que especifica c√≥mo se debe clasificar el n√∫mero entero. Si el argumento orden es 0 (cero) o se omite, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma descendente. Si el orden es cualquier valor distinto de cero, Microsoft Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en orden ascendente.</param>
        <summary>Devuelve la jerarqu√≠a de un n√∫mero dentro de una lista, es decir, su tama√±o relativo a otros valores en la lista. Si m√°s de un valor tiene la misma jerarqu√≠a, se devuelve la jerarqu√≠a promedio.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero cuya jerarqu√≠a se desea conocer.</param>
        <param name="Arg2">Referencia: matriz de una lista de n√∫meros o referencia a ella. Los valores no num√©ricos se pasan por alto.</param>
        <param name="Arg3">Orden: n√∫mero que especifica c√≥mo se debe clasificar el n√∫mero.</param>
        <summary>Devuelve la jerarqu√≠a de un n√∫mero en una lista de n√∫meros. La jerarqu√≠a de un n√∫mero es su tama√±o en comparaci√≥n con otros valores de la lista (si ordenara la lista, la jerarqu√≠a del n√∫mero ser√≠a su posici√≥n).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento orden es 0 (cero) o se omite, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma descendente.</para>
          <para>Si el argumento orden es diferente de cero, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma ascendente.</para>
          <para>
            <b>Rank_Eq</b> proporciona el mismo rango de n√∫meros duplicados. Sin embargo, la presencia de n√∫meros duplicados afecta la jerarqu√≠a de los n√∫meros subsiguientes. Por ejemplo, en una lista de n√∫meros enteros ordenados en orden ascendente, si el n√∫mero 10 aparece dos veces y tiene una jerarqu√≠a de 5, 11 tendr√≠a una jerarqu√≠a de 7 (ning√∫n n√∫mero tendr√≠a jerarqu√≠a de 6).</para>
          <para>Para algunos fines es posible que desee usar una definici√≥n de jerarqu√≠a que tiene v√≠nculos en cuenta. En el ejemplo anterior, ¬ødesea una jerarqu√≠a revisada de 5,5 para el n√∫mero 10. Para ello, agregue el siguiente factor de correcci√≥n para el valor devuelto por <b>Rank_Eq</b>. Este factor de correcci√≥n es adecuado tanto para el caso de que una jerarqu√≠a se calcule en orden descendente (orden = 0 u omitido) o ascendente (orden = valor distinto de cero).</para>
          <para>Factor de correcci√≥n para jerarqu√≠as vinculado + 1 RANK_EQ ‚Äì RANK_EQ (n√∫mero, ref, 0) ‚Äì (n√∫mero, ref, 1)]/2.In en el siguiente ejemplo, RANK_EQ(A2,A1:A5,1) es igual a 3. El factor de correcci√≥n es (5 + 1 ‚Äì 2 ‚Äì 3) / 2 = 0,5 y la jerarqu√≠a revisada que tiene v√≠nculos en cuenta es 3 + 0,5 = 3,5. Si el n√∫mero se produce s√≥lo una vez en ref, el factor de correcci√≥n ser√° 0, ya que <b>Rank_Eq</b> no tiene que ser ajustados de una placa.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nper: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg2">Pago: pago efectuado en cada per√≠odo, que no puede variar durante la vida de la anualidad. Generalmente el argumento de pago incluye el capital y el inter√©s, pero no incluye ning√∫n otro arancel o impuesto. Si se omite el argumento de pago, deber√° incluirse el argumento de valor futuro.</param>
        <param name="Arg3">Va: cantidad total que tiene en la actualidad una serie de pagos futuros.</param>
        <param name="Arg4">Vf: valor futuro o un saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento de vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0).</param>
        <param name="Arg5">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <param name="Arg6">Estimaci√≥n: estimaci√≥n de la tasa de inter√©s.</param>
        <summary>Devuelve la tasa de inter√©s por per√≠odo de una anualidad. RATE se calcula por iteraci√≥n y puede tener cero o m√°s soluciones. Si los resultados sucesivos de RATE no convergen dentro de 0,0000001 despu√©s de 20 iteraciones, devuelve el valor de error #¬°NUM!</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Para obtener una descripci√≥n completa de los argumentos nper, pmt, va, vf y tipo, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Si se omite el argumento de estimaci√≥n, se supone que es el 10 por ciento.</para>
          <para>Si <b>tasa</b> no convergen, pruebe distintos valores para la estimaci√≥n. <b>Tasa</b> suele converger si la estimaci√≥n est√° entre 0 y 1.</para>
          <para>Mantenga uniformidad en el uso de las unidades con las que especifica los argumentos de estimaci√≥n y n√∫mero de per√≠odos. Si realiza pagos mensuales sobre un pr√©stamo de 4 a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para el argumento de estimaci√≥n y 4*12 para el argumento de n√∫mero de per√≠odos. Si realiza pagos anuales sobre el mismo pr√©stamo, use 12% para el argumento de estimaci√≥n y 4 para el argumento de n√∫mero de per√≠odos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Inversi√≥n: cantidad de dinero que se ha invertido en el valor burs√°til.</param>
        <param name="Arg4">Descuento: tasa de descuento del valor burs√°til.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la cantidad recibida al vencimiento de un valor burs√°til completamente invertido.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>Received</b> devuelve #VALUE! valor de error. </para>
          <para>Si inversi√≥n ‚â§ 0 o si descuento ‚â§ 0, <b>Received</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>Received</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• vencimiento, Received devuelve el #NUM! valor de error. <b>Received</b> se calcula de la siguiente manera: </para>
          <para>En la figura 1: Ecuaci√≥n para el m√©todo recibida</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en un a√±o, dependiendo de la base anual.</para>
          <para>DIM = n√∫mero de d√≠as entre emisi√≥n y de vencimiento.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto en el que se desea reemplazar algunos caracteres.</param>
        <param name="Arg2">La posici√≥n del car√°cter en <paramref name="Arg1" /> que desea reemplazar con <paramref name="Arg4" />.</param>
        <param name="Arg3">El n√∫mero de caracteres en <paramref name="Arg1" /> que desea que el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> m√©todo para reemplazar con <paramref name="Arg4" />.</param>
        <param name="Arg4">Texto que reemplazar√° los caracteres en <paramref name="Arg1" />.</param>
        <summary>Reemplaza parte de una cadena de texto por otra cadena, de acuerdo con el n√∫mero de caracteres especificado.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto original: texto en el que se desea reemplazar algunos caracteres.</param>
        <param name="Arg2">N√∫mero inicial: posici√≥n del car√°cter dentro del texto original que se desea reemplazar por el argumento de texto nuevo especificado.</param>
        <param name="Arg3">N√∫mero de caracteres: n√∫mero de caracteres del texto original que desea que REPLACE reemplace por el texto nuevo.</param>
        <param name="Arg4">Texto nuevo: texto que reemplazar√° los caracteres del argumento de texto original.</param>
        <summary>REPLACEB reemplaza parte de una cadena de texto, en funci√≥n del n√∫mero de bytes que especifique, por una cadena de texto diferente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> es para su uso con idiomas que utilizan el car√°cter de byte √∫nico conjunto (SBCS), mientras que <b>ReplaceB</b> est√° pensado para su uso con idiomas que utilizan el juego de caracteres de doble byte (DBCS). La configuraci√≥n de idioma predeterminado en su equipo afecta al valor devuelto de la siguiente manera:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />siempre cuenta cada car√°cter, ya sea de un byte o de doble byte, como 1, independientemente del idioma predeterminado. </para>
          <para>
            <b>ReplaceB</b> cuenta cada car√°cter de doble byte como 2 si se ha habilitado la edici√≥n de un idioma que admite DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo contrario, <b>ReplaceB</b> cuenta cada car√°cter como 1. </para>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto que se desea repetir.</param>
        <param name="Arg2">N√∫mero de veces: n√∫mero positivo que especifica el n√∫mero de veces que debe repetirse el texto.</param>
        <summary>Repite el texto un n√∫mero determinado de veces. Use el m√©todo Rept para llenar una celda con una cadena de texto repetida un n√∫mero determinado de veces.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si veces es 0 (cero), <b>Rept</b> devuelve "" (texto vac√≠o). </para>
          <para>
				Si el argumento de n√∫mero de veces no es un n√∫mero entero, se trunca.
</para>
          <para>El resultado del m√©todo <b>REPT</b> no puede tener m√°s de 32.767 caracteres, o el <b>m√©todo Rept</b> devuelve #VALUE!. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero ar√°bigo que se desea convertir.</param>
        <param name="Arg2">Forma: n√∫mero que especifica el tipo de n√∫mero romano que se desea obtener. El estilo de n√∫mero romano var√≠a entre cl√°sico y simplificado; cuanto m√°s aumenta el valor del argumento de forma, m√°s conciso es el estilo devuelto.</param>
        <summary>Convierte un n√∫mero ar√°bigo en romano, como texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 u omitida</term>
              <description>Cl√°sico.</description>
            </item>
            <item>
              <term>1</term>
              <description>M√°s conciso.</description>
            </item>
            <item>
              <term>2</term>
              <description>M√°s conciso.</description>
            </item>
            <item>
              <term>3</term>
              <description>M√°s conciso.</description>
            </item>
            <item>
              <term>4</term>
              <description>Simplificado.</description>
            </item>
            <item>
              <term>
                <b>True</b>
              </term>
              <description>Cl√°sico.</description>
            </item>
            <item>
              <term>
                <b>False</b>
              </term>
              <description>Simplificado.</description>
            </item>
          </list>
          <para>Si el argumento de n√∫mero es negativo, se devuelve el valor de error #¬°VALOR!</para>
          <para>Si el argumento de n√∫mero es mayor que 3999, se devuelve el valor de error #¬°VALOR!</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero que se desea redondear.</param>
        <param name="Arg2">N√∫mero de decimales: especifica el n√∫mero de d√≠gitos al que se desea redondear el argumento de n√∫mero.</param>
        <summary>Redondea un n√∫mero al n√∫mero de decimales especificado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento de n√∫mero de decimales es mayor que 0 (cero), el n√∫mero se redondear√° al n√∫mero de caracteres de decimales especificado. </para>
          <para>Si el argumento de n√∫mero de decimales es 0, n√∫mero se redondear√° al entero m√°s pr√≥ximo. </para>
          <para>Si el argumento de n√∫mero de decimales es menor que 0, el n√∫mero se redondear√° hacia la izquierda del separador decimal.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real que se desea redondear hacia abajo.</param>
        <param name="Arg2">N√∫mero de decimales: especifica el n√∫mero de d√≠gitos al que se desea redondear el argumento de n√∫mero.</param>
        <summary>Redondea un n√∫mero hacia abajo, hacia el cero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>RoundDown</b> es similar a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />, excepto que siempre redondea un n√∫mero hacia abajo. </para>
          <para>Si el argumento de n√∫mero de decimales es mayor que 0 (cero), el n√∫mero se redondea hacia abajo, hasta el n√∫mero de decimales especificado.</para>
          <para>Si el argumento de n√∫mero de decimales es 0, el n√∫mero se redondea hacia abajo hasta el entero m√°s pr√≥ximo.</para>
          <para>Si el argumento de n√∫mero de decimales es menor que 0, el n√∫mero se redondea hacia abajo, a la izquierda del separador decimal.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real que se desea redondear hacia arriba.</param>
        <param name="Arg2">N√∫mero de decimales: especifica el n√∫mero de d√≠gitos al que se desea redondear el argumento de n√∫mero.</param>
        <summary>Redondea un n√∫mero hacia arriba, en direcci√≥n contraria a cero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>RoundUp</b> es similar a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />, excepto que siempre redondea un n√∫mero de copia de seguridad. </para>
          <para>
				Si el argumento de n√∫mero de decimales es mayor que 0 (cero), el n√∫mero se redondea hacia arriba hasta el n√∫mero de decimales especificado.
</para>
          <para>
				Si el argumento de n√∫mero de decimales es 0, el n√∫mero se redondea hacia arriba, hasta el n√∫mero entero m√°s pr√≥ximo.
</para>
          <para>
				Si el argumento de n√∫mero de decimales es menor que 0, el n√∫mero se redondea hacia arriba, a la izquierda del separador decimal.
</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de per√≠odos de la inversi√≥n.</param>
        <param name="Arg2">Valor actual de la inversi√≥n.</param>
        <param name="Arg3">Valor futuro de la inversi√≥n.</param>
        <summary>Devuelve un tipo de inter√©s equivalente para el crecimiento de una inversi√≥n.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: matriz o rango de puntos de datos.</param>
        <param name="Arg2">Valores conocidos de x: matriz o rango de puntos de datos.</param>
        <summary>Devuelve el cuadrado del coeficiente de correlaci√≥n de momento del producto Pearson a trav√©s de los puntos de datos de valores conocidos de y y de valores conocidos de x. Para obtener m√°s informaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. El valor r cuadrado se puede interpretar como la proporci√≥n de la varianza de y que puede atribuirse a la varianza de x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si los valores conocidos de y y de valores conocidos de x est√°n vac√≠os o contienen un n√∫mero diferente de puntos de datos, <b>RSq</b> devuelve el valor de error # n/a. </para>
          <para>Si los valores conocidos de y y de valores conocidos de x contienen punto 1 solo los datos, <b>RSq</b> devuelve el #DIV/0! valor de error. </para>
          <para>La ecuaci√≥n para el coeficiente de correlaci√≥n producto momento de Pearson, r, es: 

 </para>
          <para>En la figura 1: Pearson coeficiente de correlaci√≥n producto</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de muestra AVERAGE(valores conocidos de x) y AVERAGE(valores conocidos de y).</para>
          <para>
            <b>RSq</b> devuelve r2, que es el cuadrado de este coeficiente de correlaci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Cadena que representa el identificador de programaci√≥n del servidor en tiempo real.</param>
        <param name="server">nombre de servidor, cadena <b>Null</b> o <b>vbNullString</b> constante.</param>
        <param name="topic1">
          <paramref name="topic1" />‚Äì<paramref name="topic28" /> Una <b>cadena</b> que representa un tema.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Este m√©todo conecta con un origen para recibir datos en tiempo real.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto buscado: texto que se desea encontrar.</param>
        <param name="Arg2">Dentro del texto: texto en el que se desea localizar el texto buscado.</param>
        <param name="Arg3">N√∫mero inicial: n√∫mero de car√°cter correspondiente del argumento de dentro del texto donde desea iniciar la b√∫squeda.</param>
        <summary>
          <b>B√∫squeda</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> buscar una cadena de texto dentro de una segunda cadena de texto y devolver el n√∫mero de la posici√≥n inicial de la primera cadena de texto desde el primer car√°cter de la segunda cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: <b>b√∫squeda</b> est√° pensada para su uso con idiomas que utilizan el juego de caracteres de un byte (SBCS), mientras que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> est√° establecido de est√° dise√±ado para su uso con idiomas que utilizan el car√°cter de doble byte (DBCS). La configuraci√≥n de idioma predeterminado en su equipo afecta al valor devuelto de la siguiente manera:<b>m√©todo Search</b> siempre cuenta cada car√°cter, si solo byte o de doble byte, como 1, independientemente del idioma predeterminado. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />cuenta cada car√°cter de doble byte como 2 si se ha habilitado la edici√≥n de un idioma que admite DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo contrario, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> cuenta cada car√°cter como 1.</para>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para>Usar la <b>b√∫squeda</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> para determinar la ubicaci√≥n de un car√°cter o cadena de texto dentro de otra cadena de texto para que se pueden utilizar el MID y MIDB o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> funciones para cambiar el texto. </para>
          <para>
            <b>B√∫squeda</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> no distinguen may√∫sculas de min√∫sculas. Si desea realizar una b√∫squeda distingue may√∫sculas de min√∫sculas, puede usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />. </para>
          <para>En el argumento de texto buscado se pueden utilizar los caracteres comod√≠n signo de interrogaci√≥n (?) y asterisco (*). El signo de interrogaci√≥n corresponde a un solo car√°cter cualquiera, y el asterisco equivale a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco reales, escriba una tilde (~) delante del car√°cter que desea buscar.</para>
          <para>Si no se encuentra el texto del argumento de texto buscado, se devuelve el valor de error #¬°VALOR!</para>
          <para>Si se omite el argumento de n√∫mero inicial, se supone que es 1.</para>
          <para>Si el valor del argumento de n√∫mero inicial no es mayor que 0 (cero), o si es mayor que la longitud del argumento de dentro del texto, se devuelve el valor de error #¬°VALOR!</para>
          <para>Use el argumento de n√∫mero inicial para omitir un n√∫mero especificado de caracteres. Uso <b>de b√∫squeda</b> como ejemplo, supongamos que est√° trabajando con la cadena de texto "AYF0093. AtuendoParaJ√≥venes "con hallar. Para buscar el n√∫mero de la primera "A" en la parte descriptiva de la cadena de texto, establezca igual a 8 n√∫mero_inicio para que no se busca en la parte correspondiente al n√∫mero de serie del texto. <b>B√∫squeda</b> comienza por el car√°cter 8, encuentra texto_buscado en el siguiente car√°cter y devuelve el n√∫mero 9. <b>Search</b> siempre devuelve el n√∫mero de caracteres desde el inicio de texto_continente, contando los caracteres omitidos si el argumento de n√∫mero inicial es mayor que 1.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto buscado: texto que se desea encontrar.</param>
        <param name="Arg2">Dentro del texto: texto en el que se desea localizar el texto buscado.</param>
        <param name="Arg3">N√∫mero inicial: n√∫mero de car√°cter correspondiente del argumento de dentro del texto donde desea iniciar la b√∫squeda.</param>
        <summary>Los m√©todos Search y SearchB buscan una cadena de texto dentro de una segunda cadena de texto y devuelven el n√∫mero de la posici√≥n inicial de la primera cadena de texto desde el primer car√°cter de la segunda cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: <b>b√∫squeda</b> est√° pensada para su uso con idiomas que utilizan el juego de caracteres de un byte (SBCS), mientras que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> est√° establecido de est√° dise√±ado para su uso con idiomas que utilizan el car√°cter de doble byte (DBCS). La configuraci√≥n de idioma predeterminado en su equipo afecta al valor devuelto de la siguiente manera:<b>m√©todo Search</b> siempre cuenta cada car√°cter, si solo byte o de doble byte, como 1, independientemente del idioma predeterminado. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />cuenta cada car√°cter de doble byte como 2 si se ha habilitado la edici√≥n de un idioma que admite DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo contrario, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> cuenta cada car√°cter como 1.</para>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para>Usar la <b>b√∫squeda</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> para determinar la ubicaci√≥n de un car√°cter o cadena de texto dentro de otra cadena de texto para que se pueden utilizar el MID y MIDB o <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> funciones para cambiar el texto. </para>
          <para>
            <b>B√∫squeda</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> no distinguen may√∫sculas de min√∫sculas. Si desea realizar una b√∫squeda distingue may√∫sculas de min√∫sculas, puede usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />. </para>
          <para>En el argumento de texto buscado se pueden utilizar los caracteres comod√≠n signo de interrogaci√≥n (?) y asterisco (*). El signo de interrogaci√≥n corresponde a un solo car√°cter cualquiera, y el asterisco equivale a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco reales, escriba una tilde (~) delante del car√°cter que desea buscar.</para>
          <para>Si no se encuentra el texto del argumento de texto buscado, se devuelve el valor de error #¬°VALOR!</para>
          <para>Si se omite el argumento de n√∫mero inicial, se supone que es 1.</para>
          <para>Si el valor del argumento de n√∫mero inicial no es mayor que 0 (cero), o si es mayor que la longitud del argumento de dentro del texto, se devuelve el valor de error #¬°VALOR!</para>
          <para>Use el argumento de n√∫mero inicial para omitir un n√∫mero especificado de caracteres. Uso <b>de b√∫squeda</b> como ejemplo, supongamos que est√° trabajando con la cadena de texto "AYF0093. AtuendoParaJ√≥venes "con hallar. Para buscar el n√∫mero de la primera "A" en la parte descriptiva de la cadena de texto, establezca igual a 8 n√∫mero_inicio para que no se busca en la parte correspondiente al n√∫mero de serie del texto. <b>B√∫squeda</b> comienza por el car√°cter 8, encuentra texto_buscado en el siguiente car√°cter y devuelve el n√∫mero 9. <b>Search</b> siempre devuelve el n√∫mero de caracteres desde el inicio de texto_continente, contando los caracteres omitidos si el argumento de n√∫mero inicial es mayor que 1.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo en radianes para el que desea que la secante.</param>
        <summary>Devuelve la secante de un √°ngulo.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo en radianes para el que desea que la secante hiperb√≥lica.</param>
        <summary>Devuelve la secante hiperb√≥lica de un √°ngulo.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: base especificada para la serie exponencial.</param>
        <param name="Arg2">N: exponente inicial al que se desea elevar la base x.</param>
        <param name="Arg3">M: paso en el que se debe incrementar el valor de N para cada t√©rmino de la serie.</param>
        <param name="Arg4">Coeficientes: conjunto de coeficientes por el que se multiplica cada exponente sucesivo de x. El n√∫mero de valores especificado en coeficientes determina el n√∫mero de t√©rminos de la serie exponencial. Por ejemplo, si hay tres valores en coeficientes, habr√° tres t√©rminos en la serie exponencial.</param>
        <summary>Devuelve la suma de una serie exponencial basada en la f√≥rmula: SERIES(x,n,m,a) = a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>SeriesSum</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real.</param>
        <summary>Devuelve el seno hiperb√≥lico de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La f√≥rmula para el seno hiperb√≥lico es:</para>
          <para>En la figura 1: F√≥rmula para el seno hiperb√≥lico</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2,...: de 1 a 30 argumentos cuya asimetr√≠a desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la asimetr√≠a de una distribuci√≥n. Esta funci√≥n caracteriza el grado de asimetr√≠a de una distribuci√≥n con respecto a su media. Una asimetr√≠a positiva indica una distribuci√≥n unilateral que se extiende hacia valores m√°s positivos. Una asimetr√≠a negativa indica una distribuci√≥n unilateral que se extiende hacia valores m√°s negativos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si hay menos de tres puntos de datos, o la desviaci√≥n est√°ndar es cero, <b>Skew</b> devuelve el #DIV/0! valor de error. </para>
          <para>La ecuaci√≥n para la asimetr√≠a se define como: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la asimetr√≠a</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg2">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg3">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg4">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg5">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg6">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg7">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg8">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg9">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg10">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg11">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg12">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg13">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg14">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg15">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg16">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg17">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg18">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg19">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg20">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg21">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg22">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg23">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg24">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg25">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg26">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg27">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg28">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg29">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <param name="Arg30">1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea que el sesgo de poblaci√≥n.</param>
        <summary>Devuelve la asimetr√≠a de una distribuci√≥n en funci√≥n de una poblaci√≥n: una caracterizaci√≥n del grado de asimetr√≠a de una distribuci√≥n alrededor de su Media.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo).</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <summary>Devuelve la depreciaci√≥n por m√©todo directo de un bien en un per√≠odo dado.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: matriz o rango de celdas que contiene puntos de datos num√©ricos dependientes.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de puntos de datos independientes.</param>
        <summary>Devuelve la pendiente de una l√≠nea de regresi√≥n lineal creada con los datos de los argumentos de valores conocidos de x e y. La pendiente es la distancia vertical dividida por la distancia horizontal entre dos puntos cualquiera de la recta, lo que corresponde a la tasa de cambio a lo largo de la l√≠nea de regresi√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los valores conocidos de y y de valores conocidos de x est√°n vac√≠os o contienen un n√∫mero diferente de puntos de datos, <b>Slope</b> devuelve el valor de error # n/a. </para>
          <para>La ecuaci√≥n para la pendiente de la l√≠nea de regresi√≥n es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la pendiente de la l√≠nea de regresi√≥n</para>
          <para></para>
          <para></para>
          <para>El algoritmo subyacente utilizado en la <b>pendiente</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> funciones es diferente del algoritmo subyacente utilizado en la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> (funci√≥n). La diferencia entre estos algoritmos puede producir resultados diferentes cuando datos est√°n pendiente e INTERSECCION. Por ejemplo, si los puntos de datos del argumento de los valores conocidos de y son 0 y los puntos de datos del argumento de x son 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Pendiente</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> devolver un #DIV/0! error. La <b>pendiente</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> algoritmo est√° dise√±ado para buscar una y solamente una respuesta, y en este caso puede haber m√°s de una respuesta. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />Devuelve un valor de 0. El <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> algoritmo est√° dise√±ado para devolver resultados razonables para los datos colineales y, en este caso se puede encontrar al menos una respuesta.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos num√©ricos cuyo k-√©simo menor valor se desea determinar.</param>
        <param name="Arg2">K: posici√≥n, dentro de la matriz o del rango de datos, de los datos que se van a devolver, determinada a partir del menor de los valores.</param>
        <summary>Devuelve el k-√©simo menor valor de un conjunto de datos. Utilice este m√©todo para devolver valores con una posici√≥n relativa espec√≠fica dentro de un conjunto de datos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Small</b> devuelve el #NUM! valor de error. </para>
          <para>Si se√±ala k ‚â§ 0 o si k excede el n√∫mero de datos, <b>Small</b> devuelve el #NUM! valor de error. </para>
          <para>Si n es el n√∫mero de puntos de datos del argumento de matriz, SMALL(array,1) devuelve el valor m√°s peque√±o y SMALL(array,n) el valor m√°s grande.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero que se multiplicar√° por pi.</param>
        <summary>Devuelve la ra√≠z cuadrada de un n√∫mero multiplicado por pi (n√∫mero * pi).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el n√∫mero &lt; 0, <b>SqrtPi</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor que se desea normalizar.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <summary>Devuelve un valor normalizado de una distribuci√≥n caracterizada por los argumentos de media y desviaci√≥n est√°ndar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento desv_est√°ndar ‚â§ 0, <b>Standardize</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para el valor normalizado es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para el valor normalizado</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar bas√°ndose en una muestra. La desviaci√≥n est√°ndar es la medida de la dispersi√≥n de los valores respecto a la media (valor promedio).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> (m√©todo).</para>
          <para>
            <b>StDev</b> supone que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, a continuaci√≥n, para calcular la desviaci√≥n est√°ndar mediante la <b>funci√≥n StDev</b>. </para>
          <para>La desviaci√≥n est√°ndar se calcula utilizando los m√©todos "no sesgada" o "n-1".</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>StDev</b> utiliza la f√≥rmula siguiente: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo StDev</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos num√©ricos correspondientes a una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de toda la poblaci√≥n, que se toma como argumentos. La desviaci√≥n est√°ndar es una medida de la dispersi√≥n de unos valores con respecto al promedio (la media).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>StDev_P</b> supone que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, a continuaci√≥n, para calcular la desviaci√≥n est√°ndar mediante <b>StDev_P</b>. </para>
          <para>Para muestras de gran tama√±o, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y <b>StDev_P</b> devuelven valores aproximadamente iguales. </para>
          <para>La desviaci√≥n est√°ndar se calcula mediante el m√©todo "con sesgo" o "n".</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>StDev_P</b> usa la f√≥rmula siguiente: </para>
          <para>En la figura 1: Ecuaci√≥n para el m√©todo DesvEst.p</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar bas√°ndose en una muestra. La desviaci√≥n est√°ndar es la medida de la dispersi√≥n de los valores respecto a la media (valor promedio).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>StDev_S</b> supone que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, a continuaci√≥n, para calcular la desviaci√≥n est√°ndar utilizando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>La desviaci√≥n est√°ndar se calcula utilizando los m√©todos "no sesgada" o "n-1".</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>StDev_S</b> usa la f√≥rmula siguiente: </para>
          <para>En la figura 1: Ecuaci√≥n para el m√©todo DesvEst.m</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de toda la poblaci√≥n, que se toma como argumentos. La desviaci√≥n est√°ndar es una medida de la dispersi√≥n de unos valores con respecto al promedio (la media).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> (m√©todo).</para>
          <para>
            <b>StDevP</b> supone que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, a continuaci√≥n, para calcular la desviaci√≥n est√°ndar utilizando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Para muestras de gran tama√±o, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y <b>StDevP</b> devuelven valores aproximadamente iguales. </para>
          <para>La desviaci√≥n est√°ndar se calcula mediante el m√©todo "con sesgo" o "n". Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros. </para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. <b>StDevP</b> utiliza la f√≥rmula siguiente: </para>
          <para>En la figura 1: Ecuaci√≥n para el m√©todo DesvEstP</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: matriz o rango de puntos de datos dependientes.</param>
        <param name="Arg2">Valores conocidos de x: matriz o rango de puntos de datos independientes.</param>
        <summary>Devuelve el error t√≠pico del valor de y previsto para cada x de la regresi√≥n. El error t√≠pico es una medida de la cuant√≠a de error en el pron√≥stico del valor de y para un valor individual de x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si los valores conocidos de y y de valores conocidos de x tienen un n√∫mero diferente de puntos de datos, <b>StEyx</b> devuelve el valor de error # n/a. </para>
          <para>Si los valores conocidos de y y de valores conocidos de x est√°n vac√≠os o contienen menos de tres puntos de datos, <b>StEyx</b> devuelve el #DIV/0! valor de error. </para>
          <para>La ecuaci√≥n para el error t√≠pico del valor de y pronosticado es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para el error t√≠pico del valor y pronosticado</para>
          <para></para>
          <para></para>
          <para>donde x e y son las medias de muestra AVERAGE(valores conocidos de x) y AVERAGE(valores conocidos de y) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto o referencia a una celda que contiene el texto en el que se desea sustituir caracteres.</param>
        <param name="Arg2">Texto original: texto que se desea reemplazar.</param>
        <param name="Arg3">Texto nuevo: texto por el que se desea reemplazar el texto original.</param>
        <param name="Arg4">N√∫mero de instancia: especifica la instancia del texto original que se desea reemplazar por el texto nuevo. Si se especifica el argumento de n√∫mero de instancia, s√≥lo se reemplazar√° esa instancia del texto original. De lo contrario, todas las apariciones del texto original se cambian por el texto nuevo.</param>
        <summary>El m√©todo Substitute reemplaza el texto nuevo por el texto original dentro de una cadena de texto. Utilice el m√©todo Substitute cuando desee reemplazar texto espec√≠fico en una cadena de texto; use el m√©todo Replace si desea reemplazar cualquier texto que aparezca en una ubicaci√≥n espec√≠fica dentro de una cadena de caracteres.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que indica la funci√≥n de agregaci√≥n que el m√©todo usa.</param>
        <param name="Arg2">La primera <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objeto para el que un subtotal se va a calcular.</param>
        <param name="Arg3">
          <paramref name="Arg3" />‚Äì<paramref name="Arg30" /> Subsiguientes <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objetos para la que se calculen un subtotal.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Crea subtotales.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuyo valor total o suma se desea obtener.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Suma todos los n√∫meros de un rango de celdas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Se toman en cuenta n√∫meros, valores l√≥gicos y representaciones textuales de n√∫meros escritos directamente en la lista de argumentos. </para>
          <para>Si un argumento es una matriz o referencia, se cuentan s√≥lo los n√∫meros de esa matriz o referencia. Se omiten las celdas vac√≠as, valores l√≥gicos o texto en la matriz o referencia. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango: rango de celdas que desean evaluar seg√∫n criterios.</param>
        <param name="Arg2">Criterios: los criterios en el formulario de un n√∫mero, expresi√≥n o texto que define las celdas que se agregar√°. Por ejemplo, los criterios pueden expresarse como 32, "32", "&gt;32" o "apples".</param>
        <param name="Arg3">Rango de suma: celdas reales que se deben sumar si sus celdas correspondientes en el rango cumplen los criterios. Si se omite el argumento de rango de suma, las celdas del rango se evaluar√°n seg√∫n los criterios y se sumar√°n si se cumplen dichos criterios.</param>
        <summary>Suma las celdas del rango que cumplen los criterios especificados.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>No es necesario que el rango especificado por el argumento de rango de suma tenga el mismo tama√±o y la forma que el argumento de rango. Las celdas reales que se deben sumar se determinan utilizando la celda superior izquierda del rango de suma como la celda inicial e incluyendo las celdas que corresponden con el tama√±o y la forma del rango. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>En los criterios pueden utilizarse los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El signo de interrogaci√≥n corresponde a un solo car√°cter cualquiera y el asterisco equivale a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco reales, escriba una tilde (~) antes del car√°cter que desea buscar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de suma: rango que se va a sumar.</param>
        <param name="Arg2">Rango de criterios 1, rango de criterios 2, ‚Ä¶: uno o m√°s rangos en los que evaluar los criterios asociados.</param>
        <param name="Arg3">Criterio 1, criterio 2... -uno o m√°s criterios en forma de n√∫mero, expresi√≥n, referencia de celda o texto que definen las celdas que se agregar√°. Por ejemplo, los criterios pueden expresarse como 32, "32", "&gt;32", "manzanas" o B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Suma las celdas de un rango que cumplen varios criterios.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Cada celda del rango de suma se suma s√≥lo si todos los criterios correspondientes especificados son verdaderos para dicha celda.</para>
          <para>Las celdas del rango de suma que contienen <b>true</b> se eval√∫an como 1; las celdas del rango de suma que contienen <b>false</b> se eval√∫an como 0 (cero). </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para>No es necesario que cada rango de criterios tenga el mismo tama√±o y forma que el rango de suma. Las celdas reales que se deben sumar se determinan utilizando la celda superior izquierda del argumento de rango de criterios como la celda inicial e incluyendo las celdas que corresponden con el tama√±o y la forma del rango de suma. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1, matriz 2, matriz 3, ...: de 2 a 30 matrices cuyos componentes desea multiplicar y despu√©s sumar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplica los componentes correspondientes de las matrices indicadas y devuelve la suma de esos productos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos de matriz deben tener las mismas dimensiones. Si no lo hace, <b>SumProduct</b> devuelve #VALUE! valor de error. </para>
          <para>
            <b>SumProduct</b> trata las entradas de la matriz que no son num√©ricas, como si fueran ceros.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos de los cuales desea calcular la suma de los cuadrados. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la suma de los cuadrados de los argumentos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros. </para>
          <para>Se toman en cuenta n√∫meros, valores l√≥gicos y representaciones textuales de n√∫meros escritos directamente en la lista de argumentos. </para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de x: primera matriz o rango de valores.</param>
        <param name="Arg2">Matriz de y: segunda matriz o rango de valores.</param>
        <summary>Devuelve la suma de la diferencia de los cuadrados entre los valores correspondientes en dos matrices.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los argumentos matriz x y matriz y tienen a un n√∫mero diferente de valores, <b>SumX2MY2returns</b> el valor de error # n/a. </para>
          <para>La ecuaci√≥n para la suma de la diferencia de cuadrados es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la suma de la diferencia de cuadrados</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de x: primera matriz o rango de valores.</param>
        <param name="Arg2">Matriz de y: segunda matriz o rango de valores.</param>
        <summary>Devuelve el sumatorio de la suma de cuadrados entre los valores correspondientes en dos matrices. El sumatorio de la suma de cuadrados es un t√©rmino com√∫n en muchas operaciones estad√≠sticas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los argumentos matriz x y matriz y tienen un n√∫mero diferente de valores, <b>SumX2PY2</b> devuelve el valor de error # n/a. </para>
          <para>La ecuaci√≥n para el sumatorio de la suma de cuadrados es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la suma de la suma de los cuadrados</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de x: primera matriz o rango de valores.</param>
        <param name="Arg2">Matriz de y: segunda matriz o rango de valores.</param>
        <summary>Devuelve la suma de los cuadrados de las diferencias entre los valores correspondientes en dos matrices.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si los argumentos matriz x y matriz y tienen un n√∫mero diferente de valores, <b>SumXMY2</b> devuelve el valor de error # n/a. </para>
          <para>La ecuaci√≥n para la suma de la diferencia de cuadrados es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la suma de los cuadrados de las diferencias</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo).</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo: per√≠odo, que debe utilizar las mismas unidades que el argumento de vida.</param>
        <summary>Devuelve la depreciaci√≥n de un activo por suma de d√≠gitos de los a√±os de durante un per√≠odo espec√≠fico.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>SYD</b> se calcula de la siguiente manera:</para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo Syd</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero entero que indica el n√∫mero de grados de libertad.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si acumulado es <b>true</b>, <b>T_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; Si es <b>false</b>, devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve una distribuci√≥n t de Student donde un valor num√©rico (x) es un valor calculado de t para el que se calculan los puntos porcentuales.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>T_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si grados_de_libertad &lt; 1, <b>T_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0 y, a continuaci√≥n, <b>T_Dist</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero entero que indica el n√∫mero de grados de libertad.</param>
        <summary>Devuelve la distribuci√≥n t de Student de dos colas.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>T_Dist_2T</b> devuelve #VALUE! valor de error. </para>
          <para>Si grados_de_libertad &lt; 1, <b>T_Dist_2T</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0 y, a continuaci√≥n, <b>T_Dist_2T</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero entero que indica el n√∫mero de grados de libertad.</param>
        <summary>Devuelve la distribuci√≥n t de Student de cola derecha, donde un valor num√©rico (x) es un valor calculado de t para el que se van a calcular los puntos porcentuales. La distribuci√≥n t se usa en las pruebas de hip√≥tesis de conjuntos de datos de muestras peque√±as. Use esta funci√≥n en lugar de una tabla de valores cr√≠ticos de la distribuci√≥n t.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si uno de los argumentos no es num√©rico, <b>T_Dist_RT</b> devuelve #VALUE! valor de error. </para>
          <para>Si grados_de_libertad &lt; 1, <b>T_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Los argumentos de grados de libertad y de colas se truncan a enteros.</para>
          <para>Si el argumento colas es cualquier valor distinto de 1 o 2, <b>T_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0 y, a continuaci√≥n, <b>T_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento colas = 1, <b>T_Dist_RT</b> se calcula como T_DIST_RT = P (X&gt;x), donde X es una variable aleatoria que sigue la distribuci√≥n t de. Si el argumento colas = 2, <b>T_Dist_RT</b> se calcula como T_DIST_RT = P (| X | &gt; x) = P (X &gt; x o X &lt; - x). </para>
          <para>Dado que x &lt; 0 no est√° permitido, para usar <b>T_Dist_RT</b> cuando x &lt; 0, tenga en cuenta que T_DIST_RT(-x,df) = 1 ‚Äì T_DIST_RT(x,df) = P (X &gt; - x) y T_DIST_2T(-x,df) = T_DIST_2T(x df) = P (| X | &gt; x).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n t de Student.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero de grados de libertad que caracteriza la distribuci√≥n.</param>
        <summary>Devuelve el inverso de la distribuci√≥n t de Student de cola izquierda.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>T_Inv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>T_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento grados_de_libertad no es un entero, se trunca.</para>
          <para>Si grados_de_libertad &lt; 1, <b>T_Inv</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n t de Student de dos colas.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero de grados de libertad que caracteriza la distribuci√≥n.</param>
        <summary>Devuelve el valor t de la distribuci√≥n t de Student en funci√≥n de la probabilidad y los grados de libertad.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>T_Inv_2T</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>T_Inv_2T</b> devuelve el #NUM! valor de error. Si el n√∫mero de grados de libertad no es un entero, se trunca. </para>
          <para>Si grados_de_libertad &lt; 1, <b>T_Inv_2T</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>T_Inv_2T</b> devuelve el valor t, tal que P (| X | &gt; t) = probabilidad donde X es una variable aleatoria que sigue la distribuci√≥n t y P (| X | &gt; t) = P (X &lt; -t o X &gt; t). </para>
          <para>Puede devolverse un valor t de una cola reemplazando probabilidad con probabilidad de*2. Para una probabilidad de 0,05 y grados de libertad de 10, el valor de dos colas se calcula con T_INV_2T(0.05,10), que devuelve 2,28139. El valor de una cola para la misma probabilidad y los grados de libertad puede calcularse con T_INV_2T(2*0.05,10), que devuelve 1,812462. </para>
          <para>
            <b>Nota</b>: en algunas tablas, la probabilidad se describe como (1-p).</para>
          <para>Dado un valor de probabilidad <b>T_Inv_2T</b> busca un valor de x tal que T_DIST_RT (x, grados_de_libertad, 2) = probabilidad. Por lo tanto, la precisi√≥n de <b>T_Inv_2T</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />. <b>T_Inv_2T</b> usa una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no ha convergido despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error # n/a.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primer conjunto de datos.</param>
        <param name="Arg2">Matriz 2: segundo conjunto de datos.</param>
        <param name="Arg3">Colas - especifica el n√∫mero de colas de distribuci√≥n. Si el argumento colas = 1, <b>T_Test</b> utiliza la distribuci√≥n de una cola. Si el argumento colas = 2, <b>T_Test</b> utiliza la distribuci√≥n de dos colas.</param>
        <param name="Arg4">Tipo: tipo de prueba t que se debe realizar.</param>
        <summary>Devuelve la probabilidad asociada con la prueba t de Student. Use T_TEST para determinar la probabilidad de que dos muestras puedan proceder de dos poblaciones subyacentes con igual media.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si los argumentos matriz1 y matriz2 tienen un n√∫mero diferente de puntos de datos y el tipo = 1 devuelve <b>T_Test</b> (emparejados), el valor de error # n/a. </para>
          <para>Los argumentos de colas y de tipo se truncan a enteros.</para>
          <para>Si el argumento de colas o tipo no es num√©rico, <b>T_Test</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento colas es cualquier valor distinto de 1 o 2, <b>T_Test</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>T_Test</b> utiliza los datos de los argumentos matriz1 y matriz2 para calcular una estad√≠stica t no negativo. Si el argumento colas = 1, <b>T_Test</b> devuelve la probabilidad de un valor m√°s alto de la estad√≠stica t en la suposici√≥n de que los argumentos matriz1 y matriz2 son ejemplos de poblaciones con la misma Media. El valor devuelto por <b>T_Test</b> cuando el argumento de colas = 2 es de tipo double que se devuelve cuando argumento de colas es = 1 y corresponde a la probabilidad de un valor absoluto m√°s elevado de la estad√≠stica t en el supuesto de "medias de poblaci√≥n iguales".</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real.</param>
        <summary>Devuelve la tangente hiperb√≥lica de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La f√≥rmula para la tangente hiperb√≥lica es:</para>
          <para>En la figura 1: F√≥rmula para la tangente hiperb√≥lica</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n de la letra del Tesoro. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere la letra del Tesoro.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento de la letra del Tesoro. La fecha de vencimiento es aquella en que expira la letra del Tesoro.</param>
        <param name="Arg3">ImportantDates debe especificarse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto. Descuento: tasa de descuento de la letra del Tesoro.</param>
        <summary>Devuelve el rendimiento de un bono equivalente a una letra del Tesoro (de EE.UU.).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los argumentos de liquidaci√≥n y vencimiento se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>TBillEq</b> devuelve #VALUE! valor de error. </para>
          <para>Si el descuento ‚â§ 0, <b>TBillEq</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n &gt; el de vencimiento, o si el vencimiento es m√°s de un a√±o despu√©s de la fecha de liquidaci√≥n, <b>TBillEq</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TBillEq</b> se calcula como TBILLEQ = (365 x tasa) / (360-(tasa x DSM)), donde DSM es el n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento, calculado seg√∫n la base de 360 d√≠as por a√±o.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n de la letra del Tesoro. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere la letra del Tesoro.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento de la letra del Tesoro. La fecha de vencimiento es aquella en que expira la letra del Tesoro.</param>
        <param name="Arg3">Descuento: tasa de descuento de la letra del Tesoro.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de una letra del Tesoro (de EE.UU.).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los argumentos de liquidaci√≥n y vencimiento se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>TBillPrice</b> devuelve #VALUE! valor de error. </para>
          <para>Si el descuento ‚â§ 0, <b>TBillPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n &gt; el de vencimiento, o si el vencimiento es m√°s de un a√±o despu√©s de la fecha de liquidaci√≥n, <b>TBillPrice</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TBillPrice</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo TBillPrice</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>DSM = n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento, excluyendo cualquier fecha de vencimiento que m√°s de un a√±o despu√©s de la fecha de liquidaci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n de la letra del Tesoro. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere la letra del Tesoro.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento de la letra del Tesoro. La fecha de vencimiento es aquella en que expira la letra del Tesoro.</param>
        <param name="Arg3">Precio: precio de la letra del Tesoro por cada 100 $ de valor nominal.</param>
        <summary>Devuelve el rendimiento de una letra del Tesoro (de EE.UU.).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los argumentos de liquidaci√≥n y vencimiento se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>TBillYield</b> devuelve #VALUE! valor de error. </para>
          <para>Si el precio ‚â§ 0, <b>TBillYield</b> devuelve el #NUM! valor de error. </para>
          <para>Si el de vencimiento mayor o igual que el argumento de liquidaci√≥n, o si el vencimiento es m√°s de un a√±o despu√©s de la fecha de liquidaci√≥n, <b>TBillYield</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TBillYield</b> se calcula de la siguiente manera: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo TBillYield</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>DSM = n√∫mero de d√≠as entre el argumento de liquidaci√≥n y vencimiento, excluyendo cualquier fecha de vencimiento que m√°s de un a√±o despu√©s de la fecha de liquidaci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Grados de libertad: n√∫mero entero que indica el n√∫mero de grados de libertad.</param>
        <param name="Arg3">Colas: especifica el n√∫mero de colas de la distribuci√≥n que deben devolverse. Si el valor de colas es igual a 1, TDIST devuelve la distribuci√≥n de una cola. Si el n√∫mero de colas es 2, TDIST devuelve la distribuci√≥n de dos colas.</param>
        <summary>Devuelve los puntos porcentuales (probabilidad) de la distribuci√≥n t de Student, donde un valor num√©rico (x) es un valor calculado de t para el que deben calcularse los puntos porcentuales. La distribuci√≥n t de Student se utiliza para la comprobaci√≥n de pruebas de hip√≥tesis cuando el tama√±o de la muestra es peque√±o. Utilice esta funci√≥n en lugar de una tabla de valores cr√≠ticos para la distribuci√≥n t.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />, y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> m√©todos.</para>
          <para>Si uno de los argumentos no es num√©rico, <b>TDist</b> devuelve #VALUE! valor de error. </para>
          <para>Si grados_de_libertad &lt; 1, <b>TDist</b> devuelve el #NUM! valor de error. </para>
          <para>Los argumentos de grados de libertad y de colas se truncan a enteros.</para>
          <para>Si el argumento colas es cualquier valor distinto de 1 o 2, <b>TDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0 y, a continuaci√≥n, <b>TDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento colas = 1, <b>TDist</b> se calcula como TDIST = P (X&gt;x), donde X es una variable aleatoria que sigue la distribuci√≥n t de. Si el argumento colas = 2, <b>TDist</b> se calcula como TDIST = P (| X | &gt; x) = P (X &gt; x o X &lt; - x). </para>
          <para>Puesto que x &lt; 0 no est√° permitido, para usar <b>TDist</b> cuando x &lt; 0, tenga en cuenta que TDIST(-x,df,1) = 1 ‚Äì TDIST(x,df,1) = P (X &gt; - x) y TDIST(-x,df,2) = TDIST (x df, 2) = P (| X | &gt; x).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor num√©rico, f√≥rmula que eval√∫a el valor num√©rico o referencia a una celda que contiene un valor num√©rico.</param>
        <param name="Arg2">Formato num√©rico en forma de texto del cuadro Categor√≠a en la ficha N√∫mero del cuadro de di√°logo Formato de celdas.</param>
        <summary>Convierte en texto un valor con un formato num√©rico determinado.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n t de Student de dos colas.</param>
        <param name="Arg2">Grados de libertad: n√∫mero de grados de libertad que caracteriza la distribuci√≥n.</param>
        <summary>Devuelve el valor t de la distribuci√≥n t de Student como funci√≥n de la probabilidad y los grados de libertad.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre las nuevas funciones, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> m√©todos.</para>
          <para>Si cualquiera de los argumentos no es num√©rico, <b>TInv</b> devuelve #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>TInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si grados_de_libertad &lt; 1, <b>TInv</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TInv</b> devuelve el valor t, tal que P (| X | &gt; t) = probabilidad donde X es una variable aleatoria que sigue la distribuci√≥n t y P (| X | &gt; t) = P (X &lt; -t o X &gt; t). </para>
          <para>Puede devolverse un valor t de una cola reemplazando probabilidad con probabilidad de*2. Para una probabilidad de 0,05 y grados de libertad de 10, el valor de dos colas se calcula con TINV (0,05,10), que devuelve 2,28139. El valor de una cola para la misma probabilidad y los grados de libertad puede calcularse con TINV(2*0.05,10), que devuelve 1,812462. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de celdas de una hoja de c√°lculo que se desea transponer. La transposici√≥n de una matriz se crea utilizando la primera fila de la matriz como primera columna de la nueva matriz, la segunda fila de la matriz como segunda columna de la nueva matriz, y as√≠ sucesivamente.</param>
        <summary>Devuelve un rango de celdas vertical como un rango horizontal o viceversa. El m√©todo Transpose debe escribirse como una f√≥rmula de matriz en un rango que tenga el mismo n√∫mero de filas y columnas, respectivamente, que el n√∫mero de columnas y filas de una matriz. Utilice el m√©todo Transpose para cambiar la orientaci√≥n vertical y horizontal de una matriz en una hoja de c√°lculo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores conocidos de y en la relaci√≥n y = mx + b.</param>
        <param name="Arg2">Valores conocidos de x: conjunto opcional de valores de x que se conocen en la relaci√≥n y = mx+b.</param>
        <param name="Arg3">Nuevos valores de x: nuevos valores de x para los que se desea que el m√©todo Trend devuelva los correspondientes valores de y.</param>
        <param name="Arg4">Constante: valor l√≥gico que especifica si se ha de hacer que la constante b sea igual a 0.</param>
        <summary>Devuelve valores que resultan de una tendencia lineal. Ajusta una recta (calculada con el m√©todo de m√≠nimos cuadrados) a los valores de las matrices definidas por los argumentos de valores conocidos de y y de valores conocidos de x. Devuelve, a lo largo de esa recta, los valores de y correspondientes a la matriz definida por el argumento de nuevos valores de x especificado.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un vector (es decir, un rango compuesto por una fila o por una columna).</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>El argumento de nuevos valores de x debe incluir una columna (o una fila) para cada variable independiente, como ocurre con el argumento de valores conocidos de x. Por consiguiente, si el argumento de valores conocidos de y ocupa una sola columna, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de columnas. Si el argumento de valores de y conocidos ocupa una sola fila, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de filas.</para>
          <para>Si se omite el argumento de nuevos valores de x, se supone que es el mismo que el de valores conocidos de x.</para>
          <para>Si se omiten los argumentos de valores conocidos de x y de nuevos valores de x, se supone que son la matriz {1;2;3;...} que tiene el mismo tama√±o que el argumento de valores conocidos de y.</para>
          <para>Si constante es <b>true</b> o se omite, b se calcula normalmente. </para>
          <para>Si constante es <b>false</b>, b se establece igual a 0 (cero) y los valores de m se ajustan para que y = mx. </para>
          <para>Para obtener informaci√≥n acerca de c√≥mo Microsoft Excel ajusta una l√≠nea a los datos, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Puede utilizar <b>tendencia</b> para ajustar una curva polinomial por regresi√≥n respecto a la misma variable elevada a potencias diferentes. Por ejemplo, supongamos que la columna A contiene valores y y la columna B contiene valores de x. Puede escribir x ^ 2 en la columna C, x ^ 3 en la columna D y as√≠ sucesivamente y despu√©s calcular la regresi√≥n entre las columnas B y D en contraposici√≥n a la columna A. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para>Cuando especifique una constante matricial para un argumento, como valores conocidos de x, utilice punto y coma para separar los valores de una misma fila y barra inversa para separar las filas.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto del que se desea quitar espacios.</param>
        <summary>Elimina los espacios del texto, excepto el espacio normal que se deja entre palabras. Use el m√©todo Trim en texto procedente de otras aplicaciones que pueda contener espacios irregulares.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: se ha dise√±ado la funci√≥n <b>Trim</b> para recortar del texto los espacios ASCII de 7 bits (valor 32). En el juego de caracteres Unicode, hay un car√°cter de espacio adicional denominado el car√°cter de espacio de no separaci√≥n que tiene un valor decimal de 160. Este car√°cter se utiliza normalmente en las p√°ginas Web como la entidad HTML, <b> &amp;nbsp;</b>. Por s√≠ mismo, la funci√≥n <b>Trim</b> no quita este car√°cter de espacio de no separaci√≥n.</para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de valores que se desea acotar y cuya media se desea calcular.</param>
        <param name="Arg2">Porcentaje: n√∫mero fraccionario de puntos de datos que se excluyen del c√°lculo. Por ejemplo, si el argumento de porcentaje es igual a 0,2, se eliminar√°n cuatro puntos de un conjunto de datos de 20 puntos (20 x 0,2), dos de la parte superior y dos de la parte inferior.</param>
        <summary>Devuelve la media del interior del conjunto de datos. TRIMMEAN calcula la media de un conjunto de datos despu√©s de eliminar el porcentaje de los extremos inferior y superior de los puntos de datos. Puede utilizar esta funci√≥n cuando desee excluir del an√°lisis los valores extremos.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si porcentaje &lt; 0 o por ciento &gt; mayor que 1, <b>TrimMean</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TrimMean</b> redondea el n√∫mero de puntos de datos excluidos hasta el m√∫ltiplo de 2 m√°s pr√≥ximo. Si porcentaje = 0,1, 10 por ciento de 30 puntos de datos es igual a 3 puntos. Para la simetr√≠a, <b>TrimMean</b> excluye un √∫nico valor de la parte superior e inferior del conjunto de datos.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primer conjunto de datos.</param>
        <param name="Arg2">Matriz 2: segundo conjunto de datos.</param>
        <param name="Arg3">Colas: especifica el n√∫mero de colas de la distribuci√≥n. Si el argumento de colas es igual a 1, TTEST utiliza la distribuci√≥n de una cola. Si el argumento de colas es igual a 2, TTEST utiliza la distribuci√≥n de dos colas.</param>
        <param name="Arg4">Tipo: tipo de prueba t que se debe realizar.</param>
        <summary>Devuelve la probabilidad asociada con la prueba t de Student. Utilice TTEST para determinar la probabilidad de que dos muestras puedan proceder de dos poblaciones subyacentes con igual media.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> (m√©todo).</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>En observaciones por pares</description>
            </item>
            <item>
              <term>2</term>
              <description>En dos muestras con varianzas iguales (homosced√°stica)</description>
            </item>
            <item>
              <term>3</term>
              <description>En dos muestras con varianzas diferentes (heterosced√°stica)</description>
            </item>
          </list>
          <para>Si los argumentos matriz1 y matriz2 tienen un n√∫mero diferente de puntos de datos y el tipo = 1 devuelve <b>TTest</b> (emparejados), el valor de error # n/a. </para>
          <para>Los argumentos de colas y de tipo se truncan a enteros.</para>
          <para>Si el argumento de colas o tipo no es num√©rico, <b>TTest</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento colas es cualquier valor distinto de 1 o 2, <b>TTest</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TTest</b> utiliza los datos de los argumentos matriz1 y matriz2 para calcular una estad√≠stica t no negativo. Si el argumento colas = 1, <b>TTest</b> devuelve la probabilidad de un valor m√°s alto de la estad√≠stica t en la suposici√≥n de que los argumentos matriz1 y matriz2 son ejemplos de poblaciones con la misma Media. El valor devuelto por <b>TTest</b> cuando el argumento de colas = 2 es de tipo double que se devuelve cuando argumento de colas es = 1 y corresponde a la probabilidad de un valor absoluto m√°s elevado de la estad√≠stica t en el supuesto de "medias de poblaci√≥n iguales".</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de Unicode que representa un car√°cter.</param>
        <summary>Devuelve el car√°cter Unicode al que hace referencia el valor num√©rico determinado.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Car√°cter que desea que el valor de Unicode.</param>
        <summary>Devuelve el n√∫mero (punto de c√≥digo) correspondiente al primer car√°cter del texto.</summary>
        <returns>
          <b>DOBLE</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referencia a una celda que contiene un n√∫mero o una f√≥rmula que se eval√∫a en un n√∫mero.</param>
        <param name="Arg2">N√∫mero de d√≠gitos a la derecha del separador decimal. Si Arg2 es negativo, el n√∫mero se redondea hacia la izquierda del separador decimal. Si se omite el argumento de decimales, se calcular√° como 2.</param>
        <summary>Convierte un n√∫mero en formato de texto y le aplica un s√≠mbolo de moneda. El nombre del m√©todo (y el s√≠mbolo que aplica) depende de la configuraci√≥n de idioma.
</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>El m√©todo <b>USDollar</b> convierte a un n√∫mero en texto con formato de moneda, con los decimales redondeados a la posici√≥n especificada. El formato usado es $#, ## 0.00_);($#,##0.00).</para>
          <para>La principal diferencia entre dar formato a una celda que contiene un n√∫mero con el comando formato de celdas y dar formato a un n√∫mero directamente con la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> m√©todo es que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> convierte el resultado en texto. Un n√∫mero con formato con el comando formato de celdas sigue siendo un n√∫mero. Se puede seguir usando los n√∫meros con formato de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> en las f√≥rmulas, ya que Excel convierte los n√∫meros escritos como valores de texto a n√∫meros cuando calcula.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de una muestra.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var</b> supone que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, debe calcular la varianza utilizando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>Var</b> utiliza la f√≥rmula siguiente: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo Var</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos num√©ricos correspondientes a una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de toda la poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var_P</b> supone que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, debe calcular la varianza utilizando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>La ecuaci√≥n de <b>Var_P</b> es: </para>
          <para>En la figura 1: Ecuaci√≥n para la Var_P (m√©todo)</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de una muestra.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var_S</b> supone que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, debe calcular la varianza utilizando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>Var_S</b> usa la f√≥rmula siguiente: </para>
          <para>En la figura 1: Ecuaci√≥n para el m√©todo var.s</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos num√©ricos correspondientes a una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de toda la poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> (m√©todo).</para>
          <para>
            <b>VarP</b> supone que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, debe calcular la varianza utilizando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>La ecuaci√≥n de <b>VarP</b> es: </para>
          <para>La figura 1: Ecuaci√≥n para el m√©todo VarP</para>
          <para></para>
          <para></para>
          <para>donde x es la media de muestra PROMEDIO(n√∫mero1,n√∫mero2,‚Ä¶) y n es el tama√±o de la muestra.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo). Este valor puede ser 0.</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo inicial: per√≠odo inicial para el que se desea calcular la amortizaci√≥n. El argumento de per√≠odo inicial debe utilizar las mismas unidades que el argumento de vida.</param>
        <param name="Arg5">Per√≠odo final: per√≠odo final para el que se desea calcular la amortizaci√≥n. El argumento de per√≠odo inicial debe utilizar las mismas unidades que el argumento de vida.</param>
        <param name="Arg6">Factor: tasa del saldo. Si se omite un factor, se supone que es 2 (el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo). Si no desea usar el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo, cambie el argumento de factor. Para obtener una descripci√≥n del m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo, consulte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />.</param>
        <param name="Arg7">Sin cambios: valor l√≥gico que especifica si se deber√° cambiar al m√©todo directo de depreciaci√≥n cuando la depreciaci√≥n sea mayor que el c√°lculo del saldo en disminuci√≥n.</param>
        <summary>Devuelve la amortizaci√≥n de un activo durante un per√≠odo especificado, incluidos per√≠odos parciales, usando el m√©todo de amortizaci√≥n por doble depreciaci√≥n de saldo u otro m√©todo que se especifique. Las iniciales VDB corresponden a disminuci√≥n variable del saldo, en ingl√©s.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento de sin cambios es <b>true</b>, Microsoft Excel no cambia al m√©todo directo de depreciaci√≥n aun cuando la depreciaci√≥n sea mayor que el c√°lculo del saldo en disminuci√≥n. </para>
          <para>Si el argumento de sin cambios es <b>false</b> o se omite, Excel cambia al m√©todo directo de depreciaci√≥n cuando la depreciaci√≥n sea mayor que el c√°lculo del saldo en disminuci√≥n.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor buscado: valor que se va a buscar en la primera columna de la matriz de tabla. El argumento de valor buscado puede ser un valor o una referencia. Si valor buscado es inferior al menor de los valores de la primera columna de la matriz en la que realizar la b√∫squeda, VLookup devuelve el valor de error #N/A.</param>
        <param name="Arg2">Matriz de tabla: dos o m√°s columnas de datos. Utilice una referencia a un rango o un nombre de rango. Los valores de la primera columna de la tabla en la que se busca son los valores utilizados en el argumento de valor buscado. Estos valores pueden ser texto, n√∫meros o valores l√≥gicos. Las may√∫sculas y min√∫sculas del texto son equivalentes.</param>
        <param name="Arg3">Indicador de columna: n√∫mero de columna de la matriz en la que buscar y desde la que se deben devolver los valores coincidentes. Un valor de 1 para el argumento del indicador de columna devuelve el valor de la primera columna de la matriz de tabla, un valor de 2 devuelve el valor de la segunda columna de la matriz de tabla, y as√≠ sucesivamente.</param>
        <param name="Arg4">Rango de b√∫squeda: valor l√≥gico que especifica si desea que el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> m√©todo para encontrar una coincidencia exacta o aproximada:</param>
        <summary>Busca un valor espec√≠fico en la primer columna de una matriz de tabla y devuelve, en la misma fila, un valor de otra columna de dicha matriz de tabla.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>La V de <b>VLookup</b> significa vertical. Utilice el m√©todo <b>VLookup</b> en lugar de la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> m√©todo cuando los valores de comparaci√≥n se encuentran en una columna a la izquierda de los datos que desea buscar.</para>
          <para>Si indicador_columnas es menor que 1, el m√©todo <b>VLookup</b> genera un error. </para>
          <para>Si indicador_columnas es mayor que el n√∫mero de columnas de la matriz de tabla, el m√©todo <b>VLookup</b> genera un error.</para>
          <para>Si el rango de b√∫squeda es <b>true</b> o se omite, se devuelve una coincidencia exacta o aproximada. Si no se encuentra una coincidencia exacta, se devuelve el siguiente valor mayor que sea menor que el argumento de valor_buscado. </para>
          <para>Los valores de la primera columna de la matriz de deben colocarse en orden ascendente; de lo contrario, es posible que el m√©todo <b>VLookup</b> no devuelva el valor correcto.</para>
          <para>Si ordenado es <b>false</b>, el m√©todo <b>VLookup</b> s√≥lo buscar√° a una coincidencia exacta. En este caso, los valores de la primera columna de la matriz de no es necesario que se deben ordenar. Si hay dos o m√°s valores de la primera columna de la matriz de que coinciden con el valor_buscado, se usa el primer valor encontrado. Si no se encuentra una coincidencia exacta, se genera un error.</para>
          <para>Al buscar valores de texto en la primera columna de la matriz de, aseg√∫rese de que los datos de la primera columna de la matriz de no tienen el uso de seria espacios iniciales, incoherentes, espacios finales (' o ") y tipogr√°ficas (' o") entre comillas o caracteres no imprimibles. En estos casos, el m√©todo <b>VLookup</b> puede devolver un valor inesperado o incorrecto. Para obtener informaci√≥n acerca de c√≥mo limpiar o recortar los valores, consulte el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> m√©todos. Al buscar valores de n√∫mero o fecha, aseg√∫rese de que los datos de la primera columna de la matriz de no se almacenan como valores de texto. En este caso, el m√©todo <b>VLookup</b> puede devolver un valor inesperado o incorrecto. </para>
          <para>Si ordenado es <b>Falso</b> y valor_buscado es texto, a continuaci√≥n, puede usar los caracteres comod√≠n signo de interrogaci√≥n (?) y asterisco (*), en el argumento de valor_buscado. Un signo de interrogaci√≥n coincide con cualquier car√°cter √∫nico; un asterisco coincide con cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco, escriba una tilde (~) antes del car√°cter.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">La direcci√≥n URL del servicio web para realizar la solicitud HTTP GET a.</param>
        <summary>Funci√≥n subyacente que llama al servicio web de forma asincr√≥nica, mediante una solicitud HTTP GET y devuelve la respuesta.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de serie: n√∫mero secuencial que representa la fecha del d√≠a que desea buscar. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Tipo devuelto: n√∫mero que determina el tipo del valor devuelto.</param>
        <summary>Devuelve el d√≠a de la semana correspondiente a una fecha. De forma predeterminada, el d√≠a se devuelve como un n√∫mero entero entre 1 (domingo) y 7 (s√°bado).</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>1 u omitido</term>
              <description>N√∫meros del 1 (domingo) al 7 (s√°bado). Igual que en versiones anteriores de Microsoft Excel.</description>
            </item>
            <item>
              <term>2</term>
              <description>N√∫meros del 1 (lunes) al 7 (domingo).</description>
            </item>
            <item>
              <term>3</term>
              <description>N√∫meros del 0 (lunes) al 6 (domingo).</description>
            </item>
            <item>
              <term>11</term>
              <description>N√∫meros del 1 (lunes) al 7 (domingo).</description>
            </item>
            <item>
              <term>12</term>
              <description>N√∫meros del 1 (martes) al 7 (lunes)</description>
            </item>
            <item>
              <term>13</term>
              <description>N√∫meros del 1 (mi√©rcoles) al 7 (martes)</description>
            </item>
            <item>
              <term>14</term>
              <description>N√∫meros del 1 (jueves) al 7 (mi√©rcoles)</description>
            </item>
            <item>
              <term>15</term>
              <description>N√∫meros del 1 (viernes) al 7 (jueves)</description>
            </item>
            <item>
              <term>16</term>
              <description>N√∫meros del 1 (s√°bado) al 7 (viernes)</description>
            </item>
            <item>
              <term>17</term>
              <description>N√∫meros del 1 (domingo) al 7 (s√°bado)</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de serie: fecha contenida en una semana. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Tipo devuelto: n√∫mero que determina en qu√© d√≠a comienza la semana. El valor predeterminado es 1.</param>
        <summary>Devuelve un n√∫mero que indica d√≥nde est√° situada la semana num√©ricamente dentro un a√±o.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: la funci√≥n <b>WeekNum</b> considera la semana que contiene el 1 de enero para que sea la primera semana del a√±o. Sin embargo, hay un est√°ndar europeo que define la primera semana como uno con la mayor√≠a de d√≠as (cuatro o m√°s) en el nuevo a√±o. Esto significa que para los a√±os en el que tres d√≠as o menos en la primera semana de enero, la funci√≥n <b>WeekNum</b> devuelve n√∫meros de la semana que son incorrectos seg√∫n el est√°ndar europeo.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>El domingo. Los d√≠as de la semana se numeran del 1 al 7.</description>
            </item>
            <item>
              <term>2</term>
              <description>El lunes. Los d√≠as de la semana se numeran del 1 al 7.</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: determina la forma de la funci√≥n.</param>
        <summary>Devuelve la distribuci√≥n de Weibull. Utilice esta distribuci√≥n en los an√°lisis de confiabilidad para calcular, por ejemplo, el per√≠odo medio de vida de un dispositivo hasta que se produce un error.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> (m√©todo).</para>
          <para>Si los argumentos x, alfa o beta no son num√©ricos, <b>Weibull</b> devuelve #VALUE! valor de error. Si x &lt; 0, <b>Weibull</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Weibull</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa de Weibull es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa de Weibull</para>
          <para></para>
          <para></para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de probabilidad de Weibull es: 

</para>
          <para>La figura 2: Ecuaci√≥n para la densidad de probabilidad de Weibull</para>
          <para></para>
          <para></para>
          <para>Cuando alfa = 1, <b>Weibull</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: determina la forma de la funci√≥n.</param>
        <summary>Devuelve la distribuci√≥n de Weibull. Esta distribuci√≥n se usa en los an√°lisis de confiabilidad, como calcular el tiempo medio que tarda un dispositivo en generar un error.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si los argumentos x, alfa o beta no es num√©rico, <b>Weibull_Dist</b> devuelve #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Weibull_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Weibull_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa de Weibull es: 

 </para>
          <para>En la figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa de Weibull</para>
          <para></para>
          <para></para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de probabilidad de Weibull es: 

</para>
          <para>La figura 2: Ecuaci√≥n para la densidad de probabilidad de Weibull</para>
          <para></para>
          <para></para>
          <para>Cuando alfa = 1, <b>Weibull_Dist</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>La figura 3: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha_inicial: fecha que representa la fecha inicial.</param>
        <param name="Arg2">D√≠as: n√∫mero de d√≠as laborables (d√≠as que no sean fines de semana ni d√≠as festivos) anteriores o posteriores al argumento de fecha inicial. Un valor positivo para el argumento de d√≠as produce una fecha futura; un n√∫mero negativo produce una fecha pasada.</param>
        <param name="Arg3">Festivos: lista opcional de una o varias fechas que deben excluirse del calendario laboral, como los d√≠as festivos nacionales y locales. La lista puede ser un rango de celdas que contengan fechas o una constante matricial de los n√∫meros de serie que representen las fechas.</param>
        <summary>Devuelve un n√∫mero que representa una fecha que es el n√∫mero de d√≠as laborables antes o despu√©s de una fecha (la fecha inicial). Los d√≠as laborables excluyen los d√≠as de fin de semana y cualquier fecha identificada como d√≠a festivo. Use WORKDAY para excluir fines de semana o d√≠as festivos cuando calcule fechas de vencimiento de facturas, las fechas de entrega esperadas o el n√∫mero de d√≠as de trabajo realizados.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si uno de los argumentos no es una fecha v√°lida, <b>WorkDay</b> devuelve #VALUE! valor de error. </para>
          <para>Si el argumento fecha_inicial m√°s d√≠as produce una fecha no v√°lida, <b>WorkDay</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de d√≠as no es un entero, se trunca.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha_inicial: la fecha de inicio, truncada a enteros.</param>
        <param name="Arg2">D√≠as - el n√∫mero de d√≠as laborables antes o despu√©s de la fecha_inicial. Un valor positivo da como resultado una fecha futura; un valor negativo produce una fecha pasada; un 0 (cero) valor da como resultado la fecha_inicial. Desplazamiento de d√≠a se trunca a un valor entero.</param>
        <param name="Arg3">Fines de semana: indica los d√≠as de la semana que son los d√≠as de la semana y no se consideran d√≠as laborables. Fin de semana es un n√∫mero de fin de semana o una cadena que especifica cu√°ndo tienen lugar los fines de semana.</param>
        <param name="Arg4">Festivos: un conjunto opcional de uno o m√°s de las fechas que se excluyen del calendario del d√≠a laborable. Festivos es un rango de celdas que contienen las fechas o una constante matricial de los valores de serie que representen las fechas. El orden de las fechas o valores de serie en d√≠as festivos puede ser arbitrario.</param>
        <summary>Devuelve el n√∫mero de serie de la fecha que tiene lugar antes o despu√©s de un n√∫mero determinado de d√≠as laborables con par√°metros de fin de semana personalizados. Los par√°metros de fin de semana indican cu√°les y cu√°ntos d√≠as son d√≠as de fin de semana. Los d√≠as de fin de semana y cualquier d√≠a especificado como festivo no se consideran d√≠as laborables.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si el argumento fecha_inicial est√° fuera del intervalo para el valor de base de la fecha actual, <b>WorkDay_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si cualquier fecha en d√≠as festivos est√° fuera del intervalo para el valor de base de la fecha actual, <b>WorkDay_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento fecha_inicial m√°s el desplazamiento de d√≠as produce una fecha no v√°lida, <b>WorkDay_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si una cadena de fin de semana de longitud no v√°lida o contiene caracteres no v√°lidos, <b>WorkDay_Intl</b> devuelve #VALUE! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores: una serie de flujos de caja que corresponde a un calendario de pagos determinado por el argumento de fechas. El primer pago es opcional y corresponde al costo o pago en que se incurre al principio de la inversi√≥n. Si el primer valor es un costo o un pago, debe ser un valor negativo. Todos los pagos sucesivos se descuentan bas√°ndose en un a√±o de 365 d√≠as. La serie de valores debe incluir al menos un valor positivo y un valor negativo.</param>
        <param name="Arg2">Fechas: calendario de fechas de pago que corresponde a los pagos del flujo de caja. La primera fecha de pago indica el principio del calendario de pagos. El resto de las fechas deben ser posteriores a √©sta, pero pueden aparecer en cualquier orden. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg3">Es estimaci√≥n: n√∫mero que se aproximar√° al resultado de <b>Xirr</b>.</param>
        <summary>Devuelve la tasa interna de retorno para un flujo de caja que no es necesariamente peri√≥dico. Para calcular la tasa interna de retorno de una serie de flujos de caja peri√≥dicos, utilice la funci√≥n IRR.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los n√∫meros del argumento de fechas se truncan a enteros.</para>
          <para>
            <b>XIRR</b> espera al menos un flujo de caja positivo y uno negativo flujo de efectivo; ¬°de lo contrario, <b>Xirr</b> devuelve el #NUM! valor de error. </para>
          <para>Si cualquier n√∫mero de fechas no es una fecha v√°lida, <b>Xirr</b> devuelve #VALUE! valor de error. </para>
          <para>Si cualquier n√∫mero de fechas es anterior a la fecha de inicio, <b>Xirr</b> devuelve el #NUM! valor de error. </para>
          <para>Si valores y fechas contienen un n√∫mero diferente de valores, <b>Xirr</b> devuelve el #NUM! valor de error. </para>
          <para>En la mayor√≠a de los casos no es necesario proporcionar el argumento estimar para el c√°lculo de <b>Xirr</b> . Si se omite, estimaci√≥n: se supone que es 0,1 (10 por ciento). </para>
          <para>
            <b>XIRR</b> se relaciona estrechamente con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />, el neto presente el valor de funci√≥n. La tasa de retorno calculada por <b>Xirr</b> es la tasa de inter√©s correspondiente a XNPV = 0. </para>
          <para>Excel usa una t√©cnica iterativa para el c√°lculo de <b>Xirr</b>. Utilizando una tasa variable (comenzando con el argumento de estimaci√≥n), <b>Xirr</b> recorre el c√°lculo hasta que el resultado es preciso del 0,000001%. Si <b>Xirr</b> no puede encontrar un resultado que funciona despu√©s de 100 intentos, la #NUM! se devuelve el valor de error. La tasa cambia hasta que: </para>
          <para>En la figura 1: ecuaci√≥n</para>
          <para></para>
          <para></para>
          <para>donde:</para>
          <para>di = el i-√©simo, o √∫ltimo, fecha de pago.</para>
          <para>D1 = la fecha de pago 0.</para>
          <para>PI = el i-√©simo, o √∫ltimo, pago.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serie de flujos de caja que corresponde a un calendario de pagos determinado por el argumento de fechas. El primer pago es opcional y corresponde al costo o pago en que se incurre al principio de la inversi√≥n.</param>
        <param name="Arg2">Calendario de fechas de pago que corresponde a los pagos del flujo de caja. La primera fecha de pago indica el principio del calendario de pagos. El resto de las fechas deben ser posteriores a √©sta, pero pueden aparecer en cualquier orden.
</param>
        <summary>Devuelve el valor presente neto de una programaci√≥n de flujos de efectivo que no es necesariamente peri√≥dico.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: el m√©todo <b>Xnpv</b> no proporciona un par√°metro que se corresponde con el argumento de tasa requerido por la funci√≥n XNPV correspondiente (= XNPV (tasa, valores, fechas)). Para evitar esta limitaci√≥n en el c√≥digo VBA, en lugar de usar el m√©todo <b>Xpnv</b> , llame a la funci√≥n XNPV mediante el uso de la <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> (m√©todo).</para>
          <para>Para calcular el valor presente neto de una serie de flujos de efectivo que es peri√≥dico, use la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> (m√©todo).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg2">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg3">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg4">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg5">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg6">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg7">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg8">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg9">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg10">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg11">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg12">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg13">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg14">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg15">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg16">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg17">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg18">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg19">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg20">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg21">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg22">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg23">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg24">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg25">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg26">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg27">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg28">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg29">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg30">condiciones de 1 a 254 que desea comprobar y que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <summary>Devuelve un OR l√≥gico exclusivo de todos los argumentos.</summary>
        <returns>
          <b>BOOL</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha_inicial: fecha que representa la fecha inicial.</param>
        <param name="Arg2">Fecha_final: fecha que representa la fecha final.</param>
        <param name="Arg3">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Calcula la fracci√≥n de a√±o que representa el n√∫mero de d√≠as completos entre los argumentos de fecha inicial y fecha final. Utilice la funci√≥n YEARFRAC para determinar la proporci√≥n de los beneficios u obligaciones de todo un a√±o que corresponde a un per√≠odo espec√≠fico.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si los argumentos fecha_inicial o fecha_final no son fechas v√°lidas, <b>YearFrac</b> devuelve #VALUE! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>YearFrac</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Precio: precio del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg4">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento anual de un valor burs√°til con descuento. Por ejemplo, para una letra del Tesoro.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n o de vencimiento no es una fecha v√°lida, <b>YieldDisc</b> devuelve #VALUE! valor de error. </para>
          <para>Si precio ‚â§ 0 o si rescate son menores que 0, <b>YieldDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>YieldDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>YieldDisc</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til, expresada como n√∫mero de serie.</param>
        <param name="Arg4">Tasa: tasa de inter√©s en la fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg5">Precio: precio del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento anual de un valor burs√°til que paga intereses al vencimiento.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: las fechas deben introducirse mediante la funci√≥n fecha o como resultado de otras f√≥rmulas o funciones. Por ejemplo, puede usar DATE(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/real</description>
            </item>
            <item>
              <term>2</term>
              <description>Real/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Real/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n y base se truncan a enteros.</para>
          <para>Si el argumento de liquidaci√≥n, vencimiento o emisi√≥n no es una fecha v√°lida, <b>YieldMat</b> devuelve #VALUE! valor de error. </para>
          <para>Si tasa &lt; 0 o si precio ‚â§ 0, <b>YieldMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si base &lt; 0 o si base &gt; 4, <b>YieldMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de liquidaci√≥n ‚â• de vencimiento, <b>YieldMat</b> devuelve el #NUM! valor de error.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos respecto al que probar la media de la poblaci√≥n hip√≥tesis.</param>
        <param name="Arg2">El valor que se va a comprobar.</param>
        <param name="Arg3">Sigma: desviaci√≥n est√°ndar (conocida) de la poblaci√≥n. Si se omite, se usa la desviaci√≥n est√°ndar de la muestra.</param>
        <summary>Devuelve el valor de probabilidad de una cola de una prueba z. En una hip√≥tesis para una media de poblaci√≥n, Z_TEST devuelve la probabilidad de que la media de la muestra sea mayor que el promedio de las observaciones del conjunto (matriz) de datos (es decir, la media observada de la muestra).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Si la matriz esta vac√≠o, <b>Z_Test</b> devuelve el valor de error # n/a. </para>
          <para>Cuando no se omite sigma, 
            <b>Z_Test</b> se calcula como se indica a continuaci√≥n: </para>
          <para>En la figura 1: Ecuaci√≥n para prueba.z cuando no se omite sigma</para>
          <para></para>
          <para></para>
          <para>O bien, cuando se omite sigma:</para>
          <para>La figura 2: Ecuaci√≥n para prueba.z cuando se omite sigma</para>
          <para></para>
          <para></para>
          <para>donde x es la media de la muestra, PROMEDIO(matriz), s es la desviaci√≥n est√°ndar de la muestra, STDEV_S(matriz), y n es el n√∫mero de observaciones de la muestra CONTAR(matriz).</para>
          <para>
            <b>Z_Test</b> representa la probabilidad de que la media de la muestra sea mayor que el valor observado, Average (Array), cuando la media de la poblaci√≥n subyacente es Œº0. Por la simetr√≠a de la distribuci√≥n Normal, si promedio (matriz) &lt; Œº0, <b>Z_Test</b> devolver√° un valor mayor que 0,5.</para>
          <para>La siguiente f√≥rmula de Excel se puede usar para calcular la probabilidad de dos colas de que la media de la muestra est√© m√°s lejos de Œº0 (en cualquier sentido) que de Average (Array), cuando la media de la poblaci√≥n subyacente es Œº0:</para>
          <para>= 2 * MIN(Z_TEST(array,Œº0,sigma), 1 - Z_TEST(array,Œº0,sigma)).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos respecto al que probar la media de la poblaci√≥n hip√≥tesis.</param>
        <param name="Arg2">El valor que se va a comprobar.</param>
        <param name="Arg3">Sigma: desviaci√≥n est√°ndar (conocida) de la poblaci√≥n. Si se omite, se utiliza la desviaci√≥n est√°ndar de la muestra.</param>
        <summary>Devuelve el valor de probabilidad de una cola de una prueba z. En una hip√≥tesis para una media de poblaci√≥n, ZTEST devuelve la probabilidad de que la media de la muestra sea mayor que el promedio de las observaciones del conjunto (matriz) de datos (es decir, la media observada de la muestra).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Importante</b>: esta funci√≥n se ha reemplazado con uno o m√°s nuevas funciones que puede proporcionar precisi√≥n mejorada y una mejor cuyos nombres reflejan su uso. Esta funci√≥n sigue estando disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no se requiere compatibilidad con versiones anteriores, se debe tener en cuenta utilizando las nuevas funciones en el futuro, debido a que se describe de forma m√°s precisa su funcionalidad. Para obtener m√°s informaci√≥n sobre la funci√≥n nueva, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> (m√©todo).</para>
          <para>Si la matriz est√° vac√≠o, <b>ZTest</b> devuelve el valor de error # n/a. </para>
          <para>Cuando no se omite sigma, 
            <b>ZTest</b> se calcula como se indica a continuaci√≥n: </para>
          <para>En la figura 1: Ecuaci√≥n para prueba.z cuando no se omite sigma</para>
          <para></para>
          <para></para>
          <para>O bien, cuando se omite sigma:</para>
          <para>La figura 2: Ecuaci√≥n para prueba.z cuando se omite sigma</para>
          <para></para>
          <para></para>
          <para>donde x es la media de la muestra, AVERAGE(array); s es la desviaci√≥n est√°ndar de la muestra, STDEV(array); y n es el n√∫mero de observaciones de la muestra COUNT(array).</para>
          <para>
            <b>Obtenido mediante ZTest</b> representa la probabilidad de que la media de la muestra sea mayor que el valor observado, Average (Array), cuando la media de la poblaci√≥n subyacente es Œº0. Por la simetr√≠a de la distribuci√≥n Normal, si promedio (matriz) &lt; Œº0, ZTEST devolver√° un valor mayor que 0,5.</para>
          <para>Se puede usar la siguiente f√≥rmula de Excel para calcular la probabilidad de dos colas de que la media de la muestra est√© m√°s lejos de Œº0 (en cualquier sentido) que de Average (Array), cuando la media de la poblaci√≥n subyacente es Œº0: = 2 * MIN(ZTEST(array,Œº0,sigma), 1 - ZTEST (matriz, Œº0, Sigma)).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>