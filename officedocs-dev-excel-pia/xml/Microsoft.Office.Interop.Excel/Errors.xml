<Type Name="Errors" FullName="Microsoft.Office.Interop.Excel.Errors">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b4f3cf8bb7a50a611d29713aebe29d640596ae60" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20576401" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface Errors" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Errors" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.Errors" />
  <TypeSignature Language="VB.NET" Value="Public Interface Errors" />
  <TypeSignature Language="C++ CLI" Value="public interface class Errors" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0002445C-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="47587-101">Representa los distintos errores de hoja de cálculo para un rango.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47587-101">Represents the various spreadsheet errors for a range.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="47587-102">
        <para>Usar el <see cref="P:Microsoft.Office.Interop.Excel.Range.Errors" /> (propiedad) de la <see cref="T:Microsoft.Office.Interop.Excel.Range" /> colección para devolver un objeto <b>Errors</b> .</para>
        <para>Cuando haya obtenido un objeto <b>Errors</b> , puede usar el <see cref="P:Microsoft.Office.Interop.Excel.Error.Value" /> (propiedad) de la <see cref="T:Microsoft.Office.Interop.Excel.Error" /> objeto para buscar determinadas condiciones de comprobación de errores.</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="47587-102">
          <para>Use the <see cref="P:Microsoft.Office.Interop.Excel.Range.Errors" /> property of the <see cref="T:Microsoft.Office.Interop.Excel.Range" /> collection to return an <b>Errors</b> object.</para>
          <para>Once an <b>Errors</b> object is returned, you can use the <see cref="P:Microsoft.Office.Interop.Excel.Error.Value" /> property of the <see cref="T:Microsoft.Office.Interop.Excel.Error" /> object to check for particular error-checking conditions.</para>
          <para />
        </span>
      </span>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Error this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Error _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Errors._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As Error" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Error ^ default[System::Object ^] { Microsoft::Office::Interop::Excel::Error ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Error</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary>
          <span data-ttu-id="47587-103">Permite al usuario tener acceso a las opciones de comprobación de errores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-103">Allows the user to to access error checking options.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="47587-104">
            <para>Referencia de la <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> objeto para ver una lista de valores de índice asociados con las opciones de comprobación de errores.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-104">
              <para>Reference the <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> object to view a list of index values associated with error checking options.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="47587-105">
            <para>En este ejemplo, se coloca un número escrito como texto en la celda A1.  A continuación, Microsoft Excel determina si el número está escrito como texto en la celda A1 y notifica al usuario.</para>
            <code>&lt;span class="label"&gt;Sub CheckForErrors()































































































































































































































































































































































































































































































































    Range("A1").Formula = "'12"































































































































































































































































































































































































































































































































    If Range("A1").&lt;/span&gt;
&lt;i&gt;Errors&lt;/i&gt;
&lt;span class="label"&gt;.Item(xlNumberAsText).Value = True Then        MsgBox "The number is written as text."    Else        MsgBox "The number is not written as text."    End IfEnd Sub&lt;/span&gt;</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-105">
              <para>In this example, a number written as text is placed in cell A1.  Microsoft Excel then determines if the number is written as text in cell A1 and notifies the user accordingly.</para>
              <code>&lt;span class="label"&gt;Sub CheckForErrors()































































































































































































































































































































































































































































































































    Range("A1").Formula = "'12"































































































































































































































































































































































































































































































































    If Range("A1").&lt;/span&gt;
&lt;i&gt;Errors&lt;/i&gt;
&lt;span class="label"&gt;.Item(xlNumberAsText).Value = True Then        MsgBox "The number is written as text."    Else        MsgBox "The number is not written as text."    End IfEnd Sub&lt;/span&gt;</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Errors.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="47587-106">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object que representa la aplicación Microsoft Excel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-106">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Errors.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="47587-107">Devuelve un entero de 32 bits que indica la aplicación en la que se creó el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-107">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="47587-108">
            <para>Si el objeto se creó en Microsoft Excel, esta propiedad devuelve la cadena XCEL, que es equivalente a la C. 5843454 número hexadecimal</para> Propiedad de 
          <para>el <b>creador</b> está diseñada para usarse en Microsoft Excel para Macintosh, donde cada aplicación tiene un código de creador de cuatro caracteres. Por ejemplo, Microsoft Excel tiene el código de creador XCEL.</para><para /></span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-108">
              <para>If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</para>
              <para>The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Error Item[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Error Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Errors.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item(Index As Object) As Error" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Error ^ Item[System::Object ^] { Microsoft::Office::Interop::Excel::Error ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Error</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="47587-109">
            <b>Objeto</b>requerido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-109">Required <b>Object</b>.</span>
          </span>
          <span data-ttu-id="47587-110">El <paramref name="Index" /> también puede ser una de estas constantes:<b>xlEvaluateToError</b> la celda da como resultado un valor de error. <b>xlTextDate</b> La celda contiene una fecha de texto con años de 2 dígitos. <b>xlNumberAsText</b> La celda contiene un número guardado como texto. <b>xlInconsistentFormula</b> La celda contiene una fórmula incoherente para una región. <b>xlOmittedCells</b> La celda contiene una fórmula que omite una celda para una región. <b>xlUnlockedFormulaCells</b> La celda que está desbloqueada contiene una fórmula. <b>xlEmptyCellReferences</b> La celda contiene una fórmula que hace referencia a celdas vacías.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-110">The <paramref name="Index" /> can also be one of these constants:<b>xlEvaluateToError</b> The cell evaluates to an error value.<b>xlTextDate</b> The cell contains a text date with 2 digit years.<b>xlNumberAsText</b> The cell contains a number stored as text.<b>xlInconsistentFormula</b> The cell contains an inconsistent formula for a region.<b>xlOmittedCells</b> The cell contains a formula omitting a cell for a region.<b>xlUnlockedFormulaCells</b> The cell which is unlocked contains a formula.<b>xlEmptyCellReferences</b> The cell contains a formula referring to empty cells.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47587-111">Devuelve un solo miembro de la <see cref="T:Microsoft.Office.Interop.Excel.Error" /> objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-111">Returns a single member of the <see cref="T:Microsoft.Office.Interop.Excel.Error" /> object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Errors.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="47587-112">Devuelve el objeto primario del objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47587-112">Returns the parent object for the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>