<Type Name="FormatCondition" FullName="Microsoft.Office.Interop.Excel.FormatCondition">
  <Metadata><Meta Name="ms.openlocfilehash" Value="06db90663108615d83dc620b65e7671be2f3d791" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50003566" /></Metadata><TypeSignature Language="C#" Value="public interface FormatCondition" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract FormatCondition" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.FormatCondition" />
  <TypeSignature Language="VB.NET" Value="Public Interface FormatCondition" />
  <TypeSignature Language="C++ CLI" Value="public interface class FormatCondition" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024425-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c8158-101">Representa un formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-101">Represents a conditional format.</span></span></summary>
    <remarks><para><span data-ttu-id="c8158-102">El <b>objeto FormatCondition</b> es un miembro de la <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> colección.</span><span class="sxs-lookup"><span data-stu-id="c8158-102">The <b>FormatCondition</b> object is a member of the <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> collection.</span></span> <span data-ttu-id="c8158-103">La <b>colección FormatConditions</b> puede contener hasta tres formatos condicionales para un intervalo determinado.</span><span class="sxs-lookup"><span data-stu-id="c8158-103">The <b>FormatConditions</b> collection can contain up to three conditional formats for a given range.</span></span></para>
      <para><span data-ttu-id="c8158-104">Utilice <b>FormatConditions</b>( ), donde index es el número de índice del <paramref name="index" /> formato condicional, para devolver un objeto <b>FormatCondition</b> .</span><span class="sxs-lookup"><span data-stu-id="c8158-104">Use <b>FormatConditions</b>(<paramref name="index" />), where index is the index number of the conditional format, to return a <b>FormatCondition</b> object.</span></span></para>
      <para><span data-ttu-id="c8158-105">Utilice el <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> método para crear un nuevo formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-105">Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to create a new conditional format.</span></span> <span data-ttu-id="c8158-106">Si intenta crear más de tres formatos condicionales para un solo intervalo, se produce un error <b>en el método</b> Add.</span><span class="sxs-lookup"><span data-stu-id="c8158-106">If you try to create more than three conditional formats for a single range, the <b>Add</b> method fails.</span></span> <span data-ttu-id="c8158-107">Si un intervalo tiene tres formatos, puede usar el método para cambiar uno de los formatos, o puede usar el método para eliminar un formato y, a continuación, usar el método Add para crear un <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> nuevo formato. <b></b></span><span class="sxs-lookup"><span data-stu-id="c8158-107">If a range has three formats, you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to change one of the formats, or you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete a format and then use the <b>Add</b> method to create a new format.</span></span></para>
      <para><span data-ttu-id="c8158-108">Utilice el <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Font" /> , y las propiedades del objeto <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Borders" /> <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Interior" /> <b>FormatCondition</b> para controlar el aspecto de las celdas con formato.</span><span class="sxs-lookup"><span data-stu-id="c8158-108">Use the <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Font" />, <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Borders" />, and <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Interior" /> properties of the <b>FormatCondition</b> object to control the appearance of formatted cells.</span></span> <span data-ttu-id="c8158-109">Algunas de las propiedades de estos objetos no son compatibles con el modelo de objetos del formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-109">Some properties of these objects aren’t supported by the conditional format object model.</span></span> <span data-ttu-id="c8158-110">Las propiedades que se pueden usar con formato condicional se enumeran en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="c8158-110">The properties that can be used with conditional formatting are listed in the following table.</span></span></para>
      <list type="table">
        <item>
          <term><span data-ttu-id="c8158-111">
            <b>Fuente</b>
          </span><span class="sxs-lookup"><span data-stu-id="c8158-111">
            <b>Font</b>
          </span></span></term>
          <description><span data-ttu-id="c8158-112">
            <b>Negrita</b>
            <b>ColorIndex</b>
            <b></b>
            <b>FontStyle</b>
            <b>Cursiva</b>
            <b>Tachado</b>Subrayado
            <b>Los</b>estilos de subrayado contables no se pueden usar.</span><span class="sxs-lookup"><span data-stu-id="c8158-112">
            <b>Bold</b>
            <b>Color</b>
            <b>ColorIndex</b>
            <b>FontStyle</b>
            <b>Italic</b>
            <b>Strikethrough</b>
            <b>Underline</b>The accounting underline styles cannot be used.</span></span></description>
        </item>
        <item>
          <term><span data-ttu-id="c8158-113">
            <b>Borde</b>
          </span><span class="sxs-lookup"><span data-stu-id="c8158-113">
            <b>Border</b>
          </span></span></term>
          <description><span data-ttu-id="c8158-114">
            <b>Estilo</b>
            <b>de color</b>
            <b></b>
            <b></b>
            <b></b>inferior izquierdo derecho Se pueden usar los siguientes estilos de borde (no se admiten todos los demás): <b>xlNone</b>, <b>xlSolid</b>, <b>xlDash</b>, <b>xlDot</b>, <b>xlDashDot</b>, <b>xlDashDot</b>, <b>xlGray50</b>, <b>xlGray75</b>y <b>xlGray25</b>. <b>Peso</b><b>superior</b>Se pueden usar los siguientes grosores de borde (no se admiten todos los demás): <b>xlWeightHairline</b> y <b>xlWeightThin</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-114">
            <b>Bottom</b>
            <b>Color</b>
            <b>Left</b>
            <b>Right</b>
            <b>Style</b>The following border styles can be used (all others aren’t supported): <b>xlNone</b>, <b>xlSolid</b>, <b>xlDash</b>, <b>xlDot</b>, <b>xlDashDot</b>, <b>xlDashDotDot</b>, <b>xlGray50</b>, <b>xlGray75</b>, and <b>xlGray25</b>.<b>Top</b><b>Weight</b>The following border weights can be used (all others aren’t supported): <b>xlWeightHairline</b> and <b>xlWeightThin</b>.</span></span></description>
        </item>
        <item>
          <term><span data-ttu-id="c8158-115">
            <b>Interior</b>
          </span><span class="sxs-lookup"><span data-stu-id="c8158-115">
            <b>Interior</b>
          </span></span></term>
          <description><span data-ttu-id="c8158-116">
            <b>Color</b>
            <b>ColorIndex</b>
            <b>PatternColorIndex</b> 
            <b></b>
          </span><span class="sxs-lookup"><span data-stu-id="c8158-116">
            <b>Color</b>
            <b>ColorIndex</b>
            <b>Pattern</b>
            <b>PatternColorIndex</b>
          </span></span></description>
        </item>
      </list>
      <para> </para></remarks>
  </Docs>
  <Members>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-117">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Application" /> objeto que representa la aplicación Microsoft Excel.</span><span class="sxs-lookup"><span data-stu-id="c8158-117">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppliesTo">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range AppliesTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range AppliesTo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.AppliesTo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppliesTo As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ AppliesTo { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2626)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2626)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-118">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objeto que especifica el rango de celdas al que se aplica la regla de formato.</span><span class="sxs-lookup"><span data-stu-id="c8158-118">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Range" /> object specifying the cell range to which the formatting rule is applied.</span></span></summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Range" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Borders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Borders As Borders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Borders ^ Borders { Microsoft::Office::Interop::Excel::Borders ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-119">Devuelve una colección que representa los bordes de un estilo o un rango de celdas (incluido un rango definido como <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> parte de un formato condicional).</span><span class="sxs-lookup"><span data-stu-id="c8158-119">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-120">Devuelve un entero de 32 bits que indica la aplicación con la que se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="c8158-120">Returns a 32-bit integer that indicates the application in which this object was created.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="c8158-121">Si el objeto se creó en Microsoft Excel, la propiedad devuelve la cadena XCEL, que es el equivalente del número hexadecimal 5843454C.</span><span class="sxs-lookup"><span data-stu-id="c8158-121">If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</span></span></para>
          <para><span data-ttu-id="c8158-122">La propiedad <b>Creator</b> está diseñada para su uso en Microsoft Excel para Macintosh, donde cada aplicación tiene un código de creador de cuatro caracteres.</span><span class="sxs-lookup"><span data-stu-id="c8158-122">The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code.</span></span> <span data-ttu-id="c8158-123">Por ejemplo, Microsoft Excel tiene el código de creador XCEL.</span><span class="sxs-lookup"><span data-stu-id="c8158-123">For example, Microsoft Excel has the creator code XCEL.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DateOperator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTimePeriods DateOperator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTimePeriods DateOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.DateOperator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateOperator As XlTimePeriods" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTimePeriods DateOperator { Microsoft::Office::Interop::Excel::XlTimePeriods get(); void set(Microsoft::Office::Interop::Excel::XlTimePeriods value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2614)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2614)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTimePeriods</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-124">Especifica el operador <see cref="T:Microsoft.Office.Interop.Excel.XlTimePeriods" /> Date usado en la condición de formato.</span><span class="sxs-lookup"><span data-stu-id="c8158-124">Specifies the <see cref="T:Microsoft.Office.Interop.Excel.XlTimePeriods" /> Date operator used in the format condition.</span></span> <span data-ttu-id="c8158-125">Lectura/escritura.</span><span class="sxs-lookup"><span data-stu-id="c8158-125">Read/write.</span></span></summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlTimePeriods" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c8158-126">Elimina el objeto.</span><span class="sxs-lookup"><span data-stu-id="c8158-126">Deletes the object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Font" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Font ^ Font { Microsoft::Office::Interop::Excel::Font ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-127">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Font" /> objeto que representa la fuente del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="c8158-127">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Font" /> object that represents the font of the specified object.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula1">
      <MemberSignature Language="C#" Value="public string Formula1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Formula1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Formula1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Formula1 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Formula1 { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1579)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-128">Devuelve el valor o la expresión correspondiente al formato condicional o a la validación de datos.</span><span class="sxs-lookup"><span data-stu-id="c8158-128">Returns the value or expression associated with the conditional format or data validation.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="c8158-129">La <b>propiedad Formula1</b> puede ser un valor constante, un valor de cadena, una referencia de celda o una fórmula.</span><span class="sxs-lookup"><span data-stu-id="c8158-129">The <b>Formula1</b> property can be a constant value, a string value, a cell reference, or a formula.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula2">
      <MemberSignature Language="C#" Value="public string Formula2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Formula2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Formula2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Formula2 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Formula2 { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1580)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-130">Devuelve el valor o la expresión correspondiente a la segunda parte de un formato condicional o validación de datos.</span><span class="sxs-lookup"><span data-stu-id="c8158-130">Returns the value or expression associated with the second part of a conditional format or data validation.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="c8158-131">La <b>propiedad Formula2</b> sólo se usa cuando la propiedad de formato condicional de validación de datos es <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Operator" /> <b>xlBetween</b> o <b>xlNotBetween</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-131">The <b>Formula2</b> property is used only when the data validation conditional format <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Operator" /> property is <b>xlBetween</b> or <b>xlNotBetween</b>.</span></span> <span data-ttu-id="c8158-132">Puede ser un valor constante, un valor de cadena, una referencia de celda o una fórmula.</span><span class="sxs-lookup"><span data-stu-id="c8158-132">Can be a constant value, a string value, a cell reference, or a formula.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Interior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interior As Interior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Interior ^ Interior { Microsoft::Office::Interop::Excel::Interior ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-133">Devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> objeto que representa el interior del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="c8158-133">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> object that represents the interior of the specified object.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modify">
      <MemberSignature Language="C#" Value="public void Modify (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Modify([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Modify (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2623)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type"><span data-ttu-id="c8158-134">Obligatorio <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> .</span><span class="sxs-lookup"><span data-stu-id="c8158-134">Required <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span></span> <span data-ttu-id="c8158-135">Especifica si el formato condicional está basado en el valor de una celda o en una expresión.</span><span class="sxs-lookup"><span data-stu-id="c8158-135">Specifies whether the conditional format is based on a cell value or an expression.</span></span> <span data-ttu-id="c8158-136">Puede ser una de las siguientes <b>constantes XlFormatCondition:</b> <b>xlCellValue</b><b>xlExpression</b></span><span class="sxs-lookup"><span data-stu-id="c8158-136">Can be one of the following <b>XlFormatCondition</b> constants:<b>xlCellValue</b><b>xlExpression</b></span></span></param>
        <param name="Operator"><span data-ttu-id="c8158-137">Opcional <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> .</span><span class="sxs-lookup"><span data-stu-id="c8158-137">Optional <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" />.</span></span> <span data-ttu-id="c8158-138">Operador de formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-138">The conditional format operator.</span></span> <span data-ttu-id="c8158-139">Puede ser una de las siguientes constantes <b>XlFormatConditionOperator:</b> <b>xlBetween</b><b>xlEqual</b><b>xlGreater xlGreaterEqual</b><b>xlLess xlLessEqua</b><b></b>l<b>xlNotBetween</b><b>xlNotEqual</b>If , es<b></b> <paramref name="Type" /> <b>xlExpression</b>, el argumento se <paramref name="Operator" /> omite.</span><span class="sxs-lookup"><span data-stu-id="c8158-139">Can be one of the following <b>XlFormatConditionOperator</b> constants:<b>xlBetween</b><b>xlEqual</b><b>xlGreater</b><b>xlGreaterEqual</b><b>xlLess</b><b>xlLessEqua</b>l<b>xlNotBetween</b><b>xlNotEqual</b>If <paramref name="Type" />, is <b>xlExpression</b>, the <paramref name="Operator" /> argument is ignored.</span></span></param>
        <param name="Formula1"><span data-ttu-id="c8158-140">Optional <b>Object</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-140">Optional <b>Object</b>.</span></span> <span data-ttu-id="c8158-141">Valor o expresión correspondiente al formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-141">The value or expression associated with the conditional format.</span></span> <span data-ttu-id="c8158-142">Puede ser un valor constante, un valor de cadena, una referencia de celda o una fórmula.</span><span class="sxs-lookup"><span data-stu-id="c8158-142">Can be a constant value, a string value, a cell reference, or a formula.</span></span></param>
        <param name="Formula2"><span data-ttu-id="c8158-143">Optional <b>Object</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-143">Optional <b>Object</b>.</span></span> <span data-ttu-id="c8158-144">Valor o expresión correspondiente al formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-144">The value or expression associated with the conditional format.</span></span> <span data-ttu-id="c8158-145">Puede ser un valor constante, un valor de cadena, una referencia de celda o una fórmula.</span><span class="sxs-lookup"><span data-stu-id="c8158-145">Can be a constant value, a string value, a cell reference, or a formula.</span></span></param>
        <summary><span data-ttu-id="c8158-146">Modifica un formato condicional existente.</span><span class="sxs-lookup"><span data-stu-id="c8158-146">Modifies an existing conditional format.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyAppliesToRange">
      <MemberSignature Language="C#" Value="public void ModifyAppliesToRange (Microsoft.Office.Interop.Excel.Range Range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ModifyAppliesToRange([in]class Microsoft.Office.Interop.Excel.Range Range) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.ModifyAppliesToRange(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ModifyAppliesToRange(Microsoft::Office::Interop::Excel::Range ^ Range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2627)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Range" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Range"><span data-ttu-id="c8158-147">Rango al que se aplicará esta regla de formato.</span><span class="sxs-lookup"><span data-stu-id="c8158-147">The range to which this formatting rule will be applied.</span></span></param>
        <summary><span data-ttu-id="c8158-148">Establece el rango de celdas al que se aplica esta regla de formato.</span><span class="sxs-lookup"><span data-stu-id="c8158-148">Sets the cell range to which this formatting rule applies.</span></span></summary>
        <remarks><para><span data-ttu-id="c8158-149">El rango debe estar en el estilo de referencia A1 y estar totalmente contenido en la hoja principal de la <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> colección.</span><span class="sxs-lookup"><span data-stu-id="c8158-149">The range must be in the A1 reference style and be entirely contained within the sheet that is the parent of the <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> collection.</span></span> <span data-ttu-id="c8158-150">Puede incluir un operador de rango (dos puntos), de intersección (espacio) o de unión (coma).</span><span class="sxs-lookup"><span data-stu-id="c8158-150">It can include the range operator (a colon), the intersection operator (a space), or the union operator (a comma).</span></span> <span data-ttu-id="c8158-151">También se pueden usar signos de dólar, pero no se tendrán en cuenta.</span><span class="sxs-lookup"><span data-stu-id="c8158-151">Dollar signs can also be used but they are ignored.</span></span></para>
          <para><span data-ttu-id="c8158-152">Asimismo, se puede utilizar un nombre definido local en cualquier parte del rango, pero debe estar en el lenguaje de la macro.</span><span class="sxs-lookup"><span data-stu-id="c8158-152">You can also use a local defined name in any part of the range, but the name must be in the language of the macro.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyEx">
      <MemberSignature Language="C#" Value="public void ModifyEx (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2, object String, object Operator2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ModifyEx([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2, [in]object String, [in]object Operator2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.ModifyEx(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ModifyEx (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object, Optional String As Object, Optional Operator2 As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1581)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
        <Parameter Name="String" Type="System.Object" />
        <Parameter Name="Operator2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">To be added.</param>
        <param name="Operator">To be added.</param>
        <param name="Formula1">To be added.</param>
        <param name="Formula2">To be added.</param>
        <param name="String">To be added.</param>
        <param name="Operator2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormat { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-153">Devuelve o establece el formato de número aplicado a una celda si la regla de formato condicional da como resultado <b>True</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-153">Returns or sets the number format applied to a cell if the conditional formatting rule evaluates to <b>True</b>.</span></span> <span data-ttu-id="c8158-154">Lectura/Escritura<b>Objeto</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-154">Read/write <b>Object</b>.</span></span></summary>
        <value><span data-ttu-id="c8158-155"><b>Objeto</b></span><span class="sxs-lookup"><span data-stu-id="c8158-155"><b>Object</b></span></span></value>
        <remarks><para><span data-ttu-id="c8158-156">El formato de número se especifica con los mismos códigos de formato que se muestran en la ficha Número del cuadro de diálogo Formato de celdas.</span><span class="sxs-lookup"><span data-stu-id="c8158-156">The number format is specified using the same format codes displayed on the Number tab of the Format Cells dialog box.</span></span> <span data-ttu-id="c8158-157">Puede usar un formato de número integrado, como "General", o crear un formato de número personalizado.</span><span class="sxs-lookup"><span data-stu-id="c8158-157">You can use a built-in number format, for example "General", or create a custom number format.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="public int Operator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Operator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Operator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Operator As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Operator { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(797)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-158">Devuelve el operador del formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-158">Returns the operator for the conditional format.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-159">Devuelve el objeto primario del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="c8158-159">Returns the parent object for the specified object.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-p114">Devuelve o establece el valor de prioridad de la regla de formato condicional. La prioridad determina el orden de evaluación cuando existen varias reglas de formato condicional en una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="c8158-p114">Returns or sets the priority value of the conditional formatting rule. The priority determines the order of evaluation when multiple conditional formatting rules exist in a worksheet.</span></span></summary>
        <value><span data-ttu-id="c8158-162"><b>Integer</b></span><span class="sxs-lookup"><span data-stu-id="c8158-162"><b>Integer</b></span></span></value>
        <remarks><para><span data-ttu-id="c8158-p115">Cuando se establece la prioridad, el valor debe ser un número entero positivo entre 1 y el número total de reglas de formato condicional en la hoja de cálculo. La prioridad debe ser un valor único para todas las reglas de la hoja, por lo que si se cambia la prioridad para la regla de formato condicional especificada, es posible que varíe el valor de prioridad de las demás reglas en la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="c8158-p115">When setting the priority, the value must be a positive integer between 1 and the total number of conditional formatting rules on the worksheet. The priority must be a unique value for all rules on the worksheet, so changing the priority for the specified conditional formatting rule may cause the priority value of the other rules on the worksheet to be shifted.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PTCondition">
      <MemberSignature Language="C#" Value="public bool PTCondition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PTCondition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.PTCondition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PTCondition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PTCondition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2631)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-165">Devuelve un valor <b>Boolean</b> que indica si el formato condicional se aplica a un gráfico de tabla dinámica.</span><span class="sxs-lookup"><span data-stu-id="c8158-165">Returns a <b>Boolean</b> value indicating if the conditional format is being applied to a PivotTable chart.</span></span> <span data-ttu-id="c8158-166">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="c8158-166">Read-only.</span></span></summary>
        <value><span data-ttu-id="c8158-167"><b>Valor booleano</b></span><span class="sxs-lookup"><span data-stu-id="c8158-167"><b>Boolean</b></span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopeType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlPivotConditionScope ScopeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlPivotConditionScope ScopeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.ScopeType" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeType As XlPivotConditionScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlPivotConditionScope ScopeType { Microsoft::Office::Interop::Excel::XlPivotConditionScope get(); void set(Microsoft::Office::Interop::Excel::XlPivotConditionScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlPivotConditionScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-168">Devuelve o establece una de las constantes de la enumeración, que determina el ámbito del formato condicional cuando se aplica <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /> a un gráfico de tabla dinámica.</span><span class="sxs-lookup"><span data-stu-id="c8158-168">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /> enumeration, which determines the scope of the conditional format when it is applied to a PivotTable chart.</span></span></summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /></value>
        <remarks><para><span data-ttu-id="c8158-169">El valor predeterminado es <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlSelectionScope" /> , que establece el ámbito mediante la <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.AppliesTo" /> propiedad.</span><span class="sxs-lookup"><span data-stu-id="c8158-169">The default value is <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlSelectionScope" />, which sets the scope using the <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.AppliesTo" />property.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFirstPriority">
      <MemberSignature Language="C#" Value="public void SetFirstPriority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFirstPriority() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.SetFirstPriority" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFirstPriority ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFirstPriority();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2629)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c8158-170">Establece el valor de prioridad para esta regla de formato condicional en "1" para que se evalúe antes que todas las demás reglas en la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="c8158-170">Sets the priority value for this conditional formatting rule to "1" so that it will be evaluated before all other rules on the worksheet.</span></span></summary>
        <remarks><para><span data-ttu-id="c8158-171">Cuando se tienen varias reglas de formato condicional en una hoja de cálculo, si la regla no se estableció previamente como "prioridad 1", este método hará que la prioridad de todas las demás reglas existentes en la hoja de cálculo aumente en uno.</span><span class="sxs-lookup"><span data-stu-id="c8158-171">When you have multiple conditional formatting rules  in a worksheet, if the rule was not previously set to priority "1", this method will cause the priority of all other existing rules on the worksheet to be increased by one.</span></span></para>
          <para><span data-ttu-id="c8158-172">
            <b>Nota:</b>Los niveles de prioridad para las reglas de formato condicional se aplican en el nivel de hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="c8158-172">
            <b>Note</b>: Priority levels for conditional formatting rules are applied on a worksheet-level basis.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastPriority">
      <MemberSignature Language="C#" Value="public void SetLastPriority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLastPriority() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.SetLastPriority" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLastPriority ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLastPriority();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2630)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c8158-173">Establece el orden de evaluación para esta regla de formato condicional de modo que se evalúe después que todas las demás reglas en la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="c8158-173">Sets the evaluation order for this conditional formatting rule so it is evaluated after all other rules on the worksheet.</span></span></summary>
        <remarks><para><span data-ttu-id="c8158-p117">El valor real de la prioridad será igual al número total de reglas de formato condicional en la hoja de cálculo. Cuando se tengan varias reglas de formato condicional en una hoja de cálculo, este método hará que la prioridad de las reglas que tenían un valor de prioridad mayor que el de esta regla aumente en uno.</span><span class="sxs-lookup"><span data-stu-id="c8158-p117">The actual vaule of the priority will be equal to the total number of conditional formatting rules on the worksheet. When you have multiple conditional formatting rules  in a worksheet, this method will cause the priority of rules that had a priority value greater than this rule to be increased by one.</span></span></para>
          <para><span data-ttu-id="c8158-176">
            <b>Nota:</b>Los niveles de prioridad para las reglas de formato condicional se aplican en el nivel de hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="c8158-176">
            <b>Note</b>: Priority levels for conditional formatting rules are applied on a worksheet-level basis.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StopIfTrue">
      <MemberSignature Language="C#" Value="public bool StopIfTrue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StopIfTrue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.StopIfTrue" />
      <MemberSignature Language="VB.NET" Value="Public Property StopIfTrue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StopIfTrue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-177">Devuelve o establece un valor <b>Boolean</b> que determina si se deben evaluar reglas adicionales de formato en la celda si la regla actual da como resultado <b>True</b>.</span><span class="sxs-lookup"><span data-stu-id="c8158-177">Returns or sets a <b>Boolean</b> value that determines if additional formatting rules on the cell should be evaluated if the current rule evaluates to <b>True</b>.</span></span></summary>
        <value><span data-ttu-id="c8158-178"><b>Valor booleano</b></span><span class="sxs-lookup"><span data-stu-id="c8158-178"><b>Boolean</b></span></span></value>
        <remarks><para><span data-ttu-id="c8158-179">Para mantener la compatibilidad con versiones anteriores, el valor predeterminado para esta propiedad es <b>True</b>, que corresponde al comportamiento opuesto de una regla de formato creada en la interfaz del usuario.</span><span class="sxs-lookup"><span data-stu-id="c8158-179">To support backward compatibility, the default value for this property is <b>True</b>, which is the opposite behavior of a formatting rule created in the user interface.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-180">Devuelve o establece un <b>valor de</b> tipo String que especifica el texto usado por la regla de formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-180">Returns or sets a <b>String</b> value specifying the text used by the conditional formatting rule.</span></span></summary>
        <value><span data-ttu-id="c8158-181"><b>Cadena</b></span><span class="sxs-lookup"><span data-stu-id="c8158-181"><b>String</b></span></span></value>
        <remarks><para><span data-ttu-id="c8158-182">Esta propiedad se omite si la <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Type" /> propiedad no está establecida en <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlTextString" /> .</span><span class="sxs-lookup"><span data-stu-id="c8158-182">This property is ignored if the <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Type" /> property is not set to <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlTextString" />.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOperator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlContainsOperator TextOperator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlContainsOperator TextOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.TextOperator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOperator As XlContainsOperator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlContainsOperator TextOperator { Microsoft::Office::Interop::Excel::XlContainsOperator get(); void set(Microsoft::Office::Interop::Excel::XlContainsOperator value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2613)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2613)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlContainsOperator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-183">Devuelve o establece una de las constantes de la enumeración, especificando la búsqueda de texto <see cref="T:Microsoft.Office.Interop.Excel.XlContainsOperator" /> realizada por la regla de formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c8158-183">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlContainsOperator" /> enumeration, specifying the text search performed by the conditional formatting rule.</span></span></summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlContainsOperator" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public int Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Type { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8158-184">Devuelve el tipo de objeto.</span><span class="sxs-lookup"><span data-stu-id="c8158-184">Returns the object type.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="c8158-185">El tipo de objeto puede ser una de las siguientes <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> constantes:</span><span class="sxs-lookup"><span data-stu-id="c8158-185">The object type can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> constants:</span></span></para>
          <para><span data-ttu-id="c8158-186">
            <b>xlCellValue</b>
          </span><span class="sxs-lookup"><span data-stu-id="c8158-186">
            <b>xlCellValue</b>
          </span></span></para>
          <para><span data-ttu-id="c8158-187">
            <b>xlExpression</b>
          </span><span class="sxs-lookup"><span data-stu-id="c8158-187">
            <b>xlExpression</b>
          </span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>